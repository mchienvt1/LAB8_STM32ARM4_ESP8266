
Bai8_ESP_Wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cb4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08007e44  08007e44  00008e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ed8  08007ed8  00009064  2**0
                  CONTENTS
  4 .ARM          00000008  08007ed8  08007ed8  00008ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ee0  08007ee0  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ee0  08007ee0  00008ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ee4  08007ee4  00008ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08007ee8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009064  2**0
                  CONTENTS
 10 .bss          00000520  20000064  20000064  00009064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000584  20000584  00009064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001929a  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004349  00000000  00000000  0002232e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a0  00000000  00000000  00026678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000119c  00000000  00000000  00027d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026544  00000000  00000000  00028eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020101  00000000  00000000  0004f3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df830  00000000  00000000  0006f4f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014ed29  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000062c0  00000000  00000000  0014ed6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  0015502c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e2c 	.word	0x08007e2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08007e2c 	.word	0x08007e2c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2iz>:
 80005e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80005f0:	d215      	bcs.n	800061e <__aeabi_d2iz+0x36>
 80005f2:	d511      	bpl.n	8000618 <__aeabi_d2iz+0x30>
 80005f4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d912      	bls.n	8000624 <__aeabi_d2iz+0x3c>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800060e:	fa23 f002 	lsr.w	r0, r3, r2
 8000612:	bf18      	it	ne
 8000614:	4240      	negne	r0, r0
 8000616:	4770      	bx	lr
 8000618:	f04f 0000 	mov.w	r0, #0
 800061c:	4770      	bx	lr
 800061e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000622:	d105      	bne.n	8000630 <__aeabi_d2iz+0x48>
 8000624:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000628:	bf08      	it	eq
 800062a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800062e:	4770      	bx	lr
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b96a 	b.w	8000924 <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9d08      	ldr	r5, [sp, #32]
 800066e:	460c      	mov	r4, r1
 8000670:	2b00      	cmp	r3, #0
 8000672:	d14e      	bne.n	8000712 <__udivmoddi4+0xaa>
 8000674:	4694      	mov	ip, r2
 8000676:	458c      	cmp	ip, r1
 8000678:	4686      	mov	lr, r0
 800067a:	fab2 f282 	clz	r2, r2
 800067e:	d962      	bls.n	8000746 <__udivmoddi4+0xde>
 8000680:	b14a      	cbz	r2, 8000696 <__udivmoddi4+0x2e>
 8000682:	f1c2 0320 	rsb	r3, r2, #32
 8000686:	4091      	lsls	r1, r2
 8000688:	fa20 f303 	lsr.w	r3, r0, r3
 800068c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000690:	4319      	orrs	r1, r3
 8000692:	fa00 fe02 	lsl.w	lr, r0, r2
 8000696:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800069a:	fa1f f68c 	uxth.w	r6, ip
 800069e:	fbb1 f4f7 	udiv	r4, r1, r7
 80006a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006a6:	fb07 1114 	mls	r1, r7, r4, r1
 80006aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ae:	fb04 f106 	mul.w	r1, r4, r6
 80006b2:	4299      	cmp	r1, r3
 80006b4:	d90a      	bls.n	80006cc <__udivmoddi4+0x64>
 80006b6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80006be:	f080 8112 	bcs.w	80008e6 <__udivmoddi4+0x27e>
 80006c2:	4299      	cmp	r1, r3
 80006c4:	f240 810f 	bls.w	80008e6 <__udivmoddi4+0x27e>
 80006c8:	3c02      	subs	r4, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a59      	subs	r1, r3, r1
 80006ce:	fa1f f38e 	uxth.w	r3, lr
 80006d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80006d6:	fb07 1110 	mls	r1, r7, r0, r1
 80006da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006de:	fb00 f606 	mul.w	r6, r0, r6
 80006e2:	429e      	cmp	r6, r3
 80006e4:	d90a      	bls.n	80006fc <__udivmoddi4+0x94>
 80006e6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80006ee:	f080 80fc 	bcs.w	80008ea <__udivmoddi4+0x282>
 80006f2:	429e      	cmp	r6, r3
 80006f4:	f240 80f9 	bls.w	80008ea <__udivmoddi4+0x282>
 80006f8:	4463      	add	r3, ip
 80006fa:	3802      	subs	r0, #2
 80006fc:	1b9b      	subs	r3, r3, r6
 80006fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000702:	2100      	movs	r1, #0
 8000704:	b11d      	cbz	r5, 800070e <__udivmoddi4+0xa6>
 8000706:	40d3      	lsrs	r3, r2
 8000708:	2200      	movs	r2, #0
 800070a:	e9c5 3200 	strd	r3, r2, [r5]
 800070e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000712:	428b      	cmp	r3, r1
 8000714:	d905      	bls.n	8000722 <__udivmoddi4+0xba>
 8000716:	b10d      	cbz	r5, 800071c <__udivmoddi4+0xb4>
 8000718:	e9c5 0100 	strd	r0, r1, [r5]
 800071c:	2100      	movs	r1, #0
 800071e:	4608      	mov	r0, r1
 8000720:	e7f5      	b.n	800070e <__udivmoddi4+0xa6>
 8000722:	fab3 f183 	clz	r1, r3
 8000726:	2900      	cmp	r1, #0
 8000728:	d146      	bne.n	80007b8 <__udivmoddi4+0x150>
 800072a:	42a3      	cmp	r3, r4
 800072c:	d302      	bcc.n	8000734 <__udivmoddi4+0xcc>
 800072e:	4290      	cmp	r0, r2
 8000730:	f0c0 80f0 	bcc.w	8000914 <__udivmoddi4+0x2ac>
 8000734:	1a86      	subs	r6, r0, r2
 8000736:	eb64 0303 	sbc.w	r3, r4, r3
 800073a:	2001      	movs	r0, #1
 800073c:	2d00      	cmp	r5, #0
 800073e:	d0e6      	beq.n	800070e <__udivmoddi4+0xa6>
 8000740:	e9c5 6300 	strd	r6, r3, [r5]
 8000744:	e7e3      	b.n	800070e <__udivmoddi4+0xa6>
 8000746:	2a00      	cmp	r2, #0
 8000748:	f040 8090 	bne.w	800086c <__udivmoddi4+0x204>
 800074c:	eba1 040c 	sub.w	r4, r1, ip
 8000750:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000754:	fa1f f78c 	uxth.w	r7, ip
 8000758:	2101      	movs	r1, #1
 800075a:	fbb4 f6f8 	udiv	r6, r4, r8
 800075e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000762:	fb08 4416 	mls	r4, r8, r6, r4
 8000766:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800076a:	fb07 f006 	mul.w	r0, r7, r6
 800076e:	4298      	cmp	r0, r3
 8000770:	d908      	bls.n	8000784 <__udivmoddi4+0x11c>
 8000772:	eb1c 0303 	adds.w	r3, ip, r3
 8000776:	f106 34ff 	add.w	r4, r6, #4294967295
 800077a:	d202      	bcs.n	8000782 <__udivmoddi4+0x11a>
 800077c:	4298      	cmp	r0, r3
 800077e:	f200 80cd 	bhi.w	800091c <__udivmoddi4+0x2b4>
 8000782:	4626      	mov	r6, r4
 8000784:	1a1c      	subs	r4, r3, r0
 8000786:	fa1f f38e 	uxth.w	r3, lr
 800078a:	fbb4 f0f8 	udiv	r0, r4, r8
 800078e:	fb08 4410 	mls	r4, r8, r0, r4
 8000792:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000796:	fb00 f707 	mul.w	r7, r0, r7
 800079a:	429f      	cmp	r7, r3
 800079c:	d908      	bls.n	80007b0 <__udivmoddi4+0x148>
 800079e:	eb1c 0303 	adds.w	r3, ip, r3
 80007a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80007a6:	d202      	bcs.n	80007ae <__udivmoddi4+0x146>
 80007a8:	429f      	cmp	r7, r3
 80007aa:	f200 80b0 	bhi.w	800090e <__udivmoddi4+0x2a6>
 80007ae:	4620      	mov	r0, r4
 80007b0:	1bdb      	subs	r3, r3, r7
 80007b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007b6:	e7a5      	b.n	8000704 <__udivmoddi4+0x9c>
 80007b8:	f1c1 0620 	rsb	r6, r1, #32
 80007bc:	408b      	lsls	r3, r1
 80007be:	fa22 f706 	lsr.w	r7, r2, r6
 80007c2:	431f      	orrs	r7, r3
 80007c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80007c8:	fa04 f301 	lsl.w	r3, r4, r1
 80007cc:	ea43 030c 	orr.w	r3, r3, ip
 80007d0:	40f4      	lsrs	r4, r6
 80007d2:	fa00 f801 	lsl.w	r8, r0, r1
 80007d6:	0c38      	lsrs	r0, r7, #16
 80007d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007dc:	fbb4 fef0 	udiv	lr, r4, r0
 80007e0:	fa1f fc87 	uxth.w	ip, r7
 80007e4:	fb00 441e 	mls	r4, r0, lr, r4
 80007e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007ec:	fb0e f90c 	mul.w	r9, lr, ip
 80007f0:	45a1      	cmp	r9, r4
 80007f2:	fa02 f201 	lsl.w	r2, r2, r1
 80007f6:	d90a      	bls.n	800080e <__udivmoddi4+0x1a6>
 80007f8:	193c      	adds	r4, r7, r4
 80007fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80007fe:	f080 8084 	bcs.w	800090a <__udivmoddi4+0x2a2>
 8000802:	45a1      	cmp	r9, r4
 8000804:	f240 8081 	bls.w	800090a <__udivmoddi4+0x2a2>
 8000808:	f1ae 0e02 	sub.w	lr, lr, #2
 800080c:	443c      	add	r4, r7
 800080e:	eba4 0409 	sub.w	r4, r4, r9
 8000812:	fa1f f983 	uxth.w	r9, r3
 8000816:	fbb4 f3f0 	udiv	r3, r4, r0
 800081a:	fb00 4413 	mls	r4, r0, r3, r4
 800081e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000822:	fb03 fc0c 	mul.w	ip, r3, ip
 8000826:	45a4      	cmp	ip, r4
 8000828:	d907      	bls.n	800083a <__udivmoddi4+0x1d2>
 800082a:	193c      	adds	r4, r7, r4
 800082c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000830:	d267      	bcs.n	8000902 <__udivmoddi4+0x29a>
 8000832:	45a4      	cmp	ip, r4
 8000834:	d965      	bls.n	8000902 <__udivmoddi4+0x29a>
 8000836:	3b02      	subs	r3, #2
 8000838:	443c      	add	r4, r7
 800083a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800083e:	fba0 9302 	umull	r9, r3, r0, r2
 8000842:	eba4 040c 	sub.w	r4, r4, ip
 8000846:	429c      	cmp	r4, r3
 8000848:	46ce      	mov	lr, r9
 800084a:	469c      	mov	ip, r3
 800084c:	d351      	bcc.n	80008f2 <__udivmoddi4+0x28a>
 800084e:	d04e      	beq.n	80008ee <__udivmoddi4+0x286>
 8000850:	b155      	cbz	r5, 8000868 <__udivmoddi4+0x200>
 8000852:	ebb8 030e 	subs.w	r3, r8, lr
 8000856:	eb64 040c 	sbc.w	r4, r4, ip
 800085a:	fa04 f606 	lsl.w	r6, r4, r6
 800085e:	40cb      	lsrs	r3, r1
 8000860:	431e      	orrs	r6, r3
 8000862:	40cc      	lsrs	r4, r1
 8000864:	e9c5 6400 	strd	r6, r4, [r5]
 8000868:	2100      	movs	r1, #0
 800086a:	e750      	b.n	800070e <__udivmoddi4+0xa6>
 800086c:	f1c2 0320 	rsb	r3, r2, #32
 8000870:	fa20 f103 	lsr.w	r1, r0, r3
 8000874:	fa0c fc02 	lsl.w	ip, ip, r2
 8000878:	fa24 f303 	lsr.w	r3, r4, r3
 800087c:	4094      	lsls	r4, r2
 800087e:	430c      	orrs	r4, r1
 8000880:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000884:	fa00 fe02 	lsl.w	lr, r0, r2
 8000888:	fa1f f78c 	uxth.w	r7, ip
 800088c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000890:	fb08 3110 	mls	r1, r8, r0, r3
 8000894:	0c23      	lsrs	r3, r4, #16
 8000896:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800089a:	fb00 f107 	mul.w	r1, r0, r7
 800089e:	4299      	cmp	r1, r3
 80008a0:	d908      	bls.n	80008b4 <__udivmoddi4+0x24c>
 80008a2:	eb1c 0303 	adds.w	r3, ip, r3
 80008a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80008aa:	d22c      	bcs.n	8000906 <__udivmoddi4+0x29e>
 80008ac:	4299      	cmp	r1, r3
 80008ae:	d92a      	bls.n	8000906 <__udivmoddi4+0x29e>
 80008b0:	3802      	subs	r0, #2
 80008b2:	4463      	add	r3, ip
 80008b4:	1a5b      	subs	r3, r3, r1
 80008b6:	b2a4      	uxth	r4, r4
 80008b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80008bc:	fb08 3311 	mls	r3, r8, r1, r3
 80008c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008c4:	fb01 f307 	mul.w	r3, r1, r7
 80008c8:	42a3      	cmp	r3, r4
 80008ca:	d908      	bls.n	80008de <__udivmoddi4+0x276>
 80008cc:	eb1c 0404 	adds.w	r4, ip, r4
 80008d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80008d4:	d213      	bcs.n	80008fe <__udivmoddi4+0x296>
 80008d6:	42a3      	cmp	r3, r4
 80008d8:	d911      	bls.n	80008fe <__udivmoddi4+0x296>
 80008da:	3902      	subs	r1, #2
 80008dc:	4464      	add	r4, ip
 80008de:	1ae4      	subs	r4, r4, r3
 80008e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008e4:	e739      	b.n	800075a <__udivmoddi4+0xf2>
 80008e6:	4604      	mov	r4, r0
 80008e8:	e6f0      	b.n	80006cc <__udivmoddi4+0x64>
 80008ea:	4608      	mov	r0, r1
 80008ec:	e706      	b.n	80006fc <__udivmoddi4+0x94>
 80008ee:	45c8      	cmp	r8, r9
 80008f0:	d2ae      	bcs.n	8000850 <__udivmoddi4+0x1e8>
 80008f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80008f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80008fa:	3801      	subs	r0, #1
 80008fc:	e7a8      	b.n	8000850 <__udivmoddi4+0x1e8>
 80008fe:	4631      	mov	r1, r6
 8000900:	e7ed      	b.n	80008de <__udivmoddi4+0x276>
 8000902:	4603      	mov	r3, r0
 8000904:	e799      	b.n	800083a <__udivmoddi4+0x1d2>
 8000906:	4630      	mov	r0, r6
 8000908:	e7d4      	b.n	80008b4 <__udivmoddi4+0x24c>
 800090a:	46d6      	mov	lr, sl
 800090c:	e77f      	b.n	800080e <__udivmoddi4+0x1a6>
 800090e:	4463      	add	r3, ip
 8000910:	3802      	subs	r0, #2
 8000912:	e74d      	b.n	80007b0 <__udivmoddi4+0x148>
 8000914:	4606      	mov	r6, r0
 8000916:	4623      	mov	r3, r4
 8000918:	4608      	mov	r0, r1
 800091a:	e70f      	b.n	800073c <__udivmoddi4+0xd4>
 800091c:	3e02      	subs	r6, #2
 800091e:	4463      	add	r3, ip
 8000920:	e730      	b.n	8000784 <__udivmoddi4+0x11c>
 8000922:	bf00      	nop

08000924 <__aeabi_idiv0>:
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop

08000928 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800092e:	463b      	mov	r3, r7
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800093a:	4b3d      	ldr	r3, [pc, #244]	@ (8000a30 <MX_ADC1_Init+0x108>)
 800093c:	4a3d      	ldr	r2, [pc, #244]	@ (8000a34 <MX_ADC1_Init+0x10c>)
 800093e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000940:	4b3b      	ldr	r3, [pc, #236]	@ (8000a30 <MX_ADC1_Init+0x108>)
 8000942:	2200      	movs	r2, #0
 8000944:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000946:	4b3a      	ldr	r3, [pc, #232]	@ (8000a30 <MX_ADC1_Init+0x108>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800094c:	4b38      	ldr	r3, [pc, #224]	@ (8000a30 <MX_ADC1_Init+0x108>)
 800094e:	2201      	movs	r2, #1
 8000950:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000952:	4b37      	ldr	r3, [pc, #220]	@ (8000a30 <MX_ADC1_Init+0x108>)
 8000954:	2200      	movs	r2, #0
 8000956:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000958:	4b35      	ldr	r3, [pc, #212]	@ (8000a30 <MX_ADC1_Init+0x108>)
 800095a:	2200      	movs	r2, #0
 800095c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000960:	4b33      	ldr	r3, [pc, #204]	@ (8000a30 <MX_ADC1_Init+0x108>)
 8000962:	2200      	movs	r2, #0
 8000964:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000966:	4b32      	ldr	r3, [pc, #200]	@ (8000a30 <MX_ADC1_Init+0x108>)
 8000968:	4a33      	ldr	r2, [pc, #204]	@ (8000a38 <MX_ADC1_Init+0x110>)
 800096a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800096c:	4b30      	ldr	r3, [pc, #192]	@ (8000a30 <MX_ADC1_Init+0x108>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000972:	4b2f      	ldr	r3, [pc, #188]	@ (8000a30 <MX_ADC1_Init+0x108>)
 8000974:	2205      	movs	r2, #5
 8000976:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000978:	4b2d      	ldr	r3, [pc, #180]	@ (8000a30 <MX_ADC1_Init+0x108>)
 800097a:	2200      	movs	r2, #0
 800097c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000980:	4b2b      	ldr	r3, [pc, #172]	@ (8000a30 <MX_ADC1_Init+0x108>)
 8000982:	2201      	movs	r2, #1
 8000984:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000986:	482a      	ldr	r0, [pc, #168]	@ (8000a30 <MX_ADC1_Init+0x108>)
 8000988:	f001 fdbe 	bl	8002508 <HAL_ADC_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000992:	f001 f831 	bl	80019f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000996:	2308      	movs	r3, #8
 8000998:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800099a:	2301      	movs	r3, #1
 800099c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800099e:	2300      	movs	r3, #0
 80009a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a2:	463b      	mov	r3, r7
 80009a4:	4619      	mov	r1, r3
 80009a6:	4822      	ldr	r0, [pc, #136]	@ (8000a30 <MX_ADC1_Init+0x108>)
 80009a8:	f001 ff20 	bl	80027ec <HAL_ADC_ConfigChannel>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80009b2:	f001 f821 	bl	80019f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80009b6:	2309      	movs	r3, #9
 80009b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80009ba:	2302      	movs	r3, #2
 80009bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009be:	463b      	mov	r3, r7
 80009c0:	4619      	mov	r1, r3
 80009c2:	481b      	ldr	r0, [pc, #108]	@ (8000a30 <MX_ADC1_Init+0x108>)
 80009c4:	f001 ff12 	bl	80027ec <HAL_ADC_ConfigChannel>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80009ce:	f001 f813 	bl	80019f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80009d2:	230a      	movs	r3, #10
 80009d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80009d6:	2303      	movs	r3, #3
 80009d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009da:	463b      	mov	r3, r7
 80009dc:	4619      	mov	r1, r3
 80009de:	4814      	ldr	r0, [pc, #80]	@ (8000a30 <MX_ADC1_Init+0x108>)
 80009e0:	f001 ff04 	bl	80027ec <HAL_ADC_ConfigChannel>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80009ea:	f001 f805 	bl	80019f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80009ee:	230b      	movs	r3, #11
 80009f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80009f2:	2304      	movs	r3, #4
 80009f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f6:	463b      	mov	r3, r7
 80009f8:	4619      	mov	r1, r3
 80009fa:	480d      	ldr	r0, [pc, #52]	@ (8000a30 <MX_ADC1_Init+0x108>)
 80009fc:	f001 fef6 	bl	80027ec <HAL_ADC_ConfigChannel>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000a06:	f000 fff7 	bl	80019f8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000a0a:	230c      	movs	r3, #12
 8000a0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000a0e:	2305      	movs	r3, #5
 8000a10:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a12:	463b      	mov	r3, r7
 8000a14:	4619      	mov	r1, r3
 8000a16:	4806      	ldr	r0, [pc, #24]	@ (8000a30 <MX_ADC1_Init+0x108>)
 8000a18:	f001 fee8 	bl	80027ec <HAL_ADC_ConfigChannel>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000a22:	f000 ffe9 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000080 	.word	0x20000080
 8000a34:	40012000 	.word	0x40012000
 8000a38:	0f000001 	.word	0x0f000001

08000a3c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	@ 0x28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a3c      	ldr	r2, [pc, #240]	@ (8000b4c <HAL_ADC_MspInit+0x110>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d171      	bne.n	8000b42 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	4b3b      	ldr	r3, [pc, #236]	@ (8000b50 <HAL_ADC_MspInit+0x114>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a66:	4a3a      	ldr	r2, [pc, #232]	@ (8000b50 <HAL_ADC_MspInit+0x114>)
 8000a68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a6e:	4b38      	ldr	r3, [pc, #224]	@ (8000b50 <HAL_ADC_MspInit+0x114>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	4b34      	ldr	r3, [pc, #208]	@ (8000b50 <HAL_ADC_MspInit+0x114>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	4a33      	ldr	r2, [pc, #204]	@ (8000b50 <HAL_ADC_MspInit+0x114>)
 8000a84:	f043 0304 	orr.w	r3, r3, #4
 8000a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8a:	4b31      	ldr	r3, [pc, #196]	@ (8000b50 <HAL_ADC_MspInit+0x114>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	f003 0304 	and.w	r3, r3, #4
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	4b2d      	ldr	r3, [pc, #180]	@ (8000b50 <HAL_ADC_MspInit+0x114>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	4a2c      	ldr	r2, [pc, #176]	@ (8000b50 <HAL_ADC_MspInit+0x114>)
 8000aa0:	f043 0302 	orr.w	r3, r3, #2
 8000aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8000b50 <HAL_ADC_MspInit+0x114>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	f003 0302 	and.w	r3, r3, #2
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000ab2:	2307      	movs	r3, #7
 8000ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4823      	ldr	r0, [pc, #140]	@ (8000b54 <HAL_ADC_MspInit+0x118>)
 8000ac6:	f002 fe45 	bl	8003754 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000aca:	2303      	movs	r3, #3
 8000acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	481e      	ldr	r0, [pc, #120]	@ (8000b58 <HAL_ADC_MspInit+0x11c>)
 8000ade:	f002 fe39 	bl	8003754 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b5c <HAL_ADC_MspInit+0x120>)
 8000ae4:	4a1e      	ldr	r2, [pc, #120]	@ (8000b60 <HAL_ADC_MspInit+0x124>)
 8000ae6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b5c <HAL_ADC_MspInit+0x120>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aee:	4b1b      	ldr	r3, [pc, #108]	@ (8000b5c <HAL_ADC_MspInit+0x120>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000af4:	4b19      	ldr	r3, [pc, #100]	@ (8000b5c <HAL_ADC_MspInit+0x120>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000afa:	4b18      	ldr	r3, [pc, #96]	@ (8000b5c <HAL_ADC_MspInit+0x120>)
 8000afc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b00:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b02:	4b16      	ldr	r3, [pc, #88]	@ (8000b5c <HAL_ADC_MspInit+0x120>)
 8000b04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b08:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b0a:	4b14      	ldr	r3, [pc, #80]	@ (8000b5c <HAL_ADC_MspInit+0x120>)
 8000b0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b10:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b12:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <HAL_ADC_MspInit+0x120>)
 8000b14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b18:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b1a:	4b10      	ldr	r3, [pc, #64]	@ (8000b5c <HAL_ADC_MspInit+0x120>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b20:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <HAL_ADC_MspInit+0x120>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b26:	480d      	ldr	r0, [pc, #52]	@ (8000b5c <HAL_ADC_MspInit+0x120>)
 8000b28:	f002 fa12 	bl	8002f50 <HAL_DMA_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000b32:	f000 ff61 	bl	80019f8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a08      	ldr	r2, [pc, #32]	@ (8000b5c <HAL_ADC_MspInit+0x120>)
 8000b3a:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b3c:	4a07      	ldr	r2, [pc, #28]	@ (8000b5c <HAL_ADC_MspInit+0x120>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b42:	bf00      	nop
 8000b44:	3728      	adds	r7, #40	@ 0x28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40012000 	.word	0x40012000
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020800 	.word	0x40020800
 8000b58:	40020400 	.word	0x40020400
 8000b5c:	200000c8 	.word	0x200000c8
 8000b60:	40026410 	.word	0x40026410

08000b64 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2108      	movs	r1, #8
 8000b6c:	4802      	ldr	r0, [pc, #8]	@ (8000b78 <button_init+0x14>)
 8000b6e:	f002 ff8d 	bl	8003a8c <HAL_GPIO_WritePin>
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40020c00 	.word	0x40020c00

08000b7c <button_Scan>:

void button_Scan(){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2108      	movs	r1, #8
 8000b86:	482f      	ldr	r0, [pc, #188]	@ (8000c44 <button_Scan+0xc8>)
 8000b88:	f002 ff80 	bl	8003a8c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2108      	movs	r1, #8
 8000b90:	482c      	ldr	r0, [pc, #176]	@ (8000c44 <button_Scan+0xc8>)
 8000b92:	f002 ff7b 	bl	8003a8c <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000b96:	230a      	movs	r3, #10
 8000b98:	2202      	movs	r2, #2
 8000b9a:	492b      	ldr	r1, [pc, #172]	@ (8000c48 <button_Scan+0xcc>)
 8000b9c:	482b      	ldr	r0, [pc, #172]	@ (8000c4c <button_Scan+0xd0>)
 8000b9e:	f003 ff4a 	bl	8004a36 <HAL_SPI_Receive>
	  int button_index = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 8000ba6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000baa:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	e03f      	b.n	8000c32 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db06      	blt.n	8000bc6 <button_Scan+0x4a>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b03      	cmp	r3, #3
 8000bbc:	dc03      	bgt.n	8000bc6 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	e018      	b.n	8000bf8 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b03      	cmp	r3, #3
 8000bca:	dd07      	ble.n	8000bdc <button_Scan+0x60>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b07      	cmp	r3, #7
 8000bd0:	dc04      	bgt.n	8000bdc <button_Scan+0x60>
			  button_index = 7 - i;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	f1c3 0307 	rsb	r3, r3, #7
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	e00d      	b.n	8000bf8 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b07      	cmp	r3, #7
 8000be0:	dd06      	ble.n	8000bf0 <button_Scan+0x74>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b0b      	cmp	r3, #11
 8000be6:	dc03      	bgt.n	8000bf0 <button_Scan+0x74>
			  button_index = i + 4;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3304      	adds	r3, #4
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	e003      	b.n	8000bf8 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f1c3 0317 	rsb	r3, r3, #23
 8000bf6:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000bf8:	4b13      	ldr	r3, [pc, #76]	@ (8000c48 <button_Scan+0xcc>)
 8000bfa:	881a      	ldrh	r2, [r3, #0]
 8000bfc:	897b      	ldrh	r3, [r7, #10]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d005      	beq.n	8000c12 <button_Scan+0x96>
 8000c06:	4a12      	ldr	r2, [pc, #72]	@ (8000c50 <button_Scan+0xd4>)
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000c10:	e009      	b.n	8000c26 <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000c12:	4a0f      	ldr	r2, [pc, #60]	@ (8000c50 <button_Scan+0xd4>)
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	b299      	uxth	r1, r3
 8000c1e:	4a0c      	ldr	r2, [pc, #48]	@ (8000c50 <button_Scan+0xd4>)
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8000c26:	897b      	ldrh	r3, [r7, #10]
 8000c28:	085b      	lsrs	r3, r3, #1
 8000c2a:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b0f      	cmp	r3, #15
 8000c36:	ddbc      	ble.n	8000bb2 <button_Scan+0x36>
	  }
}
 8000c38:	bf00      	nop
 8000c3a:	bf00      	nop
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40020c00 	.word	0x40020c00
 8000c48:	20000148 	.word	0x20000148
 8000c4c:	20000214 	.word	0x20000214
 8000c50:	20000128 	.word	0x20000128

08000c54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <MX_DMA_Init+0x3c>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	4a0b      	ldr	r2, [pc, #44]	@ (8000c90 <MX_DMA_Init+0x3c>)
 8000c64:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6a:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <MX_DMA_Init+0x3c>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2038      	movs	r0, #56	@ 0x38
 8000c7c:	f002 f931 	bl	8002ee2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c80:	2038      	movs	r0, #56	@ 0x38
 8000c82:	f002 f94a 	bl	8002f1a <HAL_NVIC_EnableIRQ>

}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40023800 	.word	0x40023800

08000c94 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08e      	sub	sp, #56	@ 0x38
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]
 8000caa:	615a      	str	r2, [r3, #20]
 8000cac:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000cae:	463b      	mov	r3, r7
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
 8000cbc:	615a      	str	r2, [r3, #20]
 8000cbe:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000cc0:	4b2f      	ldr	r3, [pc, #188]	@ (8000d80 <MX_FSMC_Init+0xec>)
 8000cc2:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000cc6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8000d80 <MX_FSMC_Init+0xec>)
 8000cca:	4a2e      	ldr	r2, [pc, #184]	@ (8000d84 <MX_FSMC_Init+0xf0>)
 8000ccc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000cce:	4b2c      	ldr	r3, [pc, #176]	@ (8000d80 <MX_FSMC_Init+0xec>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000cd4:	4b2a      	ldr	r3, [pc, #168]	@ (8000d80 <MX_FSMC_Init+0xec>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000cda:	4b29      	ldr	r3, [pc, #164]	@ (8000d80 <MX_FSMC_Init+0xec>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000ce0:	4b27      	ldr	r3, [pc, #156]	@ (8000d80 <MX_FSMC_Init+0xec>)
 8000ce2:	2210      	movs	r2, #16
 8000ce4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000ce6:	4b26      	ldr	r3, [pc, #152]	@ (8000d80 <MX_FSMC_Init+0xec>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000cec:	4b24      	ldr	r3, [pc, #144]	@ (8000d80 <MX_FSMC_Init+0xec>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000cf2:	4b23      	ldr	r3, [pc, #140]	@ (8000d80 <MX_FSMC_Init+0xec>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000cf8:	4b21      	ldr	r3, [pc, #132]	@ (8000d80 <MX_FSMC_Init+0xec>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000cfe:	4b20      	ldr	r3, [pc, #128]	@ (8000d80 <MX_FSMC_Init+0xec>)
 8000d00:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d04:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000d06:	4b1e      	ldr	r3, [pc, #120]	@ (8000d80 <MX_FSMC_Init+0xec>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000d80 <MX_FSMC_Init+0xec>)
 8000d0e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d12:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000d14:	4b1a      	ldr	r3, [pc, #104]	@ (8000d80 <MX_FSMC_Init+0xec>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000d1a:	4b19      	ldr	r3, [pc, #100]	@ (8000d80 <MX_FSMC_Init+0xec>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000d20:	4b17      	ldr	r3, [pc, #92]	@ (8000d80 <MX_FSMC_Init+0xec>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000d26:	230f      	movs	r3, #15
 8000d28:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000d2a:	230f      	movs	r3, #15
 8000d2c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000d2e:	233c      	movs	r3, #60	@ 0x3c
 8000d30:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 8000d36:	2310      	movs	r3, #16
 8000d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 8000d3a:	2311      	movs	r3, #17
 8000d3c:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000d42:	2308      	movs	r3, #8
 8000d44:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000d46:	230f      	movs	r3, #15
 8000d48:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000d4a:	2309      	movs	r3, #9
 8000d4c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000d52:	2310      	movs	r3, #16
 8000d54:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000d56:	2311      	movs	r3, #17
 8000d58:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000d5e:	463a      	mov	r2, r7
 8000d60:	f107 031c 	add.w	r3, r7, #28
 8000d64:	4619      	mov	r1, r3
 8000d66:	4806      	ldr	r0, [pc, #24]	@ (8000d80 <MX_FSMC_Init+0xec>)
 8000d68:	f004 fa48 	bl	80051fc <HAL_SRAM_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8000d72:	f000 fe41 	bl	80019f8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000d76:	bf00      	nop
 8000d78:	3738      	adds	r7, #56	@ 0x38
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	2000014c 	.word	0x2000014c
 8000d84:	a0000104 	.word	0xa0000104

08000d88 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000d9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000e10 <HAL_FSMC_MspInit+0x88>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d131      	bne.n	8000e08 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000da4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e10 <HAL_FSMC_MspInit+0x88>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	603b      	str	r3, [r7, #0]
 8000dae:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <HAL_FSMC_MspInit+0x8c>)
 8000db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000db2:	4a18      	ldr	r2, [pc, #96]	@ (8000e14 <HAL_FSMC_MspInit+0x8c>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6393      	str	r3, [r2, #56]	@ 0x38
 8000dba:	4b16      	ldr	r3, [pc, #88]	@ (8000e14 <HAL_FSMC_MspInit+0x8c>)
 8000dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000dc6:	f64f 7388 	movw	r3, #65416	@ 0xff88
 8000dca:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000dd8:	230c      	movs	r3, #12
 8000dda:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	4619      	mov	r1, r3
 8000de0:	480d      	ldr	r0, [pc, #52]	@ (8000e18 <HAL_FSMC_MspInit+0x90>)
 8000de2:	f002 fcb7 	bl	8003754 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000de6:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8000dea:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df4:	2303      	movs	r3, #3
 8000df6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000df8:	230c      	movs	r3, #12
 8000dfa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4806      	ldr	r0, [pc, #24]	@ (8000e1c <HAL_FSMC_MspInit+0x94>)
 8000e02:	f002 fca7 	bl	8003754 <HAL_GPIO_Init>
 8000e06:	e000      	b.n	8000e0a <HAL_FSMC_MspInit+0x82>
    return;
 8000e08:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	2000019c 	.word	0x2000019c
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	40020c00 	.word	0x40020c00

08000e20 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000e28:	f7ff ffae 	bl	8000d88 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08e      	sub	sp, #56	@ 0x38
 8000e38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	623b      	str	r3, [r7, #32]
 8000e4e:	4b8f      	ldr	r3, [pc, #572]	@ (800108c <MX_GPIO_Init+0x258>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	4a8e      	ldr	r2, [pc, #568]	@ (800108c <MX_GPIO_Init+0x258>)
 8000e54:	f043 0310 	orr.w	r3, r3, #16
 8000e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5a:	4b8c      	ldr	r3, [pc, #560]	@ (800108c <MX_GPIO_Init+0x258>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	f003 0310 	and.w	r3, r3, #16
 8000e62:	623b      	str	r3, [r7, #32]
 8000e64:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
 8000e6a:	4b88      	ldr	r3, [pc, #544]	@ (800108c <MX_GPIO_Init+0x258>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	4a87      	ldr	r2, [pc, #540]	@ (800108c <MX_GPIO_Init+0x258>)
 8000e70:	f043 0304 	orr.w	r3, r3, #4
 8000e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e76:	4b85      	ldr	r3, [pc, #532]	@ (800108c <MX_GPIO_Init+0x258>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	61fb      	str	r3, [r7, #28]
 8000e80:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	61bb      	str	r3, [r7, #24]
 8000e86:	4b81      	ldr	r3, [pc, #516]	@ (800108c <MX_GPIO_Init+0x258>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	4a80      	ldr	r2, [pc, #512]	@ (800108c <MX_GPIO_Init+0x258>)
 8000e8c:	f043 0320 	orr.w	r3, r3, #32
 8000e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e92:	4b7e      	ldr	r3, [pc, #504]	@ (800108c <MX_GPIO_Init+0x258>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	f003 0320 	and.w	r3, r3, #32
 8000e9a:	61bb      	str	r3, [r7, #24]
 8000e9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
 8000ea2:	4b7a      	ldr	r3, [pc, #488]	@ (800108c <MX_GPIO_Init+0x258>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	4a79      	ldr	r2, [pc, #484]	@ (800108c <MX_GPIO_Init+0x258>)
 8000ea8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eae:	4b77      	ldr	r3, [pc, #476]	@ (800108c <MX_GPIO_Init+0x258>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	4b73      	ldr	r3, [pc, #460]	@ (800108c <MX_GPIO_Init+0x258>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	4a72      	ldr	r2, [pc, #456]	@ (800108c <MX_GPIO_Init+0x258>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eca:	4b70      	ldr	r3, [pc, #448]	@ (800108c <MX_GPIO_Init+0x258>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	4b6c      	ldr	r3, [pc, #432]	@ (800108c <MX_GPIO_Init+0x258>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	4a6b      	ldr	r2, [pc, #428]	@ (800108c <MX_GPIO_Init+0x258>)
 8000ee0:	f043 0302 	orr.w	r3, r3, #2
 8000ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee6:	4b69      	ldr	r3, [pc, #420]	@ (800108c <MX_GPIO_Init+0x258>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	4b65      	ldr	r3, [pc, #404]	@ (800108c <MX_GPIO_Init+0x258>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	4a64      	ldr	r2, [pc, #400]	@ (800108c <MX_GPIO_Init+0x258>)
 8000efc:	f043 0308 	orr.w	r3, r3, #8
 8000f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f02:	4b62      	ldr	r3, [pc, #392]	@ (800108c <MX_GPIO_Init+0x258>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	f003 0308 	and.w	r3, r3, #8
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	4b5e      	ldr	r3, [pc, #376]	@ (800108c <MX_GPIO_Init+0x258>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	4a5d      	ldr	r2, [pc, #372]	@ (800108c <MX_GPIO_Init+0x258>)
 8000f18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1e:	4b5b      	ldr	r3, [pc, #364]	@ (800108c <MX_GPIO_Init+0x258>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2170      	movs	r1, #112	@ 0x70
 8000f2e:	4858      	ldr	r0, [pc, #352]	@ (8001090 <MX_GPIO_Init+0x25c>)
 8000f30:	f002 fdac 	bl	8003a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	f44f 5108 	mov.w	r1, #8704	@ 0x2200
 8000f3a:	4856      	ldr	r0, [pc, #344]	@ (8001094 <MX_GPIO_Init+0x260>)
 8000f3c:	f002 fda6 	bl	8003a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f46:	4854      	ldr	r0, [pc, #336]	@ (8001098 <MX_GPIO_Init+0x264>)
 8000f48:	f002 fda0 	bl	8003a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8000f52:	4852      	ldr	r0, [pc, #328]	@ (800109c <MX_GPIO_Init+0x268>)
 8000f54:	f002 fd9a 	bl	8003a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f5e:	4850      	ldr	r0, [pc, #320]	@ (80010a0 <MX_GPIO_Init+0x26c>)
 8000f60:	f002 fd94 	bl	8003a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2108      	movs	r1, #8
 8000f68:	484e      	ldr	r0, [pc, #312]	@ (80010a4 <MX_GPIO_Init+0x270>)
 8000f6a:	f002 fd8f 	bl	8003a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000f6e:	2370      	movs	r3, #112	@ 0x70
 8000f70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	2301      	movs	r3, #1
 8000f74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f82:	4619      	mov	r1, r3
 8000f84:	4842      	ldr	r0, [pc, #264]	@ (8001090 <MX_GPIO_Init+0x25c>)
 8000f86:	f002 fbe5 	bl	8003754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8000f8a:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f90:	2301      	movs	r3, #1
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	483c      	ldr	r0, [pc, #240]	@ (8001094 <MX_GPIO_Init+0x260>)
 8000fa4:	f002 fbd6 	bl	8003754 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin;
 8000fa8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ESP12_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4836      	ldr	r0, [pc, #216]	@ (8001098 <MX_GPIO_Init+0x264>)
 8000fbe:	f002 fbc9 	bl	8003754 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_PWR_Pin;
 8000fc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ESP12_PWR_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd8:	4619      	mov	r1, r3
 8000fda:	482f      	ldr	r0, [pc, #188]	@ (8001098 <MX_GPIO_Init+0x264>)
 8000fdc:	f002 fbba 	bl	8003754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000fe0:	23c0      	movs	r3, #192	@ 0xc0
 8000fe2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	482b      	ldr	r0, [pc, #172]	@ (80010a0 <MX_GPIO_Init+0x26c>)
 8000ff4:	f002 fbae 	bl	8003754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000ff8:	2330      	movs	r3, #48	@ 0x30
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001004:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001008:	4619      	mov	r1, r3
 800100a:	4822      	ldr	r0, [pc, #136]	@ (8001094 <MX_GPIO_Init+0x260>)
 800100c:	f002 fba2 	bl	8003754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8001010:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001014:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001016:	2301      	movs	r3, #1
 8001018:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001022:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001026:	4619      	mov	r1, r3
 8001028:	481c      	ldr	r0, [pc, #112]	@ (800109c <MX_GPIO_Init+0x268>)
 800102a:	f002 fb93 	bl	8003754 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 800102e:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001034:	2300      	movs	r3, #0
 8001036:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001038:	2301      	movs	r3, #1
 800103a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001040:	4619      	mov	r1, r3
 8001042:	4814      	ldr	r0, [pc, #80]	@ (8001094 <MX_GPIO_Init+0x260>)
 8001044:	f002 fb86 	bl	8003754 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8001048:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800104c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104e:	2301      	movs	r3, #1
 8001050:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 800105a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800105e:	4619      	mov	r1, r3
 8001060:	480f      	ldr	r0, [pc, #60]	@ (80010a0 <MX_GPIO_Init+0x26c>)
 8001062:	f002 fb77 	bl	8003754 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8001066:	2308      	movs	r3, #8
 8001068:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106a:	2301      	movs	r3, #1
 800106c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8001076:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800107a:	4619      	mov	r1, r3
 800107c:	4809      	ldr	r0, [pc, #36]	@ (80010a4 <MX_GPIO_Init+0x270>)
 800107e:	f002 fb69 	bl	8003754 <HAL_GPIO_Init>

}
 8001082:	bf00      	nop
 8001084:	3738      	adds	r7, #56	@ 0x38
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800
 8001090:	40021000 	.word	0x40021000
 8001094:	40020800 	.word	0x40020800
 8001098:	40021400 	.word	0x40021400
 800109c:	40021800 	.word	0x40021800
 80010a0:	40020000 	.word	0x40020000
 80010a4:	40020c00 	.word	0x40020c00

080010a8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010ac:	4b12      	ldr	r3, [pc, #72]	@ (80010f8 <MX_I2C1_Init+0x50>)
 80010ae:	4a13      	ldr	r2, [pc, #76]	@ (80010fc <MX_I2C1_Init+0x54>)
 80010b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010b2:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <MX_I2C1_Init+0x50>)
 80010b4:	4a12      	ldr	r2, [pc, #72]	@ (8001100 <MX_I2C1_Init+0x58>)
 80010b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010b8:	4b0f      	ldr	r3, [pc, #60]	@ (80010f8 <MX_I2C1_Init+0x50>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010be:	4b0e      	ldr	r3, [pc, #56]	@ (80010f8 <MX_I2C1_Init+0x50>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	@ (80010f8 <MX_I2C1_Init+0x50>)
 80010c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010cc:	4b0a      	ldr	r3, [pc, #40]	@ (80010f8 <MX_I2C1_Init+0x50>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010d2:	4b09      	ldr	r3, [pc, #36]	@ (80010f8 <MX_I2C1_Init+0x50>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010d8:	4b07      	ldr	r3, [pc, #28]	@ (80010f8 <MX_I2C1_Init+0x50>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010de:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <MX_I2C1_Init+0x50>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010e4:	4804      	ldr	r0, [pc, #16]	@ (80010f8 <MX_I2C1_Init+0x50>)
 80010e6:	f002 fd05 	bl	8003af4 <HAL_I2C_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010f0:	f000 fc82 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	200001a0 	.word	0x200001a0
 80010fc:	40005400 	.word	0x40005400
 8001100:	000186a0 	.word	0x000186a0

08001104 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	@ 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a19      	ldr	r2, [pc, #100]	@ (8001188 <HAL_I2C_MspInit+0x84>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d12b      	bne.n	800117e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	4b18      	ldr	r3, [pc, #96]	@ (800118c <HAL_I2C_MspInit+0x88>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	4a17      	ldr	r2, [pc, #92]	@ (800118c <HAL_I2C_MspInit+0x88>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	6313      	str	r3, [r2, #48]	@ 0x30
 8001136:	4b15      	ldr	r3, [pc, #84]	@ (800118c <HAL_I2C_MspInit+0x88>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001142:	23c0      	movs	r3, #192	@ 0xc0
 8001144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001146:	2312      	movs	r3, #18
 8001148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114e:	2303      	movs	r3, #3
 8001150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001152:	2304      	movs	r3, #4
 8001154:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	480c      	ldr	r0, [pc, #48]	@ (8001190 <HAL_I2C_MspInit+0x8c>)
 800115e:	f002 faf9 	bl	8003754 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b09      	ldr	r3, [pc, #36]	@ (800118c <HAL_I2C_MspInit+0x88>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116a:	4a08      	ldr	r2, [pc, #32]	@ (800118c <HAL_I2C_MspInit+0x88>)
 800116c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001170:	6413      	str	r3, [r2, #64]	@ 0x40
 8001172:	4b06      	ldr	r3, [pc, #24]	@ (800118c <HAL_I2C_MspInit+0x88>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001176:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800117e:	bf00      	nop
 8001180:	3728      	adds	r7, #40	@ 0x28
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40005400 	.word	0x40005400
 800118c:	40023800 	.word	0x40023800
 8001190:	40020400 	.word	0x40020400

08001194 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 800119e:	4a04      	ldr	r2, [pc, #16]	@ (80011b0 <LCD_WR_REG+0x1c>)
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	8013      	strh	r3, [r2, #0]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	600ffffe 	.word	0x600ffffe

080011b4 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80011be:	4a04      	ldr	r2, [pc, #16]	@ (80011d0 <LCD_WR_DATA+0x1c>)
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	8053      	strh	r3, [r2, #2]
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	600ffffe 	.word	0x600ffffe

080011d4 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 80011da:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <LCD_RD_DATA+0x20>)
 80011dc:	885b      	ldrh	r3, [r3, #2]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	80fb      	strh	r3, [r7, #6]
	return ram;
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	b29b      	uxth	r3, r3
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	600ffffe 	.word	0x600ffffe

080011f8 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4604      	mov	r4, r0
 8001200:	4608      	mov	r0, r1
 8001202:	4611      	mov	r1, r2
 8001204:	461a      	mov	r2, r3
 8001206:	4623      	mov	r3, r4
 8001208:	80fb      	strh	r3, [r7, #6]
 800120a:	4603      	mov	r3, r0
 800120c:	80bb      	strh	r3, [r7, #4]
 800120e:	460b      	mov	r3, r1
 8001210:	807b      	strh	r3, [r7, #2]
 8001212:	4613      	mov	r3, r2
 8001214:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8001216:	202a      	movs	r0, #42	@ 0x2a
 8001218:	f7ff ffbc 	bl	8001194 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	0a1b      	lsrs	r3, r3, #8
 8001220:	b29b      	uxth	r3, r3
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ffc6 	bl	80011b4 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	b2db      	uxtb	r3, r3
 800122c:	b29b      	uxth	r3, r3
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff ffc0 	bl	80011b4 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001234:	887b      	ldrh	r3, [r7, #2]
 8001236:	0a1b      	lsrs	r3, r3, #8
 8001238:	b29b      	uxth	r3, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ffba 	bl	80011b4 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001240:	887b      	ldrh	r3, [r7, #2]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	b29b      	uxth	r3, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ffb4 	bl	80011b4 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 800124c:	202b      	movs	r0, #43	@ 0x2b
 800124e:	f7ff ffa1 	bl	8001194 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001252:	88bb      	ldrh	r3, [r7, #4]
 8001254:	0a1b      	lsrs	r3, r3, #8
 8001256:	b29b      	uxth	r3, r3
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ffab 	bl	80011b4 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 800125e:	88bb      	ldrh	r3, [r7, #4]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	b29b      	uxth	r3, r3
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ffa5 	bl	80011b4 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800126a:	883b      	ldrh	r3, [r7, #0]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	b29b      	uxth	r3, r3
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff9f 	bl	80011b4 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8001276:	883b      	ldrh	r3, [r7, #0]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	b29b      	uxth	r3, r3
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff99 	bl	80011b4 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001282:	202c      	movs	r0, #44	@ 0x2c
 8001284:	f7ff ff86 	bl	8001194 <LCD_WR_REG>
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	bd90      	pop	{r4, r7, pc}

08001290 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 800129a:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <lcd_Clear+0x60>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	3b01      	subs	r3, #1
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	4b13      	ldr	r3, [pc, #76]	@ (80012f0 <lcd_Clear+0x60>)
 80012a4:	885b      	ldrh	r3, [r3, #2]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	2100      	movs	r1, #0
 80012ac:	2000      	movs	r0, #0
 80012ae:	f7ff ffa3 	bl	80011f8 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80012b2:	2300      	movs	r3, #0
 80012b4:	81fb      	strh	r3, [r7, #14]
 80012b6:	e011      	b.n	80012dc <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 80012b8:	2300      	movs	r3, #0
 80012ba:	81bb      	strh	r3, [r7, #12]
 80012bc:	e006      	b.n	80012cc <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 80012be:	88fb      	ldrh	r3, [r7, #6]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff77 	bl	80011b4 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80012c6:	89bb      	ldrh	r3, [r7, #12]
 80012c8:	3301      	adds	r3, #1
 80012ca:	81bb      	strh	r3, [r7, #12]
 80012cc:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <lcd_Clear+0x60>)
 80012ce:	885b      	ldrh	r3, [r3, #2]
 80012d0:	89ba      	ldrh	r2, [r7, #12]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d3f3      	bcc.n	80012be <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 80012d6:	89fb      	ldrh	r3, [r7, #14]
 80012d8:	3301      	adds	r3, #1
 80012da:	81fb      	strh	r3, [r7, #14]
 80012dc:	4b04      	ldr	r3, [pc, #16]	@ (80012f0 <lcd_Clear+0x60>)
 80012de:	881b      	ldrh	r3, [r3, #0]
 80012e0:	89fa      	ldrh	r2, [r7, #14]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d3e8      	bcc.n	80012b8 <lcd_Clear+0x28>
		}
	}
}
 80012e6:	bf00      	nop
 80012e8:	bf00      	nop
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	200001f4 	.word	0x200001f4

080012f4 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	091b      	lsrs	r3, r3, #4
 8001302:	b2db      	uxtb	r3, r3
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d007      	beq.n	800131e <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 800130e:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <lcd_SetDir+0x44>)
 8001310:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001314:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001316:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <lcd_SetDir+0x44>)
 8001318:	22f0      	movs	r2, #240	@ 0xf0
 800131a:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 800131c:	e006      	b.n	800132c <lcd_SetDir+0x38>
		lcddev.width=240;
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <lcd_SetDir+0x44>)
 8001320:	22f0      	movs	r2, #240	@ 0xf0
 8001322:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001324:	4b04      	ldr	r3, [pc, #16]	@ (8001338 <lcd_SetDir+0x44>)
 8001326:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800132a:	805a      	strh	r2, [r3, #2]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	200001f4 	.word	0x200001f4

0800133c <lcd_init>:


void lcd_init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001340:	2200      	movs	r2, #0
 8001342:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001346:	48aa      	ldr	r0, [pc, #680]	@ (80015f0 <lcd_init+0x2b4>)
 8001348:	f002 fba0 	bl	8003a8c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800134c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001350:	f001 f8b6 	bl	80024c0 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001354:	2201      	movs	r2, #1
 8001356:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800135a:	48a5      	ldr	r0, [pc, #660]	@ (80015f0 <lcd_init+0x2b4>)
 800135c:	f002 fb96 	bl	8003a8c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001360:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001364:	f001 f8ac 	bl	80024c0 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001368:	2000      	movs	r0, #0
 800136a:	f7ff ffc3 	bl	80012f4 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 800136e:	20d3      	movs	r0, #211	@ 0xd3
 8001370:	f7ff ff10 	bl	8001194 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001374:	f7ff ff2e 	bl	80011d4 <LCD_RD_DATA>
 8001378:	4603      	mov	r3, r0
 800137a:	461a      	mov	r2, r3
 800137c:	4b9d      	ldr	r3, [pc, #628]	@ (80015f4 <lcd_init+0x2b8>)
 800137e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001380:	f7ff ff28 	bl	80011d4 <LCD_RD_DATA>
 8001384:	4603      	mov	r3, r0
 8001386:	461a      	mov	r2, r3
 8001388:	4b9a      	ldr	r3, [pc, #616]	@ (80015f4 <lcd_init+0x2b8>)
 800138a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 800138c:	f7ff ff22 	bl	80011d4 <LCD_RD_DATA>
 8001390:	4603      	mov	r3, r0
 8001392:	461a      	mov	r2, r3
 8001394:	4b97      	ldr	r3, [pc, #604]	@ (80015f4 <lcd_init+0x2b8>)
 8001396:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001398:	4b96      	ldr	r3, [pc, #600]	@ (80015f4 <lcd_init+0x2b8>)
 800139a:	889b      	ldrh	r3, [r3, #4]
 800139c:	021b      	lsls	r3, r3, #8
 800139e:	b29a      	uxth	r2, r3
 80013a0:	4b94      	ldr	r3, [pc, #592]	@ (80015f4 <lcd_init+0x2b8>)
 80013a2:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80013a4:	f7ff ff16 	bl	80011d4 <LCD_RD_DATA>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b91      	ldr	r3, [pc, #580]	@ (80015f4 <lcd_init+0x2b8>)
 80013ae:	889b      	ldrh	r3, [r3, #4]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	4b8f      	ldr	r3, [pc, #572]	@ (80015f4 <lcd_init+0x2b8>)
 80013b6:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 80013b8:	20cf      	movs	r0, #207	@ 0xcf
 80013ba:	f7ff feeb 	bl	8001194 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80013be:	2000      	movs	r0, #0
 80013c0:	f7ff fef8 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 80013c4:	20c1      	movs	r0, #193	@ 0xc1
 80013c6:	f7ff fef5 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 80013ca:	2030      	movs	r0, #48	@ 0x30
 80013cc:	f7ff fef2 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 80013d0:	20ed      	movs	r0, #237	@ 0xed
 80013d2:	f7ff fedf 	bl	8001194 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 80013d6:	2064      	movs	r0, #100	@ 0x64
 80013d8:	f7ff feec 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80013dc:	2003      	movs	r0, #3
 80013de:	f7ff fee9 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 80013e2:	2012      	movs	r0, #18
 80013e4:	f7ff fee6 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 80013e8:	2081      	movs	r0, #129	@ 0x81
 80013ea:	f7ff fee3 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 80013ee:	20e8      	movs	r0, #232	@ 0xe8
 80013f0:	f7ff fed0 	bl	8001194 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 80013f4:	2085      	movs	r0, #133	@ 0x85
 80013f6:	f7ff fedd 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80013fa:	2010      	movs	r0, #16
 80013fc:	f7ff feda 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001400:	207a      	movs	r0, #122	@ 0x7a
 8001402:	f7ff fed7 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001406:	20cb      	movs	r0, #203	@ 0xcb
 8001408:	f7ff fec4 	bl	8001194 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 800140c:	2039      	movs	r0, #57	@ 0x39
 800140e:	f7ff fed1 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001412:	202c      	movs	r0, #44	@ 0x2c
 8001414:	f7ff fece 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001418:	2000      	movs	r0, #0
 800141a:	f7ff fecb 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800141e:	2034      	movs	r0, #52	@ 0x34
 8001420:	f7ff fec8 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001424:	2002      	movs	r0, #2
 8001426:	f7ff fec5 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 800142a:	20f7      	movs	r0, #247	@ 0xf7
 800142c:	f7ff feb2 	bl	8001194 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001430:	2020      	movs	r0, #32
 8001432:	f7ff febf 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001436:	20ea      	movs	r0, #234	@ 0xea
 8001438:	f7ff feac 	bl	8001194 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800143c:	2000      	movs	r0, #0
 800143e:	f7ff feb9 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001442:	2000      	movs	r0, #0
 8001444:	f7ff feb6 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001448:	20c0      	movs	r0, #192	@ 0xc0
 800144a:	f7ff fea3 	bl	8001194 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800144e:	201b      	movs	r0, #27
 8001450:	f7ff feb0 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001454:	20c1      	movs	r0, #193	@ 0xc1
 8001456:	f7ff fe9d 	bl	8001194 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800145a:	2001      	movs	r0, #1
 800145c:	f7ff feaa 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001460:	20c5      	movs	r0, #197	@ 0xc5
 8001462:	f7ff fe97 	bl	8001194 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001466:	2030      	movs	r0, #48	@ 0x30
 8001468:	f7ff fea4 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 800146c:	2030      	movs	r0, #48	@ 0x30
 800146e:	f7ff fea1 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001472:	20c7      	movs	r0, #199	@ 0xc7
 8001474:	f7ff fe8e 	bl	8001194 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001478:	20b7      	movs	r0, #183	@ 0xb7
 800147a:	f7ff fe9b 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 800147e:	2036      	movs	r0, #54	@ 0x36
 8001480:	f7ff fe88 	bl	8001194 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001484:	2008      	movs	r0, #8
 8001486:	f7ff fe95 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 800148a:	203a      	movs	r0, #58	@ 0x3a
 800148c:	f7ff fe82 	bl	8001194 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001490:	2055      	movs	r0, #85	@ 0x55
 8001492:	f7ff fe8f 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001496:	20b1      	movs	r0, #177	@ 0xb1
 8001498:	f7ff fe7c 	bl	8001194 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800149c:	2000      	movs	r0, #0
 800149e:	f7ff fe89 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80014a2:	201a      	movs	r0, #26
 80014a4:	f7ff fe86 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80014a8:	20b6      	movs	r0, #182	@ 0xb6
 80014aa:	f7ff fe73 	bl	8001194 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80014ae:	200a      	movs	r0, #10
 80014b0:	f7ff fe80 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80014b4:	20a2      	movs	r0, #162	@ 0xa2
 80014b6:	f7ff fe7d 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80014ba:	20f2      	movs	r0, #242	@ 0xf2
 80014bc:	f7ff fe6a 	bl	8001194 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80014c0:	2000      	movs	r0, #0
 80014c2:	f7ff fe77 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80014c6:	2026      	movs	r0, #38	@ 0x26
 80014c8:	f7ff fe64 	bl	8001194 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80014cc:	2001      	movs	r0, #1
 80014ce:	f7ff fe71 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80014d2:	20e0      	movs	r0, #224	@ 0xe0
 80014d4:	f7ff fe5e 	bl	8001194 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80014d8:	200f      	movs	r0, #15
 80014da:	f7ff fe6b 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80014de:	202a      	movs	r0, #42	@ 0x2a
 80014e0:	f7ff fe68 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80014e4:	2028      	movs	r0, #40	@ 0x28
 80014e6:	f7ff fe65 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80014ea:	2008      	movs	r0, #8
 80014ec:	f7ff fe62 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 80014f0:	200e      	movs	r0, #14
 80014f2:	f7ff fe5f 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 80014f6:	2008      	movs	r0, #8
 80014f8:	f7ff fe5c 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80014fc:	2054      	movs	r0, #84	@ 0x54
 80014fe:	f7ff fe59 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001502:	20a9      	movs	r0, #169	@ 0xa9
 8001504:	f7ff fe56 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001508:	2043      	movs	r0, #67	@ 0x43
 800150a:	f7ff fe53 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800150e:	200a      	movs	r0, #10
 8001510:	f7ff fe50 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001514:	200f      	movs	r0, #15
 8001516:	f7ff fe4d 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800151a:	2000      	movs	r0, #0
 800151c:	f7ff fe4a 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001520:	2000      	movs	r0, #0
 8001522:	f7ff fe47 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001526:	2000      	movs	r0, #0
 8001528:	f7ff fe44 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800152c:	2000      	movs	r0, #0
 800152e:	f7ff fe41 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001532:	20e1      	movs	r0, #225	@ 0xe1
 8001534:	f7ff fe2e 	bl	8001194 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001538:	2000      	movs	r0, #0
 800153a:	f7ff fe3b 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800153e:	2015      	movs	r0, #21
 8001540:	f7ff fe38 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001544:	2017      	movs	r0, #23
 8001546:	f7ff fe35 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 800154a:	2007      	movs	r0, #7
 800154c:	f7ff fe32 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001550:	2011      	movs	r0, #17
 8001552:	f7ff fe2f 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001556:	2006      	movs	r0, #6
 8001558:	f7ff fe2c 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 800155c:	202b      	movs	r0, #43	@ 0x2b
 800155e:	f7ff fe29 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001562:	2056      	movs	r0, #86	@ 0x56
 8001564:	f7ff fe26 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001568:	203c      	movs	r0, #60	@ 0x3c
 800156a:	f7ff fe23 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800156e:	2005      	movs	r0, #5
 8001570:	f7ff fe20 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001574:	2010      	movs	r0, #16
 8001576:	f7ff fe1d 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800157a:	200f      	movs	r0, #15
 800157c:	f7ff fe1a 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001580:	203f      	movs	r0, #63	@ 0x3f
 8001582:	f7ff fe17 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001586:	203f      	movs	r0, #63	@ 0x3f
 8001588:	f7ff fe14 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800158c:	200f      	movs	r0, #15
 800158e:	f7ff fe11 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001592:	202b      	movs	r0, #43	@ 0x2b
 8001594:	f7ff fdfe 	bl	8001194 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001598:	2000      	movs	r0, #0
 800159a:	f7ff fe0b 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800159e:	2000      	movs	r0, #0
 80015a0:	f7ff fe08 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80015a4:	2001      	movs	r0, #1
 80015a6:	f7ff fe05 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80015aa:	203f      	movs	r0, #63	@ 0x3f
 80015ac:	f7ff fe02 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80015b0:	202a      	movs	r0, #42	@ 0x2a
 80015b2:	f7ff fdef 	bl	8001194 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80015b6:	2000      	movs	r0, #0
 80015b8:	f7ff fdfc 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80015bc:	2000      	movs	r0, #0
 80015be:	f7ff fdf9 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80015c2:	2000      	movs	r0, #0
 80015c4:	f7ff fdf6 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80015c8:	20ef      	movs	r0, #239	@ 0xef
 80015ca:	f7ff fdf3 	bl	80011b4 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80015ce:	2011      	movs	r0, #17
 80015d0:	f7ff fde0 	bl	8001194 <LCD_WR_REG>
	HAL_Delay(120);
 80015d4:	2078      	movs	r0, #120	@ 0x78
 80015d6:	f000 ff73 	bl	80024c0 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 80015da:	2029      	movs	r0, #41	@ 0x29
 80015dc:	f7ff fdda 	bl	8001194 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80015e0:	2201      	movs	r2, #1
 80015e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015e6:	4804      	ldr	r0, [pc, #16]	@ (80015f8 <lcd_init+0x2bc>)
 80015e8:	f002 fa50 	bl	8003a8c <HAL_GPIO_WritePin>
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40020800 	.word	0x40020800
 80015f4:	200001f4 	.word	0x200001f4
 80015f8:	40020000 	.word	0x40020000

080015fc <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001600:	4b3f      	ldr	r3, [pc, #252]	@ (8001700 <led7_Scan+0x104>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	b29a      	uxth	r2, r3
 8001608:	4b3d      	ldr	r3, [pc, #244]	@ (8001700 <led7_Scan+0x104>)
 800160a:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 800160c:	4b3d      	ldr	r3, [pc, #244]	@ (8001704 <led7_Scan+0x108>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a3d      	ldr	r2, [pc, #244]	@ (8001708 <led7_Scan+0x10c>)
 8001612:	5cd3      	ldrb	r3, [r2, r3]
 8001614:	021b      	lsls	r3, r3, #8
 8001616:	b21a      	sxth	r2, r3
 8001618:	4b39      	ldr	r3, [pc, #228]	@ (8001700 <led7_Scan+0x104>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	b21b      	sxth	r3, r3
 800161e:	4313      	orrs	r3, r2
 8001620:	b21b      	sxth	r3, r3
 8001622:	b29a      	uxth	r2, r3
 8001624:	4b36      	ldr	r3, [pc, #216]	@ (8001700 <led7_Scan+0x104>)
 8001626:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001628:	4b36      	ldr	r3, [pc, #216]	@ (8001704 <led7_Scan+0x108>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b03      	cmp	r3, #3
 800162e:	d847      	bhi.n	80016c0 <led7_Scan+0xc4>
 8001630:	a201      	add	r2, pc, #4	@ (adr r2, 8001638 <led7_Scan+0x3c>)
 8001632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001636:	bf00      	nop
 8001638:	08001649 	.word	0x08001649
 800163c:	08001667 	.word	0x08001667
 8001640:	08001685 	.word	0x08001685
 8001644:	080016a3 	.word	0x080016a3
	case 0:
		spi_buffer |= 0x00b0;
 8001648:	4b2d      	ldr	r3, [pc, #180]	@ (8001700 <led7_Scan+0x104>)
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8001650:	b29a      	uxth	r2, r3
 8001652:	4b2b      	ldr	r3, [pc, #172]	@ (8001700 <led7_Scan+0x104>)
 8001654:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8001656:	4b2a      	ldr	r3, [pc, #168]	@ (8001700 <led7_Scan+0x104>)
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800165e:	b29a      	uxth	r2, r3
 8001660:	4b27      	ldr	r3, [pc, #156]	@ (8001700 <led7_Scan+0x104>)
 8001662:	801a      	strh	r2, [r3, #0]
		break;
 8001664:	e02d      	b.n	80016c2 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001666:	4b26      	ldr	r3, [pc, #152]	@ (8001700 <led7_Scan+0x104>)
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 800166e:	b29a      	uxth	r2, r3
 8001670:	4b23      	ldr	r3, [pc, #140]	@ (8001700 <led7_Scan+0x104>)
 8001672:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8001674:	4b22      	ldr	r3, [pc, #136]	@ (8001700 <led7_Scan+0x104>)
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	f023 0320 	bic.w	r3, r3, #32
 800167c:	b29a      	uxth	r2, r3
 800167e:	4b20      	ldr	r3, [pc, #128]	@ (8001700 <led7_Scan+0x104>)
 8001680:	801a      	strh	r2, [r3, #0]
		break;
 8001682:	e01e      	b.n	80016c2 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001684:	4b1e      	ldr	r3, [pc, #120]	@ (8001700 <led7_Scan+0x104>)
 8001686:	881b      	ldrh	r3, [r3, #0]
 8001688:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 800168c:	b29a      	uxth	r2, r3
 800168e:	4b1c      	ldr	r3, [pc, #112]	@ (8001700 <led7_Scan+0x104>)
 8001690:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8001692:	4b1b      	ldr	r3, [pc, #108]	@ (8001700 <led7_Scan+0x104>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	f023 0310 	bic.w	r3, r3, #16
 800169a:	b29a      	uxth	r2, r3
 800169c:	4b18      	ldr	r3, [pc, #96]	@ (8001700 <led7_Scan+0x104>)
 800169e:	801a      	strh	r2, [r3, #0]
		break;
 80016a0:	e00f      	b.n	80016c2 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80016a2:	4b17      	ldr	r3, [pc, #92]	@ (8001700 <led7_Scan+0x104>)
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	4b14      	ldr	r3, [pc, #80]	@ (8001700 <led7_Scan+0x104>)
 80016ae:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 80016b0:	4b13      	ldr	r3, [pc, #76]	@ (8001700 <led7_Scan+0x104>)
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <led7_Scan+0x104>)
 80016bc:	801a      	strh	r2, [r3, #0]
		break;
 80016be:	e000      	b.n	80016c2 <led7_Scan+0xc6>
	default:
		break;
 80016c0:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80016c2:	4b10      	ldr	r3, [pc, #64]	@ (8001704 <led7_Scan+0x108>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	3301      	adds	r3, #1
 80016c8:	425a      	negs	r2, r3
 80016ca:	f003 0303 	and.w	r3, r3, #3
 80016ce:	f002 0203 	and.w	r2, r2, #3
 80016d2:	bf58      	it	pl
 80016d4:	4253      	negpl	r3, r2
 80016d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001704 <led7_Scan+0x108>)
 80016d8:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	2140      	movs	r1, #64	@ 0x40
 80016de:	480b      	ldr	r0, [pc, #44]	@ (800170c <led7_Scan+0x110>)
 80016e0:	f002 f9d4 	bl	8003a8c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80016e4:	2301      	movs	r3, #1
 80016e6:	2202      	movs	r2, #2
 80016e8:	4905      	ldr	r1, [pc, #20]	@ (8001700 <led7_Scan+0x104>)
 80016ea:	4809      	ldr	r0, [pc, #36]	@ (8001710 <led7_Scan+0x114>)
 80016ec:	f003 f867 	bl	80047be <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80016f0:	2201      	movs	r2, #1
 80016f2:	2140      	movs	r1, #64	@ 0x40
 80016f4:	4805      	ldr	r0, [pc, #20]	@ (800170c <led7_Scan+0x110>)
 80016f6:	f002 f9c9 	bl	8003a8c <HAL_GPIO_WritePin>
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000004 	.word	0x20000004
 8001704:	200001fc 	.word	0x200001fc
 8001708:	20000000 	.word	0x20000000
 800170c:	40021800 	.word	0x40021800
 8001710:	20000214 	.word	0x20000214

08001714 <lightProcess>:
 */
#include "light_control.h"

uint8_t light_status = 0;

void lightProcess(){
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
	if(button_count[13] == 1){
 8001718:	4b14      	ldr	r3, [pc, #80]	@ (800176c <lightProcess+0x58>)
 800171a:	8b5b      	ldrh	r3, [r3, #26]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d113      	bne.n	8001748 <lightProcess+0x34>
		light_status = 1 - light_status;
 8001720:	4b13      	ldr	r3, [pc, #76]	@ (8001770 <lightProcess+0x5c>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	f1c3 0301 	rsb	r3, r3, #1
 8001728:	b2da      	uxtb	r2, r3
 800172a:	4b11      	ldr	r3, [pc, #68]	@ (8001770 <lightProcess+0x5c>)
 800172c:	701a      	strb	r2, [r3, #0]
		if(light_status == 1){
 800172e:	4b10      	ldr	r3, [pc, #64]	@ (8001770 <lightProcess+0x5c>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d104      	bne.n	8001740 <lightProcess+0x2c>
			uart_EspSendBytes("A", 1);
 8001736:	2101      	movs	r1, #1
 8001738:	480e      	ldr	r0, [pc, #56]	@ (8001774 <lightProcess+0x60>)
 800173a:	f000 fccf 	bl	80020dc <uart_EspSendBytes>
 800173e:	e003      	b.n	8001748 <lightProcess+0x34>
		} else {
			uart_EspSendBytes("a", 1);
 8001740:	2101      	movs	r1, #1
 8001742:	480d      	ldr	r0, [pc, #52]	@ (8001778 <lightProcess+0x64>)
 8001744:	f000 fcca 	bl	80020dc <uart_EspSendBytes>
		}
	}
	if(light_status == 1){
 8001748:	4b09      	ldr	r3, [pc, #36]	@ (8001770 <lightProcess+0x5c>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d105      	bne.n	800175c <lightProcess+0x48>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 1);
 8001750:	2201      	movs	r2, #1
 8001752:	2120      	movs	r1, #32
 8001754:	4809      	ldr	r0, [pc, #36]	@ (800177c <lightProcess+0x68>)
 8001756:	f002 f999 	bl	8003a8c <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
	}
}
 800175a:	e004      	b.n	8001766 <lightProcess+0x52>
		HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 800175c:	2200      	movs	r2, #0
 800175e:	2120      	movs	r1, #32
 8001760:	4806      	ldr	r0, [pc, #24]	@ (800177c <lightProcess+0x68>)
 8001762:	f002 f993 	bl	8003a8c <HAL_GPIO_WritePin>
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000128 	.word	0x20000128
 8001770:	20000200 	.word	0x20000200
 8001774:	08007e44 	.word	0x08007e44
 8001778:	08007e48 	.word	0x08007e48
 800177c:	40021000 	.word	0x40021000

08001780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001784:	f000 fe2a 	bl	80023dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001788:	f000 f82e 	bl	80017e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800178c:	f7ff fb52 	bl	8000e34 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001790:	f000 fb4e 	bl	8001e30 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001794:	f000 f9b6 	bl	8001b04 <MX_SPI1_Init>
  MX_FSMC_Init();
 8001798:	f7ff fa7c 	bl	8000c94 <MX_FSMC_Init>
  MX_I2C1_Init();
 800179c:	f7ff fc84 	bl	80010a8 <MX_I2C1_Init>
  MX_TIM13_Init();
 80017a0:	f000 fb92 	bl	8001ec8 <MX_TIM13_Init>
  MX_DMA_Init();
 80017a4:	f7ff fa56 	bl	8000c54 <MX_DMA_Init>
  MX_ADC1_Init();
 80017a8:	f7ff f8be 	bl	8000928 <MX_ADC1_Init>
  MX_TIM1_Init();
 80017ac:	f000 faf0 	bl	8001d90 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80017b0:	f000 fd34 	bl	800221c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80017b4:	f000 fd08 	bl	80021c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80017b8:	f000 f880 	bl	80018bc <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 lcd_Clear(BLACK);
 80017bc:	2000      	movs	r0, #0
 80017be:	f7ff fd67 	bl	8001290 <lcd_Clear>
 while (1)
  {
	  // 50ms task
	  if(flag_timer2 == 1){
 80017c2:	4b08      	ldr	r3, [pc, #32]	@ (80017e4 <main+0x64>)
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d1fb      	bne.n	80017c2 <main+0x42>
		  flag_timer2 = 0;
 80017ca:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <main+0x64>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	801a      	strh	r2, [r3, #0]
		  button_Scan();
 80017d0:	f7ff f9d4 	bl	8000b7c <button_Scan>
		  //test_Esp();
		  lightProcess();
 80017d4:	f7ff ff9e 	bl	8001714 <lightProcess>
		  test_LedDebug();
 80017d8:	f000 f882 	bl	80018e0 <test_LedDebug>
		  SendTemp();
 80017dc:	f000 f8a4 	bl	8001928 <SendTemp>
	  if(flag_timer2 == 1){
 80017e0:	e7ef      	b.n	80017c2 <main+0x42>
 80017e2:	bf00      	nop
 80017e4:	2000020e 	.word	0x2000020e

080017e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b094      	sub	sp, #80	@ 0x50
 80017ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ee:	f107 0320 	add.w	r3, r7, #32
 80017f2:	2230      	movs	r2, #48	@ 0x30
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f005 fe5e 	bl	80074b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017fc:	f107 030c 	add.w	r3, r7, #12
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800180c:	2300      	movs	r3, #0
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	4b28      	ldr	r3, [pc, #160]	@ (80018b4 <SystemClock_Config+0xcc>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001814:	4a27      	ldr	r2, [pc, #156]	@ (80018b4 <SystemClock_Config+0xcc>)
 8001816:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800181a:	6413      	str	r3, [r2, #64]	@ 0x40
 800181c:	4b25      	ldr	r3, [pc, #148]	@ (80018b4 <SystemClock_Config+0xcc>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001820:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001828:	2300      	movs	r3, #0
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	4b22      	ldr	r3, [pc, #136]	@ (80018b8 <SystemClock_Config+0xd0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a21      	ldr	r2, [pc, #132]	@ (80018b8 <SystemClock_Config+0xd0>)
 8001832:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	4b1f      	ldr	r3, [pc, #124]	@ (80018b8 <SystemClock_Config+0xd0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001844:	2302      	movs	r3, #2
 8001846:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001848:	2301      	movs	r3, #1
 800184a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800184c:	2310      	movs	r3, #16
 800184e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001850:	2302      	movs	r3, #2
 8001852:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001854:	2300      	movs	r3, #0
 8001856:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001858:	2308      	movs	r3, #8
 800185a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800185c:	23a8      	movs	r3, #168	@ 0xa8
 800185e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001860:	2302      	movs	r3, #2
 8001862:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001864:	2304      	movs	r3, #4
 8001866:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001868:	f107 0320 	add.w	r3, r7, #32
 800186c:	4618      	mov	r0, r3
 800186e:	f002 fa85 	bl	8003d7c <HAL_RCC_OscConfig>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001878:	f000 f8be 	bl	80019f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800187c:	230f      	movs	r3, #15
 800187e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001880:	2302      	movs	r3, #2
 8001882:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001888:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800188c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800188e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001892:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001894:	f107 030c 	add.w	r3, r7, #12
 8001898:	2105      	movs	r1, #5
 800189a:	4618      	mov	r0, r3
 800189c:	f002 fce6 	bl	800426c <HAL_RCC_ClockConfig>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80018a6:	f000 f8a7 	bl	80019f8 <Error_Handler>
  }
}
 80018aa:	bf00      	nop
 80018ac:	3750      	adds	r7, #80	@ 0x50
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40007000 	.word	0x40007000

080018bc <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
	  timer_init();
 80018c0:	f000 f8cc 	bl	8001a5c <timer_init>
	  button_init();
 80018c4:	f7ff f94e 	bl	8000b64 <button_init>
	  lcd_init();
 80018c8:	f7ff fd38 	bl	800133c <lcd_init>
	  uart_init_esp();
 80018cc:	f000 fbf0 	bl	80020b0 <uart_init_esp>
	  sensor_init();
 80018d0:	f000 f898 	bl	8001a04 <sensor_init>
	  setTimer2(15000);
 80018d4:	f643 2098 	movw	r0, #15000	@ 0x3a98
 80018d8:	f000 f8ce 	bl	8001a78 <setTimer2>
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}

080018e0 <test_LedDebug>:

uint8_t count_led_debug = 0;

void test_LedDebug(){
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	count_led_debug = (count_led_debug + 1)%20;
 80018e4:	4b0d      	ldr	r3, [pc, #52]	@ (800191c <test_LedDebug+0x3c>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001920 <test_LedDebug+0x40>)
 80018ec:	fb83 1302 	smull	r1, r3, r3, r2
 80018f0:	10d9      	asrs	r1, r3, #3
 80018f2:	17d3      	asrs	r3, r2, #31
 80018f4:	1ac9      	subs	r1, r1, r3
 80018f6:	460b      	mov	r3, r1
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	440b      	add	r3, r1
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	1ad1      	subs	r1, r2, r3
 8001900:	b2ca      	uxtb	r2, r1
 8001902:	4b06      	ldr	r3, [pc, #24]	@ (800191c <test_LedDebug+0x3c>)
 8001904:	701a      	strb	r2, [r3, #0]
	if(count_led_debug == 0){
 8001906:	4b05      	ldr	r3, [pc, #20]	@ (800191c <test_LedDebug+0x3c>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d103      	bne.n	8001916 <test_LedDebug+0x36>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 800190e:	2110      	movs	r1, #16
 8001910:	4804      	ldr	r0, [pc, #16]	@ (8001924 <test_LedDebug+0x44>)
 8001912:	f002 f8d4 	bl	8003abe <HAL_GPIO_TogglePin>
	}
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000201 	.word	0x20000201
 8001920:	66666667 	.word	0x66666667
 8001924:	40021000 	.word	0x40021000

08001928 <SendTemp>:
void SendTemp(){
 8001928:	b580      	push	{r7, lr}
 800192a:	b0a2      	sub	sp, #136	@ 0x88
 800192c:	af02      	add	r7, sp, #8
	float adc_read = sensor_GetTemperature();
 800192e:	f000 f877 	bl	8001a20 <sensor_GetTemperature>
 8001932:	ed87 0a1f 	vstr	s0, [r7, #124]	@ 0x7c
	char str[100];
	//float adc_read = 678.0123;

	char *tmpSign = (adc_read < 0) ? "-" : "";
 8001936:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 800193a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800193e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001942:	d501      	bpl.n	8001948 <SendTemp+0x20>
 8001944:	4b28      	ldr	r3, [pc, #160]	@ (80019e8 <SendTemp+0xc0>)
 8001946:	e000      	b.n	800194a <SendTemp+0x22>
 8001948:	4b28      	ldr	r3, [pc, #160]	@ (80019ec <SendTemp+0xc4>)
 800194a:	67bb      	str	r3, [r7, #120]	@ 0x78
	float tmpVal = (adc_read < 0) ? -adc_read : adc_read;
 800194c:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8001950:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001958:	d504      	bpl.n	8001964 <SendTemp+0x3c>
 800195a:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 800195e:	eef1 7a67 	vneg.f32	s15, s15
 8001962:	e001      	b.n	8001968 <SendTemp+0x40>
 8001964:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8001968:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

	int tmpInt1 = tmpVal;                  // Get the integer (678).
 800196c:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001970:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001974:	ee17 3a90 	vmov	r3, s15
 8001978:	673b      	str	r3, [r7, #112]	@ 0x70
	float tmpFrac = tmpVal - tmpInt1;      // Get fraction (0.0123).
 800197a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800197c:	ee07 3a90 	vmov	s15, r3
 8001980:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001984:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001988:	ee77 7a67 	vsub.f32	s15, s14, s15
 800198c:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
	int tmpInt2 = trunc(tmpFrac * 10000);  // Turn into integer (123).
 8001990:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001994:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80019f0 <SendTemp+0xc8>
 8001998:	ee67 7a87 	vmul.f32	s15, s15, s14
 800199c:	ee17 0a90 	vmov	r0, s15
 80019a0:	f7fe fdca 	bl	8000538 <__aeabi_f2d>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	ec43 2b10 	vmov	d0, r2, r3
 80019ac:	f006 fa04 	bl	8007db8 <trunc>
 80019b0:	ec53 2b10 	vmov	r2, r3, d0
 80019b4:	4610      	mov	r0, r2
 80019b6:	4619      	mov	r1, r3
 80019b8:	f7fe fe16 	bl	80005e8 <__aeabi_d2iz>
 80019bc:	4603      	mov	r3, r0
 80019be:	66bb      	str	r3, [r7, #104]	@ 0x68

	// Print as parts, note that you need 0-padding for fractional bit.

	sprintf (str, "%s%d.%04d\n", tmpSign, tmpInt1, tmpInt2);
 80019c0:	1d38      	adds	r0, r7, #4
 80019c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80019c8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80019ca:	490a      	ldr	r1, [pc, #40]	@ (80019f4 <SendTemp+0xcc>)
 80019cc:	f005 fd54 	bl	8007478 <siprintf>
//	uart_EspSendString((uint8_t*)&a);
//	int i =0;
//	for (i = 0; i < sizeof(float); i++){
//		HAL_UART_Transmit(&huart1, b+i, 8, 10);
//	}
	uart_Rs232SendString(str);
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 fb52 	bl	800207c <uart_Rs232SendString>
	uart_EspSendString(str);
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 fb90 	bl	8002100 <uart_EspSendString>
}
 80019e0:	bf00      	nop
 80019e2:	3780      	adds	r7, #128	@ 0x80
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	08007e5c 	.word	0x08007e5c
 80019ec:	08007e60 	.word	0x08007e60
 80019f0:	461c4000 	.word	0x461c4000
 80019f4:	08007e64 	.word	0x08007e64

080019f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019fc:	b672      	cpsid	i
}
 80019fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a00:	bf00      	nop
 8001a02:	e7fd      	b.n	8001a00 <Error_Handler+0x8>

08001a04 <sensor_init>:
 */
#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 8001a08:	2205      	movs	r2, #5
 8001a0a:	4903      	ldr	r1, [pc, #12]	@ (8001a18 <sensor_init+0x14>)
 8001a0c:	4803      	ldr	r0, [pc, #12]	@ (8001a1c <sensor_init+0x18>)
 8001a0e:	f000 fdbf 	bl	8002590 <HAL_ADC_Start_DMA>
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000204 	.word	0x20000204
 8001a1c:	20000080 	.word	0x20000080

08001a20 <sensor_GetTemperature>:

float sensor_GetCurrent(){
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
}

float sensor_GetTemperature(){
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 8001a24:	4b0a      	ldr	r3, [pc, #40]	@ (8001a50 <sensor_GetTemperature+0x30>)
 8001a26:	891b      	ldrh	r3, [r3, #8]
 8001a28:	ee07 3a90 	vmov	s15, r3
 8001a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a30:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001a54 <sensor_GetTemperature+0x34>
 8001a34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a38:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001a58 <sensor_GetTemperature+0x38>
 8001a3c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a40:	eef0 7a66 	vmov.f32	s15, s13
}
 8001a44:	eeb0 0a67 	vmov.f32	s0, s15
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	20000204 	.word	0x20000204
 8001a54:	43a50000 	.word	0x43a50000
 8001a58:	457ff000 	.word	0x457ff000

08001a5c <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001a60:	4803      	ldr	r0, [pc, #12]	@ (8001a70 <timer_init+0x14>)
 8001a62:	f003 fcc7 	bl	80053f4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8001a66:	4803      	ldr	r0, [pc, #12]	@ (8001a74 <timer_init+0x18>)
 8001a68:	f003 fc5c 	bl	8005324 <HAL_TIM_Base_Start>
}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	200002b8 	.word	0x200002b8
 8001a74:	20000270 	.word	0x20000270

08001a78 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8001a82:	4a08      	ldr	r2, [pc, #32]	@ (8001aa4 <setTimer2+0x2c>)
 8001a84:	88fb      	ldrh	r3, [r7, #6]
 8001a86:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8001a88:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <setTimer2+0x2c>)
 8001a8a:	881a      	ldrh	r2, [r3, #0]
 8001a8c:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <setTimer2+0x30>)
 8001a8e:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8001a90:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <setTimer2+0x34>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	801a      	strh	r2, [r3, #0]
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	20000212 	.word	0x20000212
 8001aa8:	20000210 	.word	0x20000210
 8001aac:	2000020e 	.word	0x2000020e

08001ab0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ac0:	d116      	bne.n	8001af0 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d010      	beq.n	8001aec <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8001aca:	4b0b      	ldr	r3, [pc, #44]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	4b09      	ldr	r3, [pc, #36]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001ad4:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8001ad6:	4b08      	ldr	r3, [pc, #32]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d106      	bne.n	8001aec <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8001ade:	4b07      	ldr	r3, [pc, #28]	@ (8001afc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8001ae4:	4b06      	ldr	r3, [pc, #24]	@ (8001b00 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001ae6:	881a      	ldrh	r2, [r3, #0]
 8001ae8:	4b03      	ldr	r3, [pc, #12]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001aea:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8001aec:	f7ff fd86 	bl	80015fc <led7_Scan>
	}
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000210 	.word	0x20000210
 8001afc:	2000020e 	.word	0x2000020e
 8001b00:	20000212 	.word	0x20000212

08001b04 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001b08:	4b17      	ldr	r3, [pc, #92]	@ (8001b68 <MX_SPI1_Init+0x64>)
 8001b0a:	4a18      	ldr	r2, [pc, #96]	@ (8001b6c <MX_SPI1_Init+0x68>)
 8001b0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b0e:	4b16      	ldr	r3, [pc, #88]	@ (8001b68 <MX_SPI1_Init+0x64>)
 8001b10:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b16:	4b14      	ldr	r3, [pc, #80]	@ (8001b68 <MX_SPI1_Init+0x64>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b1c:	4b12      	ldr	r3, [pc, #72]	@ (8001b68 <MX_SPI1_Init+0x64>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b22:	4b11      	ldr	r3, [pc, #68]	@ (8001b68 <MX_SPI1_Init+0x64>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b28:	4b0f      	ldr	r3, [pc, #60]	@ (8001b68 <MX_SPI1_Init+0x64>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b68 <MX_SPI1_Init+0x64>)
 8001b30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b36:	4b0c      	ldr	r3, [pc, #48]	@ (8001b68 <MX_SPI1_Init+0x64>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b68 <MX_SPI1_Init+0x64>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b42:	4b09      	ldr	r3, [pc, #36]	@ (8001b68 <MX_SPI1_Init+0x64>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b48:	4b07      	ldr	r3, [pc, #28]	@ (8001b68 <MX_SPI1_Init+0x64>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b4e:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <MX_SPI1_Init+0x64>)
 8001b50:	220a      	movs	r2, #10
 8001b52:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b54:	4804      	ldr	r0, [pc, #16]	@ (8001b68 <MX_SPI1_Init+0x64>)
 8001b56:	f002 fda9 	bl	80046ac <HAL_SPI_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b60:	f7ff ff4a 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000214 	.word	0x20000214
 8001b6c:	40013000 	.word	0x40013000

08001b70 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	@ 0x28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a19      	ldr	r2, [pc, #100]	@ (8001bf4 <HAL_SPI_MspInit+0x84>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d12b      	bne.n	8001bea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	4b18      	ldr	r3, [pc, #96]	@ (8001bf8 <HAL_SPI_MspInit+0x88>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9a:	4a17      	ldr	r2, [pc, #92]	@ (8001bf8 <HAL_SPI_MspInit+0x88>)
 8001b9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ba0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ba2:	4b15      	ldr	r3, [pc, #84]	@ (8001bf8 <HAL_SPI_MspInit+0x88>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	4b11      	ldr	r3, [pc, #68]	@ (8001bf8 <HAL_SPI_MspInit+0x88>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	4a10      	ldr	r2, [pc, #64]	@ (8001bf8 <HAL_SPI_MspInit+0x88>)
 8001bb8:	f043 0302 	orr.w	r3, r3, #2
 8001bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf8 <HAL_SPI_MspInit+0x88>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001bca:	2338      	movs	r3, #56	@ 0x38
 8001bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bda:	2305      	movs	r3, #5
 8001bdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	4619      	mov	r1, r3
 8001be4:	4805      	ldr	r0, [pc, #20]	@ (8001bfc <HAL_SPI_MspInit+0x8c>)
 8001be6:	f001 fdb5 	bl	8003754 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001bea:	bf00      	nop
 8001bec:	3728      	adds	r7, #40	@ 0x28
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40013000 	.word	0x40013000
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40020400 	.word	0x40020400

08001c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	607b      	str	r3, [r7, #4]
 8001c0a:	4b10      	ldr	r3, [pc, #64]	@ (8001c4c <HAL_MspInit+0x4c>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0e:	4a0f      	ldr	r2, [pc, #60]	@ (8001c4c <HAL_MspInit+0x4c>)
 8001c10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c16:	4b0d      	ldr	r3, [pc, #52]	@ (8001c4c <HAL_MspInit+0x4c>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c1e:	607b      	str	r3, [r7, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	603b      	str	r3, [r7, #0]
 8001c26:	4b09      	ldr	r3, [pc, #36]	@ (8001c4c <HAL_MspInit+0x4c>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	4a08      	ldr	r2, [pc, #32]	@ (8001c4c <HAL_MspInit+0x4c>)
 8001c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c32:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <HAL_MspInit+0x4c>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c3a:	603b      	str	r3, [r7, #0]
 8001c3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	40023800 	.word	0x40023800

08001c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c54:	bf00      	nop
 8001c56:	e7fd      	b.n	8001c54 <NMI_Handler+0x4>

08001c58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c5c:	bf00      	nop
 8001c5e:	e7fd      	b.n	8001c5c <HardFault_Handler+0x4>

08001c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c64:	bf00      	nop
 8001c66:	e7fd      	b.n	8001c64 <MemManage_Handler+0x4>

08001c68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c6c:	bf00      	nop
 8001c6e:	e7fd      	b.n	8001c6c <BusFault_Handler+0x4>

08001c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c74:	bf00      	nop
 8001c76:	e7fd      	b.n	8001c74 <UsageFault_Handler+0x4>

08001c78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ca6:	f000 fbeb 	bl	8002480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cb4:	4802      	ldr	r0, [pc, #8]	@ (8001cc0 <TIM2_IRQHandler+0x10>)
 8001cb6:	f003 fc66 	bl	8005586 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200002b8 	.word	0x200002b8

08001cc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cc8:	4802      	ldr	r0, [pc, #8]	@ (8001cd4 <USART1_IRQHandler+0x10>)
 8001cca:	f004 fba1 	bl	8006410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	200003b0 	.word	0x200003b0

08001cd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cdc:	4802      	ldr	r0, [pc, #8]	@ (8001ce8 <USART2_IRQHandler+0x10>)
 8001cde:	f004 fb97 	bl	8006410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200003f4 	.word	0x200003f4

08001cec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cf0:	4802      	ldr	r0, [pc, #8]	@ (8001cfc <DMA2_Stream0_IRQHandler+0x10>)
 8001cf2:	f001 fac5 	bl	8003280 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	200000c8 	.word	0x200000c8

08001d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d08:	4a14      	ldr	r2, [pc, #80]	@ (8001d5c <_sbrk+0x5c>)
 8001d0a:	4b15      	ldr	r3, [pc, #84]	@ (8001d60 <_sbrk+0x60>)
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d14:	4b13      	ldr	r3, [pc, #76]	@ (8001d64 <_sbrk+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d102      	bne.n	8001d22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d1c:	4b11      	ldr	r3, [pc, #68]	@ (8001d64 <_sbrk+0x64>)
 8001d1e:	4a12      	ldr	r2, [pc, #72]	@ (8001d68 <_sbrk+0x68>)
 8001d20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d22:	4b10      	ldr	r3, [pc, #64]	@ (8001d64 <_sbrk+0x64>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d207      	bcs.n	8001d40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d30:	f005 fbca 	bl	80074c8 <__errno>
 8001d34:	4603      	mov	r3, r0
 8001d36:	220c      	movs	r2, #12
 8001d38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3e:	e009      	b.n	8001d54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d40:	4b08      	ldr	r3, [pc, #32]	@ (8001d64 <_sbrk+0x64>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d46:	4b07      	ldr	r3, [pc, #28]	@ (8001d64 <_sbrk+0x64>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	4a05      	ldr	r2, [pc, #20]	@ (8001d64 <_sbrk+0x64>)
 8001d50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d52:	68fb      	ldr	r3, [r7, #12]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20020000 	.word	0x20020000
 8001d60:	00000400 	.word	0x00000400
 8001d64:	2000026c 	.word	0x2000026c
 8001d68:	20000588 	.word	0x20000588

08001d6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d70:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <SystemInit+0x20>)
 8001d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d76:	4a05      	ldr	r2, [pc, #20]	@ (8001d8c <SystemInit+0x20>)
 8001d78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d96:	f107 0308 	add.w	r3, r7, #8
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001da4:	463b      	mov	r3, r7
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dac:	4b1e      	ldr	r3, [pc, #120]	@ (8001e28 <MX_TIM1_Init+0x98>)
 8001dae:	4a1f      	ldr	r2, [pc, #124]	@ (8001e2c <MX_TIM1_Init+0x9c>)
 8001db0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001db2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e28 <MX_TIM1_Init+0x98>)
 8001db4:	2253      	movs	r2, #83	@ 0x53
 8001db6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e28 <MX_TIM1_Init+0x98>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8001e28 <MX_TIM1_Init+0x98>)
 8001dc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dc4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc6:	4b18      	ldr	r3, [pc, #96]	@ (8001e28 <MX_TIM1_Init+0x98>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001dcc:	4b16      	ldr	r3, [pc, #88]	@ (8001e28 <MX_TIM1_Init+0x98>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd2:	4b15      	ldr	r3, [pc, #84]	@ (8001e28 <MX_TIM1_Init+0x98>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001dd8:	4813      	ldr	r0, [pc, #76]	@ (8001e28 <MX_TIM1_Init+0x98>)
 8001dda:	f003 fa53 	bl	8005284 <HAL_TIM_Base_Init>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001de4:	f7ff fe08 	bl	80019f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001de8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dee:	f107 0308 	add.w	r3, r7, #8
 8001df2:	4619      	mov	r1, r3
 8001df4:	480c      	ldr	r0, [pc, #48]	@ (8001e28 <MX_TIM1_Init+0x98>)
 8001df6:	f003 fd91 	bl	800591c <HAL_TIM_ConfigClockSource>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001e00:	f7ff fdfa 	bl	80019f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e04:	2300      	movs	r3, #0
 8001e06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e0c:	463b      	mov	r3, r7
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4805      	ldr	r0, [pc, #20]	@ (8001e28 <MX_TIM1_Init+0x98>)
 8001e12:	f004 f95d 	bl	80060d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e1c:	f7ff fdec 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e20:	bf00      	nop
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000270 	.word	0x20000270
 8001e2c:	40010000 	.word	0x40010000

08001e30 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e36:	f107 0308 	add.w	r3, r7, #8
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	605a      	str	r2, [r3, #4]
 8001e40:	609a      	str	r2, [r3, #8]
 8001e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e44:	463b      	mov	r3, r7
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec4 <MX_TIM2_Init+0x94>)
 8001e4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001e54:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec4 <MX_TIM2_Init+0x94>)
 8001e56:	f240 3247 	movw	r2, #839	@ 0x347
 8001e5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e5c:	4b19      	ldr	r3, [pc, #100]	@ (8001ec4 <MX_TIM2_Init+0x94>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001e62:	4b18      	ldr	r3, [pc, #96]	@ (8001ec4 <MX_TIM2_Init+0x94>)
 8001e64:	2263      	movs	r2, #99	@ 0x63
 8001e66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e68:	4b16      	ldr	r3, [pc, #88]	@ (8001ec4 <MX_TIM2_Init+0x94>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e6e:	4b15      	ldr	r3, [pc, #84]	@ (8001ec4 <MX_TIM2_Init+0x94>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e74:	4813      	ldr	r0, [pc, #76]	@ (8001ec4 <MX_TIM2_Init+0x94>)
 8001e76:	f003 fa05 	bl	8005284 <HAL_TIM_Base_Init>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001e80:	f7ff fdba 	bl	80019f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e8a:	f107 0308 	add.w	r3, r7, #8
 8001e8e:	4619      	mov	r1, r3
 8001e90:	480c      	ldr	r0, [pc, #48]	@ (8001ec4 <MX_TIM2_Init+0x94>)
 8001e92:	f003 fd43 	bl	800591c <HAL_TIM_ConfigClockSource>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001e9c:	f7ff fdac 	bl	80019f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ea8:	463b      	mov	r3, r7
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4805      	ldr	r0, [pc, #20]	@ (8001ec4 <MX_TIM2_Init+0x94>)
 8001eae:	f004 f90f 	bl	80060d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001eb8:	f7ff fd9e 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ebc:	bf00      	nop
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	200002b8 	.word	0x200002b8

08001ec8 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
 8001edc:	615a      	str	r2, [r3, #20]
 8001ede:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f5c <MX_TIM13_Init+0x94>)
 8001ee2:	4a1f      	ldr	r2, [pc, #124]	@ (8001f60 <MX_TIM13_Init+0x98>)
 8001ee4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840-1;
 8001ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f5c <MX_TIM13_Init+0x94>)
 8001ee8:	f240 3247 	movw	r2, #839	@ 0x347
 8001eec:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eee:	4b1b      	ldr	r3, [pc, #108]	@ (8001f5c <MX_TIM13_Init+0x94>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8001ef4:	4b19      	ldr	r3, [pc, #100]	@ (8001f5c <MX_TIM13_Init+0x94>)
 8001ef6:	2263      	movs	r2, #99	@ 0x63
 8001ef8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001efa:	4b18      	ldr	r3, [pc, #96]	@ (8001f5c <MX_TIM13_Init+0x94>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f00:	4b16      	ldr	r3, [pc, #88]	@ (8001f5c <MX_TIM13_Init+0x94>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001f06:	4815      	ldr	r0, [pc, #84]	@ (8001f5c <MX_TIM13_Init+0x94>)
 8001f08:	f003 f9bc 	bl	8005284 <HAL_TIM_Base_Init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001f12:	f7ff fd71 	bl	80019f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001f16:	4811      	ldr	r0, [pc, #68]	@ (8001f5c <MX_TIM13_Init+0x94>)
 8001f18:	f003 fadc 	bl	80054d4 <HAL_TIM_PWM_Init>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001f22:	f7ff fd69 	bl	80019f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f26:	2360      	movs	r3, #96	@ 0x60
 8001f28:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f36:	1d3b      	adds	r3, r7, #4
 8001f38:	2200      	movs	r2, #0
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4807      	ldr	r0, [pc, #28]	@ (8001f5c <MX_TIM13_Init+0x94>)
 8001f3e:	f003 fc2b 	bl	8005798 <HAL_TIM_PWM_ConfigChannel>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001f48:	f7ff fd56 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001f4c:	4803      	ldr	r0, [pc, #12]	@ (8001f5c <MX_TIM13_Init+0x94>)
 8001f4e:	f000 f85b 	bl	8002008 <HAL_TIM_MspPostInit>

}
 8001f52:	bf00      	nop
 8001f54:	3720      	adds	r7, #32
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000300 	.word	0x20000300
 8001f60:	40001c00 	.word	0x40001c00

08001f64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a22      	ldr	r2, [pc, #136]	@ (8001ffc <HAL_TIM_Base_MspInit+0x98>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d10e      	bne.n	8001f94 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	4b21      	ldr	r3, [pc, #132]	@ (8002000 <HAL_TIM_Base_MspInit+0x9c>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7e:	4a20      	ldr	r2, [pc, #128]	@ (8002000 <HAL_TIM_Base_MspInit+0x9c>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f86:	4b1e      	ldr	r3, [pc, #120]	@ (8002000 <HAL_TIM_Base_MspInit+0x9c>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8001f92:	e02e      	b.n	8001ff2 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f9c:	d116      	bne.n	8001fcc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	4b17      	ldr	r3, [pc, #92]	@ (8002000 <HAL_TIM_Base_MspInit+0x9c>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa6:	4a16      	ldr	r2, [pc, #88]	@ (8002000 <HAL_TIM_Base_MspInit+0x9c>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fae:	4b14      	ldr	r3, [pc, #80]	@ (8002000 <HAL_TIM_Base_MspInit+0x9c>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	201c      	movs	r0, #28
 8001fc0:	f000 ff8f 	bl	8002ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fc4:	201c      	movs	r0, #28
 8001fc6:	f000 ffa8 	bl	8002f1a <HAL_NVIC_EnableIRQ>
}
 8001fca:	e012      	b.n	8001ff2 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0c      	ldr	r2, [pc, #48]	@ (8002004 <HAL_TIM_Base_MspInit+0xa0>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d10d      	bne.n	8001ff2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <HAL_TIM_Base_MspInit+0x9c>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	4a08      	ldr	r2, [pc, #32]	@ (8002000 <HAL_TIM_Base_MspInit+0x9c>)
 8001fe0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fe6:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <HAL_TIM_Base_MspInit+0x9c>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
}
 8001ff2:	bf00      	nop
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40010000 	.word	0x40010000
 8002000:	40023800 	.word	0x40023800
 8002004:	40001c00 	.word	0x40001c00

08002008 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b088      	sub	sp, #32
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	f107 030c 	add.w	r3, r7, #12
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a12      	ldr	r2, [pc, #72]	@ (8002070 <HAL_TIM_MspPostInit+0x68>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d11e      	bne.n	8002068 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	4b11      	ldr	r3, [pc, #68]	@ (8002074 <HAL_TIM_MspPostInit+0x6c>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002032:	4a10      	ldr	r2, [pc, #64]	@ (8002074 <HAL_TIM_MspPostInit+0x6c>)
 8002034:	f043 0320 	orr.w	r3, r3, #32
 8002038:	6313      	str	r3, [r2, #48]	@ 0x30
 800203a:	4b0e      	ldr	r3, [pc, #56]	@ (8002074 <HAL_TIM_MspPostInit+0x6c>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203e:	f003 0320 	and.w	r3, r3, #32
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002046:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800204a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204c:	2302      	movs	r3, #2
 800204e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002054:	2300      	movs	r3, #0
 8002056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002058:	2309      	movs	r3, #9
 800205a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800205c:	f107 030c 	add.w	r3, r7, #12
 8002060:	4619      	mov	r1, r3
 8002062:	4805      	ldr	r0, [pc, #20]	@ (8002078 <HAL_TIM_MspPostInit+0x70>)
 8002064:	f001 fb76 	bl	8003754 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002068:	bf00      	nop
 800206a:	3720      	adds	r7, #32
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40001c00 	.word	0x40001c00
 8002074:	40023800 	.word	0x40023800
 8002078:	40021400 	.word	0x40021400

0800207c <uart_Rs232SendString>:

void uart_init_rs232(){
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
}

void uart_Rs232SendString(uint8_t* str){
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	4907      	ldr	r1, [pc, #28]	@ (80020a4 <uart_Rs232SendString+0x28>)
 8002088:	4807      	ldr	r0, [pc, #28]	@ (80020a8 <uart_Rs232SendString+0x2c>)
 800208a:	f005 f9f5 	bl	8007478 <siprintf>
 800208e:	4603      	mov	r3, r0
 8002090:	b29a      	uxth	r2, r3
 8002092:	230a      	movs	r3, #10
 8002094:	4904      	ldr	r1, [pc, #16]	@ (80020a8 <uart_Rs232SendString+0x2c>)
 8002096:	4805      	ldr	r0, [pc, #20]	@ (80020ac <uart_Rs232SendString+0x30>)
 8002098:	f004 f8f7 	bl	800628a <HAL_UART_Transmit>
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	08007e70 	.word	0x08007e70
 80020a8:	20000348 	.word	0x20000348
 80020ac:	200003b0 	.word	0x200003b0

080020b0 <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 80020b4:	2201      	movs	r2, #1
 80020b6:	4906      	ldr	r1, [pc, #24]	@ (80020d0 <uart_init_esp+0x20>)
 80020b8:	4806      	ldr	r0, [pc, #24]	@ (80020d4 <uart_init_esp+0x24>)
 80020ba:	f004 f978 	bl	80063ae <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, 1);
 80020be:	2201      	movs	r2, #1
 80020c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020c4:	4804      	ldr	r0, [pc, #16]	@ (80020d8 <uart_init_esp+0x28>)
 80020c6:	f001 fce1 	bl	8003a8c <HAL_GPIO_WritePin>
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	200003ad 	.word	0x200003ad
 80020d4:	200003f4 	.word	0x200003f4
 80020d8:	40021400 	.word	0x40021400

080020dc <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 80020e8:	887a      	ldrh	r2, [r7, #2]
 80020ea:	230a      	movs	r3, #10
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	4803      	ldr	r0, [pc, #12]	@ (80020fc <uart_EspSendBytes+0x20>)
 80020f0:	f004 f8cb 	bl	800628a <HAL_UART_Transmit>
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	200003f4 	.word	0x200003f4

08002100 <uart_EspSendString>:
void uart_EspSendString(uint8_t* str){
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	4907      	ldr	r1, [pc, #28]	@ (8002128 <uart_EspSendString+0x28>)
 800210c:	4807      	ldr	r0, [pc, #28]	@ (800212c <uart_EspSendString+0x2c>)
 800210e:	f005 f9b3 	bl	8007478 <siprintf>
 8002112:	4603      	mov	r3, r0
 8002114:	b29a      	uxth	r2, r3
 8002116:	230a      	movs	r3, #10
 8002118:	4904      	ldr	r1, [pc, #16]	@ (800212c <uart_EspSendString+0x2c>)
 800211a:	4805      	ldr	r0, [pc, #20]	@ (8002130 <uart_EspSendString+0x30>)
 800211c:	f004 f8b5 	bl	800628a <HAL_UART_Transmit>
}
 8002120:	bf00      	nop
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	08007e70 	.word	0x08007e70
 800212c:	20000348 	.word	0x20000348
 8002130:	200003f4 	.word	0x200003f4

08002134 <HAL_UART_RxCpltCallback>:





void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a19      	ldr	r2, [pc, #100]	@ (80021a8 <HAL_UART_RxCpltCallback+0x74>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d10a      	bne.n	800215c <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8002146:	230a      	movs	r3, #10
 8002148:	2201      	movs	r2, #1
 800214a:	4918      	ldr	r1, [pc, #96]	@ (80021ac <HAL_UART_RxCpltCallback+0x78>)
 800214c:	4818      	ldr	r0, [pc, #96]	@ (80021b0 <HAL_UART_RxCpltCallback+0x7c>)
 800214e:	f004 f89c 	bl	800628a <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002152:	2201      	movs	r2, #1
 8002154:	4915      	ldr	r1, [pc, #84]	@ (80021ac <HAL_UART_RxCpltCallback+0x78>)
 8002156:	4816      	ldr	r0, [pc, #88]	@ (80021b0 <HAL_UART_RxCpltCallback+0x7c>)
 8002158:	f004 f929 	bl	80063ae <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a14      	ldr	r2, [pc, #80]	@ (80021b4 <HAL_UART_RxCpltCallback+0x80>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d11b      	bne.n	800219e <HAL_UART_RxCpltCallback+0x6a>
		if(receive_buffer2 == 'O') check_esp = 1;
 8002166:	4b14      	ldr	r3, [pc, #80]	@ (80021b8 <HAL_UART_RxCpltCallback+0x84>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b4f      	cmp	r3, #79	@ 0x4f
 800216c:	d103      	bne.n	8002176 <HAL_UART_RxCpltCallback+0x42>
 800216e:	4b13      	ldr	r3, [pc, #76]	@ (80021bc <HAL_UART_RxCpltCallback+0x88>)
 8002170:	2201      	movs	r2, #1
 8002172:	701a      	strb	r2, [r3, #0]
 8002174:	e00e      	b.n	8002194 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'a') light_status = 0;
 8002176:	4b10      	ldr	r3, [pc, #64]	@ (80021b8 <HAL_UART_RxCpltCallback+0x84>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b61      	cmp	r3, #97	@ 0x61
 800217c:	d103      	bne.n	8002186 <HAL_UART_RxCpltCallback+0x52>
 800217e:	4b10      	ldr	r3, [pc, #64]	@ (80021c0 <HAL_UART_RxCpltCallback+0x8c>)
 8002180:	2200      	movs	r2, #0
 8002182:	701a      	strb	r2, [r3, #0]
 8002184:	e006      	b.n	8002194 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'A') light_status = 1;
 8002186:	4b0c      	ldr	r3, [pc, #48]	@ (80021b8 <HAL_UART_RxCpltCallback+0x84>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b41      	cmp	r3, #65	@ 0x41
 800218c:	d102      	bne.n	8002194 <HAL_UART_RxCpltCallback+0x60>
 800218e:	4b0c      	ldr	r3, [pc, #48]	@ (80021c0 <HAL_UART_RxCpltCallback+0x8c>)
 8002190:	2201      	movs	r2, #1
 8002192:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8002194:	2201      	movs	r2, #1
 8002196:	4908      	ldr	r1, [pc, #32]	@ (80021b8 <HAL_UART_RxCpltCallback+0x84>)
 8002198:	480a      	ldr	r0, [pc, #40]	@ (80021c4 <HAL_UART_RxCpltCallback+0x90>)
 800219a:	f004 f908 	bl	80063ae <HAL_UART_Receive_IT>
	}
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40011000 	.word	0x40011000
 80021ac:	200003ac 	.word	0x200003ac
 80021b0:	200003b0 	.word	0x200003b0
 80021b4:	40004400 	.word	0x40004400
 80021b8:	200003ad 	.word	0x200003ad
 80021bc:	200003ae 	.word	0x200003ae
 80021c0:	20000200 	.word	0x20000200
 80021c4:	200003f4 	.word	0x200003f4

080021c8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021cc:	4b11      	ldr	r3, [pc, #68]	@ (8002214 <MX_USART1_UART_Init+0x4c>)
 80021ce:	4a12      	ldr	r2, [pc, #72]	@ (8002218 <MX_USART1_UART_Init+0x50>)
 80021d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021d2:	4b10      	ldr	r3, [pc, #64]	@ (8002214 <MX_USART1_UART_Init+0x4c>)
 80021d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021da:	4b0e      	ldr	r3, [pc, #56]	@ (8002214 <MX_USART1_UART_Init+0x4c>)
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002214 <MX_USART1_UART_Init+0x4c>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002214 <MX_USART1_UART_Init+0x4c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021ec:	4b09      	ldr	r3, [pc, #36]	@ (8002214 <MX_USART1_UART_Init+0x4c>)
 80021ee:	220c      	movs	r2, #12
 80021f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021f2:	4b08      	ldr	r3, [pc, #32]	@ (8002214 <MX_USART1_UART_Init+0x4c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f8:	4b06      	ldr	r3, [pc, #24]	@ (8002214 <MX_USART1_UART_Init+0x4c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021fe:	4805      	ldr	r0, [pc, #20]	@ (8002214 <MX_USART1_UART_Init+0x4c>)
 8002200:	f003 fff6 	bl	80061f0 <HAL_UART_Init>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800220a:	f7ff fbf5 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	200003b0 	.word	0x200003b0
 8002218:	40011000 	.word	0x40011000

0800221c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002220:	4b11      	ldr	r3, [pc, #68]	@ (8002268 <MX_USART2_UART_Init+0x4c>)
 8002222:	4a12      	ldr	r2, [pc, #72]	@ (800226c <MX_USART2_UART_Init+0x50>)
 8002224:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002226:	4b10      	ldr	r3, [pc, #64]	@ (8002268 <MX_USART2_UART_Init+0x4c>)
 8002228:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800222c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800222e:	4b0e      	ldr	r3, [pc, #56]	@ (8002268 <MX_USART2_UART_Init+0x4c>)
 8002230:	2200      	movs	r2, #0
 8002232:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002234:	4b0c      	ldr	r3, [pc, #48]	@ (8002268 <MX_USART2_UART_Init+0x4c>)
 8002236:	2200      	movs	r2, #0
 8002238:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800223a:	4b0b      	ldr	r3, [pc, #44]	@ (8002268 <MX_USART2_UART_Init+0x4c>)
 800223c:	2200      	movs	r2, #0
 800223e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002240:	4b09      	ldr	r3, [pc, #36]	@ (8002268 <MX_USART2_UART_Init+0x4c>)
 8002242:	220c      	movs	r2, #12
 8002244:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002246:	4b08      	ldr	r3, [pc, #32]	@ (8002268 <MX_USART2_UART_Init+0x4c>)
 8002248:	2200      	movs	r2, #0
 800224a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800224c:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <MX_USART2_UART_Init+0x4c>)
 800224e:	2200      	movs	r2, #0
 8002250:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002252:	4805      	ldr	r0, [pc, #20]	@ (8002268 <MX_USART2_UART_Init+0x4c>)
 8002254:	f003 ffcc 	bl	80061f0 <HAL_UART_Init>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800225e:	f7ff fbcb 	bl	80019f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	200003f4 	.word	0x200003f4
 800226c:	40004400 	.word	0x40004400

08002270 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08c      	sub	sp, #48	@ 0x30
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002278:	f107 031c 	add.w	r3, r7, #28
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	605a      	str	r2, [r3, #4]
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	60da      	str	r2, [r3, #12]
 8002286:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a3a      	ldr	r2, [pc, #232]	@ (8002378 <HAL_UART_MspInit+0x108>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d135      	bne.n	80022fe <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	61bb      	str	r3, [r7, #24]
 8002296:	4b39      	ldr	r3, [pc, #228]	@ (800237c <HAL_UART_MspInit+0x10c>)
 8002298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229a:	4a38      	ldr	r2, [pc, #224]	@ (800237c <HAL_UART_MspInit+0x10c>)
 800229c:	f043 0310 	orr.w	r3, r3, #16
 80022a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022a2:	4b36      	ldr	r3, [pc, #216]	@ (800237c <HAL_UART_MspInit+0x10c>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a6:	f003 0310 	and.w	r3, r3, #16
 80022aa:	61bb      	str	r3, [r7, #24]
 80022ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	4b32      	ldr	r3, [pc, #200]	@ (800237c <HAL_UART_MspInit+0x10c>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	4a31      	ldr	r2, [pc, #196]	@ (800237c <HAL_UART_MspInit+0x10c>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022be:	4b2f      	ldr	r3, [pc, #188]	@ (800237c <HAL_UART_MspInit+0x10c>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022ca:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80022ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d0:	2302      	movs	r3, #2
 80022d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d8:	2303      	movs	r3, #3
 80022da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022dc:	2307      	movs	r3, #7
 80022de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e0:	f107 031c 	add.w	r3, r7, #28
 80022e4:	4619      	mov	r1, r3
 80022e6:	4826      	ldr	r0, [pc, #152]	@ (8002380 <HAL_UART_MspInit+0x110>)
 80022e8:	f001 fa34 	bl	8003754 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022ec:	2200      	movs	r2, #0
 80022ee:	2100      	movs	r1, #0
 80022f0:	2025      	movs	r0, #37	@ 0x25
 80022f2:	f000 fdf6 	bl	8002ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022f6:	2025      	movs	r0, #37	@ 0x25
 80022f8:	f000 fe0f 	bl	8002f1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80022fc:	e038      	b.n	8002370 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a20      	ldr	r2, [pc, #128]	@ (8002384 <HAL_UART_MspInit+0x114>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d133      	bne.n	8002370 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002308:	2300      	movs	r3, #0
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	4b1b      	ldr	r3, [pc, #108]	@ (800237c <HAL_UART_MspInit+0x10c>)
 800230e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002310:	4a1a      	ldr	r2, [pc, #104]	@ (800237c <HAL_UART_MspInit+0x10c>)
 8002312:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002316:	6413      	str	r3, [r2, #64]	@ 0x40
 8002318:	4b18      	ldr	r3, [pc, #96]	@ (800237c <HAL_UART_MspInit+0x10c>)
 800231a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	4b14      	ldr	r3, [pc, #80]	@ (800237c <HAL_UART_MspInit+0x10c>)
 800232a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232c:	4a13      	ldr	r2, [pc, #76]	@ (800237c <HAL_UART_MspInit+0x10c>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	6313      	str	r3, [r2, #48]	@ 0x30
 8002334:	4b11      	ldr	r3, [pc, #68]	@ (800237c <HAL_UART_MspInit+0x10c>)
 8002336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002340:	230c      	movs	r3, #12
 8002342:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002344:	2302      	movs	r3, #2
 8002346:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234c:	2303      	movs	r3, #3
 800234e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002350:	2307      	movs	r3, #7
 8002352:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002354:	f107 031c 	add.w	r3, r7, #28
 8002358:	4619      	mov	r1, r3
 800235a:	4809      	ldr	r0, [pc, #36]	@ (8002380 <HAL_UART_MspInit+0x110>)
 800235c:	f001 f9fa 	bl	8003754 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002360:	2200      	movs	r2, #0
 8002362:	2100      	movs	r1, #0
 8002364:	2026      	movs	r0, #38	@ 0x26
 8002366:	f000 fdbc 	bl	8002ee2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800236a:	2026      	movs	r0, #38	@ 0x26
 800236c:	f000 fdd5 	bl	8002f1a <HAL_NVIC_EnableIRQ>
}
 8002370:	bf00      	nop
 8002372:	3730      	adds	r7, #48	@ 0x30
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40011000 	.word	0x40011000
 800237c:	40023800 	.word	0x40023800
 8002380:	40020000 	.word	0x40020000
 8002384:	40004400 	.word	0x40004400

08002388 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002388:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800238c:	480d      	ldr	r0, [pc, #52]	@ (80023c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800238e:	490e      	ldr	r1, [pc, #56]	@ (80023c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002390:	4a0e      	ldr	r2, [pc, #56]	@ (80023cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002394:	e002      	b.n	800239c <LoopCopyDataInit>

08002396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800239a:	3304      	adds	r3, #4

0800239c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800239c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800239e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023a0:	d3f9      	bcc.n	8002396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023a2:	4a0b      	ldr	r2, [pc, #44]	@ (80023d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023a4:	4c0b      	ldr	r4, [pc, #44]	@ (80023d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023a8:	e001      	b.n	80023ae <LoopFillZerobss>

080023aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023ac:	3204      	adds	r2, #4

080023ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023b0:	d3fb      	bcc.n	80023aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023b2:	f7ff fcdb 	bl	8001d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023b6:	f005 f88d 	bl	80074d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ba:	f7ff f9e1 	bl	8001780 <main>
  bx  lr    
 80023be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80023c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023c8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80023cc:	08007ee8 	.word	0x08007ee8
  ldr r2, =_sbss
 80023d0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80023d4:	20000584 	.word	0x20000584

080023d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023d8:	e7fe      	b.n	80023d8 <ADC_IRQHandler>
	...

080023dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023e0:	4b0e      	ldr	r3, [pc, #56]	@ (800241c <HAL_Init+0x40>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0d      	ldr	r2, [pc, #52]	@ (800241c <HAL_Init+0x40>)
 80023e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023ec:	4b0b      	ldr	r3, [pc, #44]	@ (800241c <HAL_Init+0x40>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a0a      	ldr	r2, [pc, #40]	@ (800241c <HAL_Init+0x40>)
 80023f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023f8:	4b08      	ldr	r3, [pc, #32]	@ (800241c <HAL_Init+0x40>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a07      	ldr	r2, [pc, #28]	@ (800241c <HAL_Init+0x40>)
 80023fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002402:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002404:	2003      	movs	r0, #3
 8002406:	f000 fd61 	bl	8002ecc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800240a:	200f      	movs	r0, #15
 800240c:	f000 f808 	bl	8002420 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002410:	f7ff fbf6 	bl	8001c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40023c00 	.word	0x40023c00

08002420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002428:	4b12      	ldr	r3, [pc, #72]	@ (8002474 <HAL_InitTick+0x54>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	4b12      	ldr	r3, [pc, #72]	@ (8002478 <HAL_InitTick+0x58>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	4619      	mov	r1, r3
 8002432:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002436:	fbb3 f3f1 	udiv	r3, r3, r1
 800243a:	fbb2 f3f3 	udiv	r3, r2, r3
 800243e:	4618      	mov	r0, r3
 8002440:	f000 fd79 	bl	8002f36 <HAL_SYSTICK_Config>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e00e      	b.n	800246c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b0f      	cmp	r3, #15
 8002452:	d80a      	bhi.n	800246a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002454:	2200      	movs	r2, #0
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	f04f 30ff 	mov.w	r0, #4294967295
 800245c:	f000 fd41 	bl	8002ee2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002460:	4a06      	ldr	r2, [pc, #24]	@ (800247c <HAL_InitTick+0x5c>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	e000      	b.n	800246c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20000008 	.word	0x20000008
 8002478:	20000010 	.word	0x20000010
 800247c:	2000000c 	.word	0x2000000c

08002480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002484:	4b06      	ldr	r3, [pc, #24]	@ (80024a0 <HAL_IncTick+0x20>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	461a      	mov	r2, r3
 800248a:	4b06      	ldr	r3, [pc, #24]	@ (80024a4 <HAL_IncTick+0x24>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4413      	add	r3, r2
 8002490:	4a04      	ldr	r2, [pc, #16]	@ (80024a4 <HAL_IncTick+0x24>)
 8002492:	6013      	str	r3, [r2, #0]
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	20000010 	.word	0x20000010
 80024a4:	20000438 	.word	0x20000438

080024a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return uwTick;
 80024ac:	4b03      	ldr	r3, [pc, #12]	@ (80024bc <HAL_GetTick+0x14>)
 80024ae:	681b      	ldr	r3, [r3, #0]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	20000438 	.word	0x20000438

080024c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024c8:	f7ff ffee 	bl	80024a8 <HAL_GetTick>
 80024cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d8:	d005      	beq.n	80024e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024da:	4b0a      	ldr	r3, [pc, #40]	@ (8002504 <HAL_Delay+0x44>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4413      	add	r3, r2
 80024e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024e6:	bf00      	nop
 80024e8:	f7ff ffde 	bl	80024a8 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d8f7      	bhi.n	80024e8 <HAL_Delay+0x28>
  {
  }
}
 80024f8:	bf00      	nop
 80024fa:	bf00      	nop
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000010 	.word	0x20000010

08002508 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e033      	b.n	8002586 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002522:	2b00      	cmp	r3, #0
 8002524:	d109      	bne.n	800253a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7fe fa88 	bl	8000a3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253e:	f003 0310 	and.w	r3, r3, #16
 8002542:	2b00      	cmp	r3, #0
 8002544:	d118      	bne.n	8002578 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800254e:	f023 0302 	bic.w	r3, r3, #2
 8002552:	f043 0202 	orr.w	r2, r3, #2
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 fa68 	bl	8002a30 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256a:	f023 0303 	bic.w	r3, r3, #3
 800256e:	f043 0201 	orr.w	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	641a      	str	r2, [r3, #64]	@ 0x40
 8002576:	e001      	b.n	800257c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002584:	7bfb      	ldrb	r3, [r7, #15]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_ADC_Start_DMA+0x1e>
 80025aa:	2302      	movs	r3, #2
 80025ac:	e0e9      	b.n	8002782 <HAL_ADC_Start_DMA+0x1f2>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d018      	beq.n	80025f6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0201 	orr.w	r2, r2, #1
 80025d2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025d4:	4b6d      	ldr	r3, [pc, #436]	@ (800278c <HAL_ADC_Start_DMA+0x1fc>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a6d      	ldr	r2, [pc, #436]	@ (8002790 <HAL_ADC_Start_DMA+0x200>)
 80025da:	fba2 2303 	umull	r2, r3, r2, r3
 80025de:	0c9a      	lsrs	r2, r3, #18
 80025e0:	4613      	mov	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80025e8:	e002      	b.n	80025f0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	3b01      	subs	r3, #1
 80025ee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f9      	bne.n	80025ea <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002600:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002604:	d107      	bne.n	8002616 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002614:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b01      	cmp	r3, #1
 8002622:	f040 80a1 	bne.w	8002768 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800262e:	f023 0301 	bic.w	r3, r3, #1
 8002632:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002644:	2b00      	cmp	r3, #0
 8002646:	d007      	beq.n	8002658 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002650:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002660:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002664:	d106      	bne.n	8002674 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800266a:	f023 0206 	bic.w	r2, r3, #6
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	645a      	str	r2, [r3, #68]	@ 0x44
 8002672:	e002      	b.n	800267a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002682:	4b44      	ldr	r3, [pc, #272]	@ (8002794 <HAL_ADC_Start_DMA+0x204>)
 8002684:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800268a:	4a43      	ldr	r2, [pc, #268]	@ (8002798 <HAL_ADC_Start_DMA+0x208>)
 800268c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002692:	4a42      	ldr	r2, [pc, #264]	@ (800279c <HAL_ADC_Start_DMA+0x20c>)
 8002694:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800269a:	4a41      	ldr	r2, [pc, #260]	@ (80027a0 <HAL_ADC_Start_DMA+0x210>)
 800269c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80026a6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80026b6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026c6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	334c      	adds	r3, #76	@ 0x4c
 80026d2:	4619      	mov	r1, r3
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f000 fce8 	bl	80030ac <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 031f 	and.w	r3, r3, #31
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d12a      	bne.n	800273e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a2d      	ldr	r2, [pc, #180]	@ (80027a4 <HAL_ADC_Start_DMA+0x214>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d015      	beq.n	800271e <HAL_ADC_Start_DMA+0x18e>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a2c      	ldr	r2, [pc, #176]	@ (80027a8 <HAL_ADC_Start_DMA+0x218>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d105      	bne.n	8002708 <HAL_ADC_Start_DMA+0x178>
 80026fc:	4b25      	ldr	r3, [pc, #148]	@ (8002794 <HAL_ADC_Start_DMA+0x204>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 031f 	and.w	r3, r3, #31
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00a      	beq.n	800271e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a27      	ldr	r2, [pc, #156]	@ (80027ac <HAL_ADC_Start_DMA+0x21c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d136      	bne.n	8002780 <HAL_ADC_Start_DMA+0x1f0>
 8002712:	4b20      	ldr	r3, [pc, #128]	@ (8002794 <HAL_ADC_Start_DMA+0x204>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 0310 	and.w	r3, r3, #16
 800271a:	2b00      	cmp	r3, #0
 800271c:	d130      	bne.n	8002780 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d129      	bne.n	8002780 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	e020      	b.n	8002780 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a18      	ldr	r2, [pc, #96]	@ (80027a4 <HAL_ADC_Start_DMA+0x214>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d11b      	bne.n	8002780 <HAL_ADC_Start_DMA+0x1f0>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d114      	bne.n	8002780 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002764:	609a      	str	r2, [r3, #8]
 8002766:	e00b      	b.n	8002780 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276c:	f043 0210 	orr.w	r2, r3, #16
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002778:	f043 0201 	orr.w	r2, r3, #1
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000008 	.word	0x20000008
 8002790:	431bde83 	.word	0x431bde83
 8002794:	40012300 	.word	0x40012300
 8002798:	08002c29 	.word	0x08002c29
 800279c:	08002ce3 	.word	0x08002ce3
 80027a0:	08002cff 	.word	0x08002cff
 80027a4:	40012000 	.word	0x40012000
 80027a8:	40012100 	.word	0x40012100
 80027ac:	40012200 	.word	0x40012200

080027b0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_ADC_ConfigChannel+0x1c>
 8002804:	2302      	movs	r3, #2
 8002806:	e105      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x228>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b09      	cmp	r3, #9
 8002816:	d925      	bls.n	8002864 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68d9      	ldr	r1, [r3, #12]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	b29b      	uxth	r3, r3
 8002824:	461a      	mov	r2, r3
 8002826:	4613      	mov	r3, r2
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	4413      	add	r3, r2
 800282c:	3b1e      	subs	r3, #30
 800282e:	2207      	movs	r2, #7
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43da      	mvns	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	400a      	ands	r2, r1
 800283c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68d9      	ldr	r1, [r3, #12]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	b29b      	uxth	r3, r3
 800284e:	4618      	mov	r0, r3
 8002850:	4603      	mov	r3, r0
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	4403      	add	r3, r0
 8002856:	3b1e      	subs	r3, #30
 8002858:	409a      	lsls	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	60da      	str	r2, [r3, #12]
 8002862:	e022      	b.n	80028aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6919      	ldr	r1, [r3, #16]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	b29b      	uxth	r3, r3
 8002870:	461a      	mov	r2, r3
 8002872:	4613      	mov	r3, r2
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	4413      	add	r3, r2
 8002878:	2207      	movs	r2, #7
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43da      	mvns	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	400a      	ands	r2, r1
 8002886:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6919      	ldr	r1, [r3, #16]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	b29b      	uxth	r3, r3
 8002898:	4618      	mov	r0, r3
 800289a:	4603      	mov	r3, r0
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4403      	add	r3, r0
 80028a0:	409a      	lsls	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b06      	cmp	r3, #6
 80028b0:	d824      	bhi.n	80028fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	3b05      	subs	r3, #5
 80028c4:	221f      	movs	r2, #31
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43da      	mvns	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	400a      	ands	r2, r1
 80028d2:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	4618      	mov	r0, r3
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	3b05      	subs	r3, #5
 80028ee:	fa00 f203 	lsl.w	r2, r0, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80028fa:	e04c      	b.n	8002996 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b0c      	cmp	r3, #12
 8002902:	d824      	bhi.n	800294e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	3b23      	subs	r3, #35	@ 0x23
 8002916:	221f      	movs	r2, #31
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43da      	mvns	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	400a      	ands	r2, r1
 8002924:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	b29b      	uxth	r3, r3
 8002932:	4618      	mov	r0, r3
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	3b23      	subs	r3, #35	@ 0x23
 8002940:	fa00 f203 	lsl.w	r2, r0, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	631a      	str	r2, [r3, #48]	@ 0x30
 800294c:	e023      	b.n	8002996 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	3b41      	subs	r3, #65	@ 0x41
 8002960:	221f      	movs	r2, #31
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43da      	mvns	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	400a      	ands	r2, r1
 800296e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	b29b      	uxth	r3, r3
 800297c:	4618      	mov	r0, r3
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	3b41      	subs	r3, #65	@ 0x41
 800298a:	fa00 f203 	lsl.w	r2, r0, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002996:	4b22      	ldr	r3, [pc, #136]	@ (8002a20 <HAL_ADC_ConfigChannel+0x234>)
 8002998:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a21      	ldr	r2, [pc, #132]	@ (8002a24 <HAL_ADC_ConfigChannel+0x238>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d109      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x1cc>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b12      	cmp	r3, #18
 80029aa:	d105      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a19      	ldr	r2, [pc, #100]	@ (8002a24 <HAL_ADC_ConfigChannel+0x238>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d123      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x21e>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b10      	cmp	r3, #16
 80029c8:	d003      	beq.n	80029d2 <HAL_ADC_ConfigChannel+0x1e6>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b11      	cmp	r3, #17
 80029d0:	d11b      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b10      	cmp	r3, #16
 80029e4:	d111      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029e6:	4b10      	ldr	r3, [pc, #64]	@ (8002a28 <HAL_ADC_ConfigChannel+0x23c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a10      	ldr	r2, [pc, #64]	@ (8002a2c <HAL_ADC_ConfigChannel+0x240>)
 80029ec:	fba2 2303 	umull	r2, r3, r2, r3
 80029f0:	0c9a      	lsrs	r2, r3, #18
 80029f2:	4613      	mov	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029fc:	e002      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	3b01      	subs	r3, #1
 8002a02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f9      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	40012300 	.word	0x40012300
 8002a24:	40012000 	.word	0x40012000
 8002a28:	20000008 	.word	0x20000008
 8002a2c:	431bde83 	.word	0x431bde83

08002a30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a38:	4b79      	ldr	r3, [pc, #484]	@ (8002c20 <ADC_Init+0x1f0>)
 8002a3a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	431a      	orrs	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6859      	ldr	r1, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	021a      	lsls	r2, r3, #8
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002a88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6859      	ldr	r1, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002aaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6899      	ldr	r1, [r3, #8]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac2:	4a58      	ldr	r2, [pc, #352]	@ (8002c24 <ADC_Init+0x1f4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d022      	beq.n	8002b0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ad6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6899      	ldr	r1, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002af8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6899      	ldr	r1, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	e00f      	b.n	8002b2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0202 	bic.w	r2, r2, #2
 8002b3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6899      	ldr	r1, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	7e1b      	ldrb	r3, [r3, #24]
 8002b48:	005a      	lsls	r2, r3, #1
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d01b      	beq.n	8002b94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002b7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6859      	ldr	r1, [r3, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b86:	3b01      	subs	r3, #1
 8002b88:	035a      	lsls	r2, r3, #13
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	e007      	b.n	8002ba4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ba2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	051a      	lsls	r2, r3, #20
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002bd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6899      	ldr	r1, [r3, #8]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002be6:	025a      	lsls	r2, r3, #9
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6899      	ldr	r1, [r3, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	029a      	lsls	r2, r3, #10
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	609a      	str	r2, [r3, #8]
}
 8002c14:	bf00      	nop
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	40012300 	.word	0x40012300
 8002c24:	0f000001 	.word	0x0f000001

08002c28 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c34:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d13c      	bne.n	8002cbc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c46:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d12b      	bne.n	8002cb4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d127      	bne.n	8002cb4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d006      	beq.n	8002c80 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d119      	bne.n	8002cb4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0220 	bic.w	r2, r2, #32
 8002c8e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d105      	bne.n	8002cb4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cac:	f043 0201 	orr.w	r2, r3, #1
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f7ff fd7b 	bl	80027b0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002cba:	e00e      	b.n	8002cda <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f7ff fd85 	bl	80027d8 <HAL_ADC_ErrorCallback>
}
 8002cce:	e004      	b.n	8002cda <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	4798      	blx	r3
}
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b084      	sub	sp, #16
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cee:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f7ff fd67 	bl	80027c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cf6:	bf00      	nop
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b084      	sub	sp, #16
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d0a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2240      	movs	r2, #64	@ 0x40
 8002d10:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d16:	f043 0204 	orr.w	r2, r3, #4
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f7ff fd5a 	bl	80027d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d24:	bf00      	nop
 8002d26:	3710      	adds	r7, #16
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d70 <__NVIC_SetPriorityGrouping+0x44>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d48:	4013      	ands	r3, r2
 8002d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d5e:	4a04      	ldr	r2, [pc, #16]	@ (8002d70 <__NVIC_SetPriorityGrouping+0x44>)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	60d3      	str	r3, [r2, #12]
}
 8002d64:	bf00      	nop
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	e000ed00 	.word	0xe000ed00

08002d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d78:	4b04      	ldr	r3, [pc, #16]	@ (8002d8c <__NVIC_GetPriorityGrouping+0x18>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	0a1b      	lsrs	r3, r3, #8
 8002d7e:	f003 0307 	and.w	r3, r3, #7
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	4603      	mov	r3, r0
 8002d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	db0b      	blt.n	8002dba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002da2:	79fb      	ldrb	r3, [r7, #7]
 8002da4:	f003 021f 	and.w	r2, r3, #31
 8002da8:	4907      	ldr	r1, [pc, #28]	@ (8002dc8 <__NVIC_EnableIRQ+0x38>)
 8002daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dae:	095b      	lsrs	r3, r3, #5
 8002db0:	2001      	movs	r0, #1
 8002db2:	fa00 f202 	lsl.w	r2, r0, r2
 8002db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	e000e100 	.word	0xe000e100

08002dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	6039      	str	r1, [r7, #0]
 8002dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	db0a      	blt.n	8002df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	490c      	ldr	r1, [pc, #48]	@ (8002e18 <__NVIC_SetPriority+0x4c>)
 8002de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dea:	0112      	lsls	r2, r2, #4
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	440b      	add	r3, r1
 8002df0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002df4:	e00a      	b.n	8002e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	4908      	ldr	r1, [pc, #32]	@ (8002e1c <__NVIC_SetPriority+0x50>)
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	3b04      	subs	r3, #4
 8002e04:	0112      	lsls	r2, r2, #4
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	440b      	add	r3, r1
 8002e0a:	761a      	strb	r2, [r3, #24]
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	e000e100 	.word	0xe000e100
 8002e1c:	e000ed00 	.word	0xe000ed00

08002e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b089      	sub	sp, #36	@ 0x24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f1c3 0307 	rsb	r3, r3, #7
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	bf28      	it	cs
 8002e3e:	2304      	movcs	r3, #4
 8002e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	3304      	adds	r3, #4
 8002e46:	2b06      	cmp	r3, #6
 8002e48:	d902      	bls.n	8002e50 <NVIC_EncodePriority+0x30>
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	3b03      	subs	r3, #3
 8002e4e:	e000      	b.n	8002e52 <NVIC_EncodePriority+0x32>
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e54:	f04f 32ff 	mov.w	r2, #4294967295
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43da      	mvns	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	401a      	ands	r2, r3
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e68:	f04f 31ff 	mov.w	r1, #4294967295
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e72:	43d9      	mvns	r1, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e78:	4313      	orrs	r3, r2
         );
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3724      	adds	r7, #36	@ 0x24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
	...

08002e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e98:	d301      	bcc.n	8002e9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e00f      	b.n	8002ebe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec8 <SysTick_Config+0x40>)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ea6:	210f      	movs	r1, #15
 8002ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8002eac:	f7ff ff8e 	bl	8002dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eb0:	4b05      	ldr	r3, [pc, #20]	@ (8002ec8 <SysTick_Config+0x40>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eb6:	4b04      	ldr	r3, [pc, #16]	@ (8002ec8 <SysTick_Config+0x40>)
 8002eb8:	2207      	movs	r2, #7
 8002eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	e000e010 	.word	0xe000e010

08002ecc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff ff29 	bl	8002d2c <__NVIC_SetPriorityGrouping>
}
 8002eda:	bf00      	nop
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b086      	sub	sp, #24
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	4603      	mov	r3, r0
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	607a      	str	r2, [r7, #4]
 8002eee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ef4:	f7ff ff3e 	bl	8002d74 <__NVIC_GetPriorityGrouping>
 8002ef8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	68b9      	ldr	r1, [r7, #8]
 8002efe:	6978      	ldr	r0, [r7, #20]
 8002f00:	f7ff ff8e 	bl	8002e20 <NVIC_EncodePriority>
 8002f04:	4602      	mov	r2, r0
 8002f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f0a:	4611      	mov	r1, r2
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff ff5d 	bl	8002dcc <__NVIC_SetPriority>
}
 8002f12:	bf00      	nop
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b082      	sub	sp, #8
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	4603      	mov	r3, r0
 8002f22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff ff31 	bl	8002d90 <__NVIC_EnableIRQ>
}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b082      	sub	sp, #8
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff ffa2 	bl	8002e88 <SysTick_Config>
 8002f44:	4603      	mov	r3, r0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
	...

08002f50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f5c:	f7ff faa4 	bl	80024a8 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e099      	b.n	80030a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0201 	bic.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f8c:	e00f      	b.n	8002fae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f8e:	f7ff fa8b 	bl	80024a8 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b05      	cmp	r3, #5
 8002f9a:	d908      	bls.n	8002fae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e078      	b.n	80030a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1e8      	bne.n	8002f8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	4b38      	ldr	r3, [pc, #224]	@ (80030a8 <HAL_DMA_Init+0x158>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fe6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ff2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003004:	2b04      	cmp	r3, #4
 8003006:	d107      	bne.n	8003018 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003010:	4313      	orrs	r3, r2
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	4313      	orrs	r3, r2
 8003016:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	f023 0307 	bic.w	r3, r3, #7
 800302e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003034:	697a      	ldr	r2, [r7, #20]
 8003036:	4313      	orrs	r3, r2
 8003038:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303e:	2b04      	cmp	r3, #4
 8003040:	d117      	bne.n	8003072 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003046:	697a      	ldr	r2, [r7, #20]
 8003048:	4313      	orrs	r3, r2
 800304a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00e      	beq.n	8003072 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 fb01 	bl	800365c <DMA_CheckFifoParam>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2240      	movs	r2, #64	@ 0x40
 8003064:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2201      	movs	r2, #1
 800306a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800306e:	2301      	movs	r3, #1
 8003070:	e016      	b.n	80030a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 fab8 	bl	80035f0 <DMA_CalcBaseAndBitshift>
 8003080:	4603      	mov	r3, r0
 8003082:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003088:	223f      	movs	r2, #63	@ 0x3f
 800308a:	409a      	lsls	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	f010803f 	.word	0xf010803f

080030ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
 80030b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d101      	bne.n	80030d2 <HAL_DMA_Start_IT+0x26>
 80030ce:	2302      	movs	r3, #2
 80030d0:	e040      	b.n	8003154 <HAL_DMA_Start_IT+0xa8>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d12f      	bne.n	8003146 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2202      	movs	r2, #2
 80030ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 fa4a 	bl	8003594 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003104:	223f      	movs	r2, #63	@ 0x3f
 8003106:	409a      	lsls	r2, r3
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0216 	orr.w	r2, r2, #22
 800311a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003120:	2b00      	cmp	r3, #0
 8003122:	d007      	beq.n	8003134 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0208 	orr.w	r2, r2, #8
 8003132:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	e005      	b.n	8003152 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800314e:	2302      	movs	r3, #2
 8003150:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003152:	7dfb      	ldrb	r3, [r7, #23]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003168:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800316a:	f7ff f99d 	bl	80024a8 <HAL_GetTick>
 800316e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d008      	beq.n	800318e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2280      	movs	r2, #128	@ 0x80
 8003180:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e052      	b.n	8003234 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f022 0216 	bic.w	r2, r2, #22
 800319c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695a      	ldr	r2, [r3, #20]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d103      	bne.n	80031be <HAL_DMA_Abort+0x62>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d007      	beq.n	80031ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0208 	bic.w	r2, r2, #8
 80031cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0201 	bic.w	r2, r2, #1
 80031dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031de:	e013      	b.n	8003208 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031e0:	f7ff f962 	bl	80024a8 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b05      	cmp	r3, #5
 80031ec:	d90c      	bls.n	8003208 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2220      	movs	r2, #32
 80031f2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2203      	movs	r2, #3
 80031f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e015      	b.n	8003234 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1e4      	bne.n	80031e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800321a:	223f      	movs	r2, #63	@ 0x3f
 800321c:	409a      	lsls	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d004      	beq.n	800325a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2280      	movs	r2, #128	@ 0x80
 8003254:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e00c      	b.n	8003274 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2205      	movs	r2, #5
 800325e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0201 	bic.w	r2, r2, #1
 8003270:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800328c:	4b8e      	ldr	r3, [pc, #568]	@ (80034c8 <HAL_DMA_IRQHandler+0x248>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a8e      	ldr	r2, [pc, #568]	@ (80034cc <HAL_DMA_IRQHandler+0x24c>)
 8003292:	fba2 2303 	umull	r2, r3, r2, r3
 8003296:	0a9b      	lsrs	r3, r3, #10
 8003298:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800329e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032aa:	2208      	movs	r2, #8
 80032ac:	409a      	lsls	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	4013      	ands	r3, r2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d01a      	beq.n	80032ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d013      	beq.n	80032ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0204 	bic.w	r2, r2, #4
 80032d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d8:	2208      	movs	r2, #8
 80032da:	409a      	lsls	r2, r3
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e4:	f043 0201 	orr.w	r2, r3, #1
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f0:	2201      	movs	r2, #1
 80032f2:	409a      	lsls	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4013      	ands	r3, r2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d012      	beq.n	8003322 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00b      	beq.n	8003322 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330e:	2201      	movs	r2, #1
 8003310:	409a      	lsls	r2, r3
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800331a:	f043 0202 	orr.w	r2, r3, #2
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003326:	2204      	movs	r2, #4
 8003328:	409a      	lsls	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4013      	ands	r3, r2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d012      	beq.n	8003358 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00b      	beq.n	8003358 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003344:	2204      	movs	r2, #4
 8003346:	409a      	lsls	r2, r3
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003350:	f043 0204 	orr.w	r2, r3, #4
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335c:	2210      	movs	r2, #16
 800335e:	409a      	lsls	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4013      	ands	r3, r2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d043      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	2b00      	cmp	r3, #0
 8003374:	d03c      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800337a:	2210      	movs	r2, #16
 800337c:	409a      	lsls	r2, r3
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d018      	beq.n	80033c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d108      	bne.n	80033b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d024      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	4798      	blx	r3
 80033ae:	e01f      	b.n	80033f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01b      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	4798      	blx	r3
 80033c0:	e016      	b.n	80033f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d107      	bne.n	80033e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0208 	bic.w	r2, r2, #8
 80033de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f4:	2220      	movs	r2, #32
 80033f6:	409a      	lsls	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4013      	ands	r3, r2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 808f 	beq.w	8003520 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0310 	and.w	r3, r3, #16
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 8087 	beq.w	8003520 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003416:	2220      	movs	r2, #32
 8003418:	409a      	lsls	r2, r3
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b05      	cmp	r3, #5
 8003428:	d136      	bne.n	8003498 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0216 	bic.w	r2, r2, #22
 8003438:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695a      	ldr	r2, [r3, #20]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003448:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344e:	2b00      	cmp	r3, #0
 8003450:	d103      	bne.n	800345a <HAL_DMA_IRQHandler+0x1da>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003456:	2b00      	cmp	r3, #0
 8003458:	d007      	beq.n	800346a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0208 	bic.w	r2, r2, #8
 8003468:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800346e:	223f      	movs	r2, #63	@ 0x3f
 8003470:	409a      	lsls	r2, r3
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800348a:	2b00      	cmp	r3, #0
 800348c:	d07e      	beq.n	800358c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	4798      	blx	r3
        }
        return;
 8003496:	e079      	b.n	800358c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d01d      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10d      	bne.n	80034d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d031      	beq.n	8003520 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	4798      	blx	r3
 80034c4:	e02c      	b.n	8003520 <HAL_DMA_IRQHandler+0x2a0>
 80034c6:	bf00      	nop
 80034c8:	20000008 	.word	0x20000008
 80034cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d023      	beq.n	8003520 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	4798      	blx	r3
 80034e0:	e01e      	b.n	8003520 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10f      	bne.n	8003510 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0210 	bic.w	r2, r2, #16
 80034fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003524:	2b00      	cmp	r3, #0
 8003526:	d032      	beq.n	800358e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b00      	cmp	r3, #0
 8003532:	d022      	beq.n	800357a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2205      	movs	r2, #5
 8003538:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0201 	bic.w	r2, r2, #1
 800354a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	3301      	adds	r3, #1
 8003550:	60bb      	str	r3, [r7, #8]
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	429a      	cmp	r2, r3
 8003556:	d307      	bcc.n	8003568 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f2      	bne.n	800354c <HAL_DMA_IRQHandler+0x2cc>
 8003566:	e000      	b.n	800356a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003568:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800357e:	2b00      	cmp	r3, #0
 8003580:	d005      	beq.n	800358e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	4798      	blx	r3
 800358a:	e000      	b.n	800358e <HAL_DMA_IRQHandler+0x30e>
        return;
 800358c:	bf00      	nop
    }
  }
}
 800358e:	3718      	adds	r7, #24
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
 80035a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80035b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	2b40      	cmp	r3, #64	@ 0x40
 80035c0:	d108      	bne.n	80035d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80035d2:	e007      	b.n	80035e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	60da      	str	r2, [r3, #12]
}
 80035e4:	bf00      	nop
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	3b10      	subs	r3, #16
 8003600:	4a14      	ldr	r2, [pc, #80]	@ (8003654 <DMA_CalcBaseAndBitshift+0x64>)
 8003602:	fba2 2303 	umull	r2, r3, r2, r3
 8003606:	091b      	lsrs	r3, r3, #4
 8003608:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800360a:	4a13      	ldr	r2, [pc, #76]	@ (8003658 <DMA_CalcBaseAndBitshift+0x68>)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4413      	add	r3, r2
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b03      	cmp	r3, #3
 800361c:	d909      	bls.n	8003632 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003626:	f023 0303 	bic.w	r3, r3, #3
 800362a:	1d1a      	adds	r2, r3, #4
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003630:	e007      	b.n	8003642 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800363a:	f023 0303 	bic.w	r3, r3, #3
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003646:	4618      	mov	r0, r3
 8003648:	3714      	adds	r7, #20
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	aaaaaaab 	.word	0xaaaaaaab
 8003658:	08007e9c 	.word	0x08007e9c

0800365c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003664:	2300      	movs	r3, #0
 8003666:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d11f      	bne.n	80036b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b03      	cmp	r3, #3
 800367a:	d856      	bhi.n	800372a <DMA_CheckFifoParam+0xce>
 800367c:	a201      	add	r2, pc, #4	@ (adr r2, 8003684 <DMA_CheckFifoParam+0x28>)
 800367e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003682:	bf00      	nop
 8003684:	08003695 	.word	0x08003695
 8003688:	080036a7 	.word	0x080036a7
 800368c:	08003695 	.word	0x08003695
 8003690:	0800372b 	.word	0x0800372b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003698:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d046      	beq.n	800372e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a4:	e043      	b.n	800372e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036aa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80036ae:	d140      	bne.n	8003732 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036b4:	e03d      	b.n	8003732 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036be:	d121      	bne.n	8003704 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	d837      	bhi.n	8003736 <DMA_CheckFifoParam+0xda>
 80036c6:	a201      	add	r2, pc, #4	@ (adr r2, 80036cc <DMA_CheckFifoParam+0x70>)
 80036c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036cc:	080036dd 	.word	0x080036dd
 80036d0:	080036e3 	.word	0x080036e3
 80036d4:	080036dd 	.word	0x080036dd
 80036d8:	080036f5 	.word	0x080036f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
      break;
 80036e0:	e030      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d025      	beq.n	800373a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f2:	e022      	b.n	800373a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80036fc:	d11f      	bne.n	800373e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003702:	e01c      	b.n	800373e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2b02      	cmp	r3, #2
 8003708:	d903      	bls.n	8003712 <DMA_CheckFifoParam+0xb6>
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	2b03      	cmp	r3, #3
 800370e:	d003      	beq.n	8003718 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003710:	e018      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	73fb      	strb	r3, [r7, #15]
      break;
 8003716:	e015      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800371c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00e      	beq.n	8003742 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	73fb      	strb	r3, [r7, #15]
      break;
 8003728:	e00b      	b.n	8003742 <DMA_CheckFifoParam+0xe6>
      break;
 800372a:	bf00      	nop
 800372c:	e00a      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
      break;
 800372e:	bf00      	nop
 8003730:	e008      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
      break;
 8003732:	bf00      	nop
 8003734:	e006      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
      break;
 8003736:	bf00      	nop
 8003738:	e004      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
      break;
 800373a:	bf00      	nop
 800373c:	e002      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
      break;   
 800373e:	bf00      	nop
 8003740:	e000      	b.n	8003744 <DMA_CheckFifoParam+0xe8>
      break;
 8003742:	bf00      	nop
    }
  } 
  
  return status; 
 8003744:	7bfb      	ldrb	r3, [r7, #15]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop

08003754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003754:	b480      	push	{r7}
 8003756:	b089      	sub	sp, #36	@ 0x24
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003762:	2300      	movs	r3, #0
 8003764:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003766:	2300      	movs	r3, #0
 8003768:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800376a:	2300      	movs	r3, #0
 800376c:	61fb      	str	r3, [r7, #28]
 800376e:	e16b      	b.n	8003a48 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003770:	2201      	movs	r2, #1
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	4013      	ands	r3, r2
 8003782:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	429a      	cmp	r2, r3
 800378a:	f040 815a 	bne.w	8003a42 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	2b01      	cmp	r3, #1
 8003798:	d005      	beq.n	80037a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d130      	bne.n	8003808 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	2203      	movs	r2, #3
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	43db      	mvns	r3, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4013      	ands	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	68da      	ldr	r2, [r3, #12]
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037dc:	2201      	movs	r2, #1
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	43db      	mvns	r3, r3
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4013      	ands	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	091b      	lsrs	r3, r3, #4
 80037f2:	f003 0201 	and.w	r2, r3, #1
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4313      	orrs	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	2b03      	cmp	r3, #3
 8003812:	d017      	beq.n	8003844 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	2203      	movs	r2, #3
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	43db      	mvns	r3, r3
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4013      	ands	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4313      	orrs	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d123      	bne.n	8003898 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	08da      	lsrs	r2, r3, #3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3208      	adds	r2, #8
 8003858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800385c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	220f      	movs	r2, #15
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	43db      	mvns	r3, r3
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4013      	ands	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	4313      	orrs	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	08da      	lsrs	r2, r3, #3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3208      	adds	r2, #8
 8003892:	69b9      	ldr	r1, [r7, #24]
 8003894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	2203      	movs	r2, #3
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	43db      	mvns	r3, r3
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4013      	ands	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 0203 	and.w	r2, r3, #3
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 80b4 	beq.w	8003a42 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	4b60      	ldr	r3, [pc, #384]	@ (8003a60 <HAL_GPIO_Init+0x30c>)
 80038e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e2:	4a5f      	ldr	r2, [pc, #380]	@ (8003a60 <HAL_GPIO_Init+0x30c>)
 80038e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80038ea:	4b5d      	ldr	r3, [pc, #372]	@ (8003a60 <HAL_GPIO_Init+0x30c>)
 80038ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038f6:	4a5b      	ldr	r2, [pc, #364]	@ (8003a64 <HAL_GPIO_Init+0x310>)
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	089b      	lsrs	r3, r3, #2
 80038fc:	3302      	adds	r3, #2
 80038fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003902:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	220f      	movs	r2, #15
 800390e:	fa02 f303 	lsl.w	r3, r2, r3
 8003912:	43db      	mvns	r3, r3
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	4013      	ands	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a52      	ldr	r2, [pc, #328]	@ (8003a68 <HAL_GPIO_Init+0x314>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d02b      	beq.n	800397a <HAL_GPIO_Init+0x226>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a51      	ldr	r2, [pc, #324]	@ (8003a6c <HAL_GPIO_Init+0x318>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d025      	beq.n	8003976 <HAL_GPIO_Init+0x222>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a50      	ldr	r2, [pc, #320]	@ (8003a70 <HAL_GPIO_Init+0x31c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d01f      	beq.n	8003972 <HAL_GPIO_Init+0x21e>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a4f      	ldr	r2, [pc, #316]	@ (8003a74 <HAL_GPIO_Init+0x320>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d019      	beq.n	800396e <HAL_GPIO_Init+0x21a>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a4e      	ldr	r2, [pc, #312]	@ (8003a78 <HAL_GPIO_Init+0x324>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d013      	beq.n	800396a <HAL_GPIO_Init+0x216>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a4d      	ldr	r2, [pc, #308]	@ (8003a7c <HAL_GPIO_Init+0x328>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d00d      	beq.n	8003966 <HAL_GPIO_Init+0x212>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a4c      	ldr	r2, [pc, #304]	@ (8003a80 <HAL_GPIO_Init+0x32c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d007      	beq.n	8003962 <HAL_GPIO_Init+0x20e>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a4b      	ldr	r2, [pc, #300]	@ (8003a84 <HAL_GPIO_Init+0x330>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d101      	bne.n	800395e <HAL_GPIO_Init+0x20a>
 800395a:	2307      	movs	r3, #7
 800395c:	e00e      	b.n	800397c <HAL_GPIO_Init+0x228>
 800395e:	2308      	movs	r3, #8
 8003960:	e00c      	b.n	800397c <HAL_GPIO_Init+0x228>
 8003962:	2306      	movs	r3, #6
 8003964:	e00a      	b.n	800397c <HAL_GPIO_Init+0x228>
 8003966:	2305      	movs	r3, #5
 8003968:	e008      	b.n	800397c <HAL_GPIO_Init+0x228>
 800396a:	2304      	movs	r3, #4
 800396c:	e006      	b.n	800397c <HAL_GPIO_Init+0x228>
 800396e:	2303      	movs	r3, #3
 8003970:	e004      	b.n	800397c <HAL_GPIO_Init+0x228>
 8003972:	2302      	movs	r3, #2
 8003974:	e002      	b.n	800397c <HAL_GPIO_Init+0x228>
 8003976:	2301      	movs	r3, #1
 8003978:	e000      	b.n	800397c <HAL_GPIO_Init+0x228>
 800397a:	2300      	movs	r3, #0
 800397c:	69fa      	ldr	r2, [r7, #28]
 800397e:	f002 0203 	and.w	r2, r2, #3
 8003982:	0092      	lsls	r2, r2, #2
 8003984:	4093      	lsls	r3, r2
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	4313      	orrs	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800398c:	4935      	ldr	r1, [pc, #212]	@ (8003a64 <HAL_GPIO_Init+0x310>)
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	089b      	lsrs	r3, r3, #2
 8003992:	3302      	adds	r3, #2
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800399a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a88 <HAL_GPIO_Init+0x334>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	43db      	mvns	r3, r3
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4013      	ands	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039be:	4a32      	ldr	r2, [pc, #200]	@ (8003a88 <HAL_GPIO_Init+0x334>)
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80039c4:	4b30      	ldr	r3, [pc, #192]	@ (8003a88 <HAL_GPIO_Init+0x334>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	43db      	mvns	r3, r3
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	4013      	ands	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039e8:	4a27      	ldr	r2, [pc, #156]	@ (8003a88 <HAL_GPIO_Init+0x334>)
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039ee:	4b26      	ldr	r3, [pc, #152]	@ (8003a88 <HAL_GPIO_Init+0x334>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	43db      	mvns	r3, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4013      	ands	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a12:	4a1d      	ldr	r2, [pc, #116]	@ (8003a88 <HAL_GPIO_Init+0x334>)
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a18:	4b1b      	ldr	r3, [pc, #108]	@ (8003a88 <HAL_GPIO_Init+0x334>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	43db      	mvns	r3, r3
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4013      	ands	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a3c:	4a12      	ldr	r2, [pc, #72]	@ (8003a88 <HAL_GPIO_Init+0x334>)
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	3301      	adds	r3, #1
 8003a46:	61fb      	str	r3, [r7, #28]
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	2b0f      	cmp	r3, #15
 8003a4c:	f67f ae90 	bls.w	8003770 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a50:	bf00      	nop
 8003a52:	bf00      	nop
 8003a54:	3724      	adds	r7, #36	@ 0x24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	40023800 	.word	0x40023800
 8003a64:	40013800 	.word	0x40013800
 8003a68:	40020000 	.word	0x40020000
 8003a6c:	40020400 	.word	0x40020400
 8003a70:	40020800 	.word	0x40020800
 8003a74:	40020c00 	.word	0x40020c00
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	40021400 	.word	0x40021400
 8003a80:	40021800 	.word	0x40021800
 8003a84:	40021c00 	.word	0x40021c00
 8003a88:	40013c00 	.word	0x40013c00

08003a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	460b      	mov	r3, r1
 8003a96:	807b      	strh	r3, [r7, #2]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a9c:	787b      	ldrb	r3, [r7, #1]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aa2:	887a      	ldrh	r2, [r7, #2]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003aa8:	e003      	b.n	8003ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003aaa:	887b      	ldrh	r3, [r7, #2]
 8003aac:	041a      	lsls	r2, r3, #16
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	619a      	str	r2, [r3, #24]
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b085      	sub	sp, #20
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ad0:	887a      	ldrh	r2, [r7, #2]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	041a      	lsls	r2, r3, #16
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	43d9      	mvns	r1, r3
 8003adc:	887b      	ldrh	r3, [r7, #2]
 8003ade:	400b      	ands	r3, r1
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	619a      	str	r2, [r3, #24]
}
 8003ae6:	bf00      	nop
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
	...

08003af4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e12b      	b.n	8003d5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fd faf2 	bl	8001104 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2224      	movs	r2, #36	@ 0x24
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0201 	bic.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b58:	f000 fd80 	bl	800465c <HAL_RCC_GetPCLK1Freq>
 8003b5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	4a81      	ldr	r2, [pc, #516]	@ (8003d68 <HAL_I2C_Init+0x274>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d807      	bhi.n	8003b78 <HAL_I2C_Init+0x84>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4a80      	ldr	r2, [pc, #512]	@ (8003d6c <HAL_I2C_Init+0x278>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	bf94      	ite	ls
 8003b70:	2301      	movls	r3, #1
 8003b72:	2300      	movhi	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	e006      	b.n	8003b86 <HAL_I2C_Init+0x92>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4a7d      	ldr	r2, [pc, #500]	@ (8003d70 <HAL_I2C_Init+0x27c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	bf94      	ite	ls
 8003b80:	2301      	movls	r3, #1
 8003b82:	2300      	movhi	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e0e7      	b.n	8003d5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4a78      	ldr	r2, [pc, #480]	@ (8003d74 <HAL_I2C_Init+0x280>)
 8003b92:	fba2 2303 	umull	r2, r3, r2, r3
 8003b96:	0c9b      	lsrs	r3, r3, #18
 8003b98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	4a6a      	ldr	r2, [pc, #424]	@ (8003d68 <HAL_I2C_Init+0x274>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d802      	bhi.n	8003bc8 <HAL_I2C_Init+0xd4>
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	e009      	b.n	8003bdc <HAL_I2C_Init+0xe8>
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003bce:	fb02 f303 	mul.w	r3, r2, r3
 8003bd2:	4a69      	ldr	r2, [pc, #420]	@ (8003d78 <HAL_I2C_Init+0x284>)
 8003bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd8:	099b      	lsrs	r3, r3, #6
 8003bda:	3301      	adds	r3, #1
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6812      	ldr	r2, [r2, #0]
 8003be0:	430b      	orrs	r3, r1
 8003be2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003bee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	495c      	ldr	r1, [pc, #368]	@ (8003d68 <HAL_I2C_Init+0x274>)
 8003bf8:	428b      	cmp	r3, r1
 8003bfa:	d819      	bhi.n	8003c30 <HAL_I2C_Init+0x13c>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	1e59      	subs	r1, r3, #1
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c0a:	1c59      	adds	r1, r3, #1
 8003c0c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003c10:	400b      	ands	r3, r1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <HAL_I2C_Init+0x138>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	1e59      	subs	r1, r3, #1
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c24:	3301      	adds	r3, #1
 8003c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c2a:	e051      	b.n	8003cd0 <HAL_I2C_Init+0x1dc>
 8003c2c:	2304      	movs	r3, #4
 8003c2e:	e04f      	b.n	8003cd0 <HAL_I2C_Init+0x1dc>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d111      	bne.n	8003c5c <HAL_I2C_Init+0x168>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	1e58      	subs	r0, r3, #1
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6859      	ldr	r1, [r3, #4]
 8003c40:	460b      	mov	r3, r1
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	440b      	add	r3, r1
 8003c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	bf0c      	ite	eq
 8003c54:	2301      	moveq	r3, #1
 8003c56:	2300      	movne	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	e012      	b.n	8003c82 <HAL_I2C_Init+0x18e>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	1e58      	subs	r0, r3, #1
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6859      	ldr	r1, [r3, #4]
 8003c64:	460b      	mov	r3, r1
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	0099      	lsls	r1, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c72:	3301      	adds	r3, #1
 8003c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	bf0c      	ite	eq
 8003c7c:	2301      	moveq	r3, #1
 8003c7e:	2300      	movne	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_I2C_Init+0x196>
 8003c86:	2301      	movs	r3, #1
 8003c88:	e022      	b.n	8003cd0 <HAL_I2C_Init+0x1dc>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10e      	bne.n	8003cb0 <HAL_I2C_Init+0x1bc>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	1e58      	subs	r0, r3, #1
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6859      	ldr	r1, [r3, #4]
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	440b      	add	r3, r1
 8003ca0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003caa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cae:	e00f      	b.n	8003cd0 <HAL_I2C_Init+0x1dc>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	1e58      	subs	r0, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6859      	ldr	r1, [r3, #4]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	0099      	lsls	r1, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ccc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003cd0:	6879      	ldr	r1, [r7, #4]
 8003cd2:	6809      	ldr	r1, [r1, #0]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	69da      	ldr	r2, [r3, #28]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	431a      	orrs	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003cfe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6911      	ldr	r1, [r2, #16]
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	68d2      	ldr	r2, [r2, #12]
 8003d0a:	4311      	orrs	r1, r2
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6812      	ldr	r2, [r2, #0]
 8003d10:	430b      	orrs	r3, r1
 8003d12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	695a      	ldr	r2, [r3, #20]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0201 	orr.w	r2, r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	000186a0 	.word	0x000186a0
 8003d6c:	001e847f 	.word	0x001e847f
 8003d70:	003d08ff 	.word	0x003d08ff
 8003d74:	431bde83 	.word	0x431bde83
 8003d78:	10624dd3 	.word	0x10624dd3

08003d7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e267      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d075      	beq.n	8003e86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d9a:	4b88      	ldr	r3, [pc, #544]	@ (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 030c 	and.w	r3, r3, #12
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d00c      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003da6:	4b85      	ldr	r3, [pc, #532]	@ (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d112      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003db2:	4b82      	ldr	r3, [pc, #520]	@ (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dbe:	d10b      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc0:	4b7e      	ldr	r3, [pc, #504]	@ (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d05b      	beq.n	8003e84 <HAL_RCC_OscConfig+0x108>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d157      	bne.n	8003e84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e242      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003de0:	d106      	bne.n	8003df0 <HAL_RCC_OscConfig+0x74>
 8003de2:	4b76      	ldr	r3, [pc, #472]	@ (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a75      	ldr	r2, [pc, #468]	@ (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003de8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	e01d      	b.n	8003e2c <HAL_RCC_OscConfig+0xb0>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003df8:	d10c      	bne.n	8003e14 <HAL_RCC_OscConfig+0x98>
 8003dfa:	4b70      	ldr	r3, [pc, #448]	@ (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a6f      	ldr	r2, [pc, #444]	@ (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	4b6d      	ldr	r3, [pc, #436]	@ (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a6c      	ldr	r2, [pc, #432]	@ (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	e00b      	b.n	8003e2c <HAL_RCC_OscConfig+0xb0>
 8003e14:	4b69      	ldr	r3, [pc, #420]	@ (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a68      	ldr	r2, [pc, #416]	@ (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e1e:	6013      	str	r3, [r2, #0]
 8003e20:	4b66      	ldr	r3, [pc, #408]	@ (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a65      	ldr	r2, [pc, #404]	@ (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d013      	beq.n	8003e5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e34:	f7fe fb38 	bl	80024a8 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e3c:	f7fe fb34 	bl	80024a8 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b64      	cmp	r3, #100	@ 0x64
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e207      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4e:	4b5b      	ldr	r3, [pc, #364]	@ (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0f0      	beq.n	8003e3c <HAL_RCC_OscConfig+0xc0>
 8003e5a:	e014      	b.n	8003e86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5c:	f7fe fb24 	bl	80024a8 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e64:	f7fe fb20 	bl	80024a8 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b64      	cmp	r3, #100	@ 0x64
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e1f3      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e76:	4b51      	ldr	r3, [pc, #324]	@ (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f0      	bne.n	8003e64 <HAL_RCC_OscConfig+0xe8>
 8003e82:	e000      	b.n	8003e86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d063      	beq.n	8003f5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e92:	4b4a      	ldr	r3, [pc, #296]	@ (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 030c 	and.w	r3, r3, #12
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00b      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e9e:	4b47      	ldr	r3, [pc, #284]	@ (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d11c      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eaa:	4b44      	ldr	r3, [pc, #272]	@ (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d116      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eb6:	4b41      	ldr	r3, [pc, #260]	@ (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d005      	beq.n	8003ece <HAL_RCC_OscConfig+0x152>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d001      	beq.n	8003ece <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e1c7      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ece:	4b3b      	ldr	r3, [pc, #236]	@ (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	4937      	ldr	r1, [pc, #220]	@ (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ee2:	e03a      	b.n	8003f5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d020      	beq.n	8003f2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eec:	4b34      	ldr	r3, [pc, #208]	@ (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003eee:	2201      	movs	r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef2:	f7fe fad9 	bl	80024a8 <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003efa:	f7fe fad5 	bl	80024a8 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e1a8      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f0c:	4b2b      	ldr	r3, [pc, #172]	@ (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0f0      	beq.n	8003efa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f18:	4b28      	ldr	r3, [pc, #160]	@ (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	4925      	ldr	r1, [pc, #148]	@ (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	600b      	str	r3, [r1, #0]
 8003f2c:	e015      	b.n	8003f5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f2e:	4b24      	ldr	r3, [pc, #144]	@ (8003fc0 <HAL_RCC_OscConfig+0x244>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f34:	f7fe fab8 	bl	80024a8 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f3c:	f7fe fab4 	bl	80024a8 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e187      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f0      	bne.n	8003f3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d036      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d016      	beq.n	8003f9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f6e:	4b15      	ldr	r3, [pc, #84]	@ (8003fc4 <HAL_RCC_OscConfig+0x248>)
 8003f70:	2201      	movs	r2, #1
 8003f72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f74:	f7fe fa98 	bl	80024a8 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f7c:	f7fe fa94 	bl	80024a8 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e167      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003fbc <HAL_RCC_OscConfig+0x240>)
 8003f90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0f0      	beq.n	8003f7c <HAL_RCC_OscConfig+0x200>
 8003f9a:	e01b      	b.n	8003fd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f9c:	4b09      	ldr	r3, [pc, #36]	@ (8003fc4 <HAL_RCC_OscConfig+0x248>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa2:	f7fe fa81 	bl	80024a8 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fa8:	e00e      	b.n	8003fc8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003faa:	f7fe fa7d 	bl	80024a8 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d907      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e150      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	42470000 	.word	0x42470000
 8003fc4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fc8:	4b88      	ldr	r3, [pc, #544]	@ (80041ec <HAL_RCC_OscConfig+0x470>)
 8003fca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1ea      	bne.n	8003faa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 8097 	beq.w	8004110 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fe6:	4b81      	ldr	r3, [pc, #516]	@ (80041ec <HAL_RCC_OscConfig+0x470>)
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10f      	bne.n	8004012 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	4b7d      	ldr	r3, [pc, #500]	@ (80041ec <HAL_RCC_OscConfig+0x470>)
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffa:	4a7c      	ldr	r2, [pc, #496]	@ (80041ec <HAL_RCC_OscConfig+0x470>)
 8003ffc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004000:	6413      	str	r3, [r2, #64]	@ 0x40
 8004002:	4b7a      	ldr	r3, [pc, #488]	@ (80041ec <HAL_RCC_OscConfig+0x470>)
 8004004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800400a:	60bb      	str	r3, [r7, #8]
 800400c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800400e:	2301      	movs	r3, #1
 8004010:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004012:	4b77      	ldr	r3, [pc, #476]	@ (80041f0 <HAL_RCC_OscConfig+0x474>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800401a:	2b00      	cmp	r3, #0
 800401c:	d118      	bne.n	8004050 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800401e:	4b74      	ldr	r3, [pc, #464]	@ (80041f0 <HAL_RCC_OscConfig+0x474>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a73      	ldr	r2, [pc, #460]	@ (80041f0 <HAL_RCC_OscConfig+0x474>)
 8004024:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004028:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800402a:	f7fe fa3d 	bl	80024a8 <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004030:	e008      	b.n	8004044 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004032:	f7fe fa39 	bl	80024a8 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e10c      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004044:	4b6a      	ldr	r3, [pc, #424]	@ (80041f0 <HAL_RCC_OscConfig+0x474>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800404c:	2b00      	cmp	r3, #0
 800404e:	d0f0      	beq.n	8004032 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d106      	bne.n	8004066 <HAL_RCC_OscConfig+0x2ea>
 8004058:	4b64      	ldr	r3, [pc, #400]	@ (80041ec <HAL_RCC_OscConfig+0x470>)
 800405a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800405c:	4a63      	ldr	r2, [pc, #396]	@ (80041ec <HAL_RCC_OscConfig+0x470>)
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	6713      	str	r3, [r2, #112]	@ 0x70
 8004064:	e01c      	b.n	80040a0 <HAL_RCC_OscConfig+0x324>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	2b05      	cmp	r3, #5
 800406c:	d10c      	bne.n	8004088 <HAL_RCC_OscConfig+0x30c>
 800406e:	4b5f      	ldr	r3, [pc, #380]	@ (80041ec <HAL_RCC_OscConfig+0x470>)
 8004070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004072:	4a5e      	ldr	r2, [pc, #376]	@ (80041ec <HAL_RCC_OscConfig+0x470>)
 8004074:	f043 0304 	orr.w	r3, r3, #4
 8004078:	6713      	str	r3, [r2, #112]	@ 0x70
 800407a:	4b5c      	ldr	r3, [pc, #368]	@ (80041ec <HAL_RCC_OscConfig+0x470>)
 800407c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800407e:	4a5b      	ldr	r2, [pc, #364]	@ (80041ec <HAL_RCC_OscConfig+0x470>)
 8004080:	f043 0301 	orr.w	r3, r3, #1
 8004084:	6713      	str	r3, [r2, #112]	@ 0x70
 8004086:	e00b      	b.n	80040a0 <HAL_RCC_OscConfig+0x324>
 8004088:	4b58      	ldr	r3, [pc, #352]	@ (80041ec <HAL_RCC_OscConfig+0x470>)
 800408a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800408c:	4a57      	ldr	r2, [pc, #348]	@ (80041ec <HAL_RCC_OscConfig+0x470>)
 800408e:	f023 0301 	bic.w	r3, r3, #1
 8004092:	6713      	str	r3, [r2, #112]	@ 0x70
 8004094:	4b55      	ldr	r3, [pc, #340]	@ (80041ec <HAL_RCC_OscConfig+0x470>)
 8004096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004098:	4a54      	ldr	r2, [pc, #336]	@ (80041ec <HAL_RCC_OscConfig+0x470>)
 800409a:	f023 0304 	bic.w	r3, r3, #4
 800409e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d015      	beq.n	80040d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a8:	f7fe f9fe 	bl	80024a8 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ae:	e00a      	b.n	80040c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040b0:	f7fe f9fa 	bl	80024a8 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040be:	4293      	cmp	r3, r2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e0cb      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c6:	4b49      	ldr	r3, [pc, #292]	@ (80041ec <HAL_RCC_OscConfig+0x470>)
 80040c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0ee      	beq.n	80040b0 <HAL_RCC_OscConfig+0x334>
 80040d2:	e014      	b.n	80040fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040d4:	f7fe f9e8 	bl	80024a8 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040da:	e00a      	b.n	80040f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040dc:	f7fe f9e4 	bl	80024a8 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e0b5      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040f2:	4b3e      	ldr	r3, [pc, #248]	@ (80041ec <HAL_RCC_OscConfig+0x470>)
 80040f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1ee      	bne.n	80040dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040fe:	7dfb      	ldrb	r3, [r7, #23]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d105      	bne.n	8004110 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004104:	4b39      	ldr	r3, [pc, #228]	@ (80041ec <HAL_RCC_OscConfig+0x470>)
 8004106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004108:	4a38      	ldr	r2, [pc, #224]	@ (80041ec <HAL_RCC_OscConfig+0x470>)
 800410a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800410e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 80a1 	beq.w	800425c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800411a:	4b34      	ldr	r3, [pc, #208]	@ (80041ec <HAL_RCC_OscConfig+0x470>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 030c 	and.w	r3, r3, #12
 8004122:	2b08      	cmp	r3, #8
 8004124:	d05c      	beq.n	80041e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	2b02      	cmp	r3, #2
 800412c:	d141      	bne.n	80041b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800412e:	4b31      	ldr	r3, [pc, #196]	@ (80041f4 <HAL_RCC_OscConfig+0x478>)
 8004130:	2200      	movs	r2, #0
 8004132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004134:	f7fe f9b8 	bl	80024a8 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800413c:	f7fe f9b4 	bl	80024a8 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e087      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800414e:	4b27      	ldr	r3, [pc, #156]	@ (80041ec <HAL_RCC_OscConfig+0x470>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f0      	bne.n	800413c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69da      	ldr	r2, [r3, #28]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004168:	019b      	lsls	r3, r3, #6
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004170:	085b      	lsrs	r3, r3, #1
 8004172:	3b01      	subs	r3, #1
 8004174:	041b      	lsls	r3, r3, #16
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417c:	061b      	lsls	r3, r3, #24
 800417e:	491b      	ldr	r1, [pc, #108]	@ (80041ec <HAL_RCC_OscConfig+0x470>)
 8004180:	4313      	orrs	r3, r2
 8004182:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004184:	4b1b      	ldr	r3, [pc, #108]	@ (80041f4 <HAL_RCC_OscConfig+0x478>)
 8004186:	2201      	movs	r2, #1
 8004188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418a:	f7fe f98d 	bl	80024a8 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004192:	f7fe f989 	bl	80024a8 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e05c      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a4:	4b11      	ldr	r3, [pc, #68]	@ (80041ec <HAL_RCC_OscConfig+0x470>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0f0      	beq.n	8004192 <HAL_RCC_OscConfig+0x416>
 80041b0:	e054      	b.n	800425c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b2:	4b10      	ldr	r3, [pc, #64]	@ (80041f4 <HAL_RCC_OscConfig+0x478>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b8:	f7fe f976 	bl	80024a8 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041c0:	f7fe f972 	bl	80024a8 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e045      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041d2:	4b06      	ldr	r3, [pc, #24]	@ (80041ec <HAL_RCC_OscConfig+0x470>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f0      	bne.n	80041c0 <HAL_RCC_OscConfig+0x444>
 80041de:	e03d      	b.n	800425c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d107      	bne.n	80041f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e038      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
 80041ec:	40023800 	.word	0x40023800
 80041f0:	40007000 	.word	0x40007000
 80041f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004268 <HAL_RCC_OscConfig+0x4ec>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d028      	beq.n	8004258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004210:	429a      	cmp	r2, r3
 8004212:	d121      	bne.n	8004258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800421e:	429a      	cmp	r2, r3
 8004220:	d11a      	bne.n	8004258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004228:	4013      	ands	r3, r2
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800422e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004230:	4293      	cmp	r3, r2
 8004232:	d111      	bne.n	8004258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423e:	085b      	lsrs	r3, r3, #1
 8004240:	3b01      	subs	r3, #1
 8004242:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004244:	429a      	cmp	r2, r3
 8004246:	d107      	bne.n	8004258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004252:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004254:	429a      	cmp	r2, r3
 8004256:	d001      	beq.n	800425c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e000      	b.n	800425e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	40023800 	.word	0x40023800

0800426c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e0cc      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004280:	4b68      	ldr	r3, [pc, #416]	@ (8004424 <HAL_RCC_ClockConfig+0x1b8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d90c      	bls.n	80042a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800428e:	4b65      	ldr	r3, [pc, #404]	@ (8004424 <HAL_RCC_ClockConfig+0x1b8>)
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004296:	4b63      	ldr	r3, [pc, #396]	@ (8004424 <HAL_RCC_ClockConfig+0x1b8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d001      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e0b8      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d020      	beq.n	80042f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d005      	beq.n	80042cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042c0:	4b59      	ldr	r3, [pc, #356]	@ (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	4a58      	ldr	r2, [pc, #352]	@ (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80042c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80042ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0308 	and.w	r3, r3, #8
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d005      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042d8:	4b53      	ldr	r3, [pc, #332]	@ (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	4a52      	ldr	r2, [pc, #328]	@ (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80042de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80042e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042e4:	4b50      	ldr	r3, [pc, #320]	@ (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	494d      	ldr	r1, [pc, #308]	@ (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d044      	beq.n	800438c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d107      	bne.n	800431a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800430a:	4b47      	ldr	r3, [pc, #284]	@ (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d119      	bne.n	800434a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e07f      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2b02      	cmp	r3, #2
 8004320:	d003      	beq.n	800432a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004326:	2b03      	cmp	r3, #3
 8004328:	d107      	bne.n	800433a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800432a:	4b3f      	ldr	r3, [pc, #252]	@ (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d109      	bne.n	800434a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e06f      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800433a:	4b3b      	ldr	r3, [pc, #236]	@ (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e067      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800434a:	4b37      	ldr	r3, [pc, #220]	@ (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f023 0203 	bic.w	r2, r3, #3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	4934      	ldr	r1, [pc, #208]	@ (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 8004358:	4313      	orrs	r3, r2
 800435a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800435c:	f7fe f8a4 	bl	80024a8 <HAL_GetTick>
 8004360:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004362:	e00a      	b.n	800437a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004364:	f7fe f8a0 	bl	80024a8 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004372:	4293      	cmp	r3, r2
 8004374:	d901      	bls.n	800437a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e04f      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800437a:	4b2b      	ldr	r3, [pc, #172]	@ (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 020c 	and.w	r2, r3, #12
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	429a      	cmp	r2, r3
 800438a:	d1eb      	bne.n	8004364 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800438c:	4b25      	ldr	r3, [pc, #148]	@ (8004424 <HAL_RCC_ClockConfig+0x1b8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d20c      	bcs.n	80043b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800439a:	4b22      	ldr	r3, [pc, #136]	@ (8004424 <HAL_RCC_ClockConfig+0x1b8>)
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043a2:	4b20      	ldr	r3, [pc, #128]	@ (8004424 <HAL_RCC_ClockConfig+0x1b8>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d001      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e032      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d008      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043c0:	4b19      	ldr	r3, [pc, #100]	@ (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	4916      	ldr	r1, [pc, #88]	@ (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0308 	and.w	r3, r3, #8
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d009      	beq.n	80043f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043de:	4b12      	ldr	r3, [pc, #72]	@ (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	490e      	ldr	r1, [pc, #56]	@ (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043f2:	f000 f821 	bl	8004438 <HAL_RCC_GetSysClockFreq>
 80043f6:	4602      	mov	r2, r0
 80043f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	091b      	lsrs	r3, r3, #4
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	490a      	ldr	r1, [pc, #40]	@ (800442c <HAL_RCC_ClockConfig+0x1c0>)
 8004404:	5ccb      	ldrb	r3, [r1, r3]
 8004406:	fa22 f303 	lsr.w	r3, r2, r3
 800440a:	4a09      	ldr	r2, [pc, #36]	@ (8004430 <HAL_RCC_ClockConfig+0x1c4>)
 800440c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800440e:	4b09      	ldr	r3, [pc, #36]	@ (8004434 <HAL_RCC_ClockConfig+0x1c8>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f7fe f804 	bl	8002420 <HAL_InitTick>

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	40023c00 	.word	0x40023c00
 8004428:	40023800 	.word	0x40023800
 800442c:	08007e84 	.word	0x08007e84
 8004430:	20000008 	.word	0x20000008
 8004434:	2000000c 	.word	0x2000000c

08004438 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800443c:	b094      	sub	sp, #80	@ 0x50
 800443e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	647b      	str	r3, [r7, #68]	@ 0x44
 8004444:	2300      	movs	r3, #0
 8004446:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004448:	2300      	movs	r3, #0
 800444a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004450:	4b79      	ldr	r3, [pc, #484]	@ (8004638 <HAL_RCC_GetSysClockFreq+0x200>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f003 030c 	and.w	r3, r3, #12
 8004458:	2b08      	cmp	r3, #8
 800445a:	d00d      	beq.n	8004478 <HAL_RCC_GetSysClockFreq+0x40>
 800445c:	2b08      	cmp	r3, #8
 800445e:	f200 80e1 	bhi.w	8004624 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <HAL_RCC_GetSysClockFreq+0x34>
 8004466:	2b04      	cmp	r3, #4
 8004468:	d003      	beq.n	8004472 <HAL_RCC_GetSysClockFreq+0x3a>
 800446a:	e0db      	b.n	8004624 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800446c:	4b73      	ldr	r3, [pc, #460]	@ (800463c <HAL_RCC_GetSysClockFreq+0x204>)
 800446e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004470:	e0db      	b.n	800462a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004472:	4b73      	ldr	r3, [pc, #460]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x208>)
 8004474:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004476:	e0d8      	b.n	800462a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004478:	4b6f      	ldr	r3, [pc, #444]	@ (8004638 <HAL_RCC_GetSysClockFreq+0x200>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004480:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004482:	4b6d      	ldr	r3, [pc, #436]	@ (8004638 <HAL_RCC_GetSysClockFreq+0x200>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d063      	beq.n	8004556 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800448e:	4b6a      	ldr	r3, [pc, #424]	@ (8004638 <HAL_RCC_GetSysClockFreq+0x200>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	099b      	lsrs	r3, r3, #6
 8004494:	2200      	movs	r2, #0
 8004496:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004498:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800449a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800449c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80044a2:	2300      	movs	r3, #0
 80044a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80044a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80044aa:	4622      	mov	r2, r4
 80044ac:	462b      	mov	r3, r5
 80044ae:	f04f 0000 	mov.w	r0, #0
 80044b2:	f04f 0100 	mov.w	r1, #0
 80044b6:	0159      	lsls	r1, r3, #5
 80044b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044bc:	0150      	lsls	r0, r2, #5
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	4621      	mov	r1, r4
 80044c4:	1a51      	subs	r1, r2, r1
 80044c6:	6139      	str	r1, [r7, #16]
 80044c8:	4629      	mov	r1, r5
 80044ca:	eb63 0301 	sbc.w	r3, r3, r1
 80044ce:	617b      	str	r3, [r7, #20]
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044dc:	4659      	mov	r1, fp
 80044de:	018b      	lsls	r3, r1, #6
 80044e0:	4651      	mov	r1, sl
 80044e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044e6:	4651      	mov	r1, sl
 80044e8:	018a      	lsls	r2, r1, #6
 80044ea:	4651      	mov	r1, sl
 80044ec:	ebb2 0801 	subs.w	r8, r2, r1
 80044f0:	4659      	mov	r1, fp
 80044f2:	eb63 0901 	sbc.w	r9, r3, r1
 80044f6:	f04f 0200 	mov.w	r2, #0
 80044fa:	f04f 0300 	mov.w	r3, #0
 80044fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004502:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004506:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800450a:	4690      	mov	r8, r2
 800450c:	4699      	mov	r9, r3
 800450e:	4623      	mov	r3, r4
 8004510:	eb18 0303 	adds.w	r3, r8, r3
 8004514:	60bb      	str	r3, [r7, #8]
 8004516:	462b      	mov	r3, r5
 8004518:	eb49 0303 	adc.w	r3, r9, r3
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	f04f 0200 	mov.w	r2, #0
 8004522:	f04f 0300 	mov.w	r3, #0
 8004526:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800452a:	4629      	mov	r1, r5
 800452c:	024b      	lsls	r3, r1, #9
 800452e:	4621      	mov	r1, r4
 8004530:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004534:	4621      	mov	r1, r4
 8004536:	024a      	lsls	r2, r1, #9
 8004538:	4610      	mov	r0, r2
 800453a:	4619      	mov	r1, r3
 800453c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800453e:	2200      	movs	r2, #0
 8004540:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004542:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004544:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004548:	f7fc f876 	bl	8000638 <__aeabi_uldivmod>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4613      	mov	r3, r2
 8004552:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004554:	e058      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004556:	4b38      	ldr	r3, [pc, #224]	@ (8004638 <HAL_RCC_GetSysClockFreq+0x200>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	099b      	lsrs	r3, r3, #6
 800455c:	2200      	movs	r2, #0
 800455e:	4618      	mov	r0, r3
 8004560:	4611      	mov	r1, r2
 8004562:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004566:	623b      	str	r3, [r7, #32]
 8004568:	2300      	movs	r3, #0
 800456a:	627b      	str	r3, [r7, #36]	@ 0x24
 800456c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004570:	4642      	mov	r2, r8
 8004572:	464b      	mov	r3, r9
 8004574:	f04f 0000 	mov.w	r0, #0
 8004578:	f04f 0100 	mov.w	r1, #0
 800457c:	0159      	lsls	r1, r3, #5
 800457e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004582:	0150      	lsls	r0, r2, #5
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	4641      	mov	r1, r8
 800458a:	ebb2 0a01 	subs.w	sl, r2, r1
 800458e:	4649      	mov	r1, r9
 8004590:	eb63 0b01 	sbc.w	fp, r3, r1
 8004594:	f04f 0200 	mov.w	r2, #0
 8004598:	f04f 0300 	mov.w	r3, #0
 800459c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80045a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80045a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80045a8:	ebb2 040a 	subs.w	r4, r2, sl
 80045ac:	eb63 050b 	sbc.w	r5, r3, fp
 80045b0:	f04f 0200 	mov.w	r2, #0
 80045b4:	f04f 0300 	mov.w	r3, #0
 80045b8:	00eb      	lsls	r3, r5, #3
 80045ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045be:	00e2      	lsls	r2, r4, #3
 80045c0:	4614      	mov	r4, r2
 80045c2:	461d      	mov	r5, r3
 80045c4:	4643      	mov	r3, r8
 80045c6:	18e3      	adds	r3, r4, r3
 80045c8:	603b      	str	r3, [r7, #0]
 80045ca:	464b      	mov	r3, r9
 80045cc:	eb45 0303 	adc.w	r3, r5, r3
 80045d0:	607b      	str	r3, [r7, #4]
 80045d2:	f04f 0200 	mov.w	r2, #0
 80045d6:	f04f 0300 	mov.w	r3, #0
 80045da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045de:	4629      	mov	r1, r5
 80045e0:	028b      	lsls	r3, r1, #10
 80045e2:	4621      	mov	r1, r4
 80045e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045e8:	4621      	mov	r1, r4
 80045ea:	028a      	lsls	r2, r1, #10
 80045ec:	4610      	mov	r0, r2
 80045ee:	4619      	mov	r1, r3
 80045f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045f2:	2200      	movs	r2, #0
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	61fa      	str	r2, [r7, #28]
 80045f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045fc:	f7fc f81c 	bl	8000638 <__aeabi_uldivmod>
 8004600:	4602      	mov	r2, r0
 8004602:	460b      	mov	r3, r1
 8004604:	4613      	mov	r3, r2
 8004606:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004608:	4b0b      	ldr	r3, [pc, #44]	@ (8004638 <HAL_RCC_GetSysClockFreq+0x200>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	0c1b      	lsrs	r3, r3, #16
 800460e:	f003 0303 	and.w	r3, r3, #3
 8004612:	3301      	adds	r3, #1
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004618:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800461a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800461c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004620:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004622:	e002      	b.n	800462a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004624:	4b05      	ldr	r3, [pc, #20]	@ (800463c <HAL_RCC_GetSysClockFreq+0x204>)
 8004626:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004628:	bf00      	nop
    }
  }
  return sysclockfreq;
 800462a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800462c:	4618      	mov	r0, r3
 800462e:	3750      	adds	r7, #80	@ 0x50
 8004630:	46bd      	mov	sp, r7
 8004632:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004636:	bf00      	nop
 8004638:	40023800 	.word	0x40023800
 800463c:	00f42400 	.word	0x00f42400
 8004640:	007a1200 	.word	0x007a1200

08004644 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004648:	4b03      	ldr	r3, [pc, #12]	@ (8004658 <HAL_RCC_GetHCLKFreq+0x14>)
 800464a:	681b      	ldr	r3, [r3, #0]
}
 800464c:	4618      	mov	r0, r3
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	20000008 	.word	0x20000008

0800465c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004660:	f7ff fff0 	bl	8004644 <HAL_RCC_GetHCLKFreq>
 8004664:	4602      	mov	r2, r0
 8004666:	4b05      	ldr	r3, [pc, #20]	@ (800467c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	0a9b      	lsrs	r3, r3, #10
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	4903      	ldr	r1, [pc, #12]	@ (8004680 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004672:	5ccb      	ldrb	r3, [r1, r3]
 8004674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004678:	4618      	mov	r0, r3
 800467a:	bd80      	pop	{r7, pc}
 800467c:	40023800 	.word	0x40023800
 8004680:	08007e94 	.word	0x08007e94

08004684 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004688:	f7ff ffdc 	bl	8004644 <HAL_RCC_GetHCLKFreq>
 800468c:	4602      	mov	r2, r0
 800468e:	4b05      	ldr	r3, [pc, #20]	@ (80046a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	0b5b      	lsrs	r3, r3, #13
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	4903      	ldr	r1, [pc, #12]	@ (80046a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800469a:	5ccb      	ldrb	r3, [r1, r3]
 800469c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40023800 	.word	0x40023800
 80046a8:	08007e94 	.word	0x08007e94

080046ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e07b      	b.n	80047b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d108      	bne.n	80046d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046ce:	d009      	beq.n	80046e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	61da      	str	r2, [r3, #28]
 80046d6:	e005      	b.n	80046e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d106      	bne.n	8004704 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7fd fa36 	bl	8001b70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800471a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800472c:	431a      	orrs	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	431a      	orrs	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004754:	431a      	orrs	r2, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800475e:	431a      	orrs	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004768:	ea42 0103 	orr.w	r1, r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004770:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	0c1b      	lsrs	r3, r3, #16
 8004782:	f003 0104 	and.w	r1, r3, #4
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478a:	f003 0210 	and.w	r2, r3, #16
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69da      	ldr	r2, [r3, #28]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b088      	sub	sp, #32
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	60f8      	str	r0, [r7, #12]
 80047c6:	60b9      	str	r1, [r7, #8]
 80047c8:	603b      	str	r3, [r7, #0]
 80047ca:	4613      	mov	r3, r2
 80047cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d101      	bne.n	80047e0 <HAL_SPI_Transmit+0x22>
 80047dc:	2302      	movs	r3, #2
 80047de:	e126      	b.n	8004a2e <HAL_SPI_Transmit+0x270>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047e8:	f7fd fe5e 	bl	80024a8 <HAL_GetTick>
 80047ec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80047ee:	88fb      	ldrh	r3, [r7, #6]
 80047f0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d002      	beq.n	8004804 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80047fe:	2302      	movs	r3, #2
 8004800:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004802:	e10b      	b.n	8004a1c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d002      	beq.n	8004810 <HAL_SPI_Transmit+0x52>
 800480a:	88fb      	ldrh	r3, [r7, #6]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d102      	bne.n	8004816 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004814:	e102      	b.n	8004a1c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2203      	movs	r2, #3
 800481a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	88fa      	ldrh	r2, [r7, #6]
 800482e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	88fa      	ldrh	r2, [r7, #6]
 8004834:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800485c:	d10f      	bne.n	800487e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800486c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800487c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004888:	2b40      	cmp	r3, #64	@ 0x40
 800488a:	d007      	beq.n	800489c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800489a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048a4:	d14b      	bne.n	800493e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d002      	beq.n	80048b4 <HAL_SPI_Transmit+0xf6>
 80048ae:	8afb      	ldrh	r3, [r7, #22]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d13e      	bne.n	8004932 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b8:	881a      	ldrh	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c4:	1c9a      	adds	r2, r3, #2
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048d8:	e02b      	b.n	8004932 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d112      	bne.n	800490e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ec:	881a      	ldrh	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f8:	1c9a      	adds	r2, r3, #2
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004902:	b29b      	uxth	r3, r3
 8004904:	3b01      	subs	r3, #1
 8004906:	b29a      	uxth	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800490c:	e011      	b.n	8004932 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800490e:	f7fd fdcb 	bl	80024a8 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d803      	bhi.n	8004926 <HAL_SPI_Transmit+0x168>
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004924:	d102      	bne.n	800492c <HAL_SPI_Transmit+0x16e>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d102      	bne.n	8004932 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004930:	e074      	b.n	8004a1c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004936:	b29b      	uxth	r3, r3
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1ce      	bne.n	80048da <HAL_SPI_Transmit+0x11c>
 800493c:	e04c      	b.n	80049d8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <HAL_SPI_Transmit+0x18e>
 8004946:	8afb      	ldrh	r3, [r7, #22]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d140      	bne.n	80049ce <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	330c      	adds	r3, #12
 8004956:	7812      	ldrb	r2, [r2, #0]
 8004958:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800495e:	1c5a      	adds	r2, r3, #1
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004968:	b29b      	uxth	r3, r3
 800496a:	3b01      	subs	r3, #1
 800496c:	b29a      	uxth	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004972:	e02c      	b.n	80049ce <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b02      	cmp	r3, #2
 8004980:	d113      	bne.n	80049aa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	330c      	adds	r3, #12
 800498c:	7812      	ldrb	r2, [r2, #0]
 800498e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004994:	1c5a      	adds	r2, r3, #1
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800499e:	b29b      	uxth	r3, r3
 80049a0:	3b01      	subs	r3, #1
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80049a8:	e011      	b.n	80049ce <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049aa:	f7fd fd7d 	bl	80024a8 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d803      	bhi.n	80049c2 <HAL_SPI_Transmit+0x204>
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c0:	d102      	bne.n	80049c8 <HAL_SPI_Transmit+0x20a>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d102      	bne.n	80049ce <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80049cc:	e026      	b.n	8004a1c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1cd      	bne.n	8004974 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	6839      	ldr	r1, [r7, #0]
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 fbcb 	bl	8005178 <SPI_EndRxTxTransaction>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d002      	beq.n	80049ee <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2220      	movs	r2, #32
 80049ec:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10a      	bne.n	8004a0c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049f6:	2300      	movs	r3, #0
 80049f8:	613b      	str	r3, [r7, #16]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	613b      	str	r3, [r7, #16]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d002      	beq.n	8004a1a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	77fb      	strb	r3, [r7, #31]
 8004a18:	e000      	b.n	8004a1c <HAL_SPI_Transmit+0x25e>
  }

error:
 8004a1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004a2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3720      	adds	r7, #32
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b088      	sub	sp, #32
 8004a3a:	af02      	add	r7, sp, #8
 8004a3c:	60f8      	str	r0, [r7, #12]
 8004a3e:	60b9      	str	r1, [r7, #8]
 8004a40:	603b      	str	r3, [r7, #0]
 8004a42:	4613      	mov	r3, r2
 8004a44:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a46:	2300      	movs	r3, #0
 8004a48:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a52:	d112      	bne.n	8004a7a <HAL_SPI_Receive+0x44>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10e      	bne.n	8004a7a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2204      	movs	r2, #4
 8004a60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a64:	88fa      	ldrh	r2, [r7, #6]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	68b9      	ldr	r1, [r7, #8]
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 f8f1 	bl	8004c58 <HAL_SPI_TransmitReceive>
 8004a76:	4603      	mov	r3, r0
 8004a78:	e0ea      	b.n	8004c50 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d101      	bne.n	8004a88 <HAL_SPI_Receive+0x52>
 8004a84:	2302      	movs	r3, #2
 8004a86:	e0e3      	b.n	8004c50 <HAL_SPI_Receive+0x21a>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a90:	f7fd fd0a 	bl	80024a8 <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d002      	beq.n	8004aa8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004aa6:	e0ca      	b.n	8004c3e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d002      	beq.n	8004ab4 <HAL_SPI_Receive+0x7e>
 8004aae:	88fb      	ldrh	r3, [r7, #6]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d102      	bne.n	8004aba <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ab8:	e0c1      	b.n	8004c3e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2204      	movs	r2, #4
 8004abe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	88fa      	ldrh	r2, [r7, #6]
 8004ad2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	88fa      	ldrh	r2, [r7, #6]
 8004ad8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b00:	d10f      	bne.n	8004b22 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004b20:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b2c:	2b40      	cmp	r3, #64	@ 0x40
 8004b2e:	d007      	beq.n	8004b40 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b3e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d162      	bne.n	8004c0e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b48:	e02e      	b.n	8004ba8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d115      	bne.n	8004b84 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f103 020c 	add.w	r2, r3, #12
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b64:	7812      	ldrb	r2, [r2, #0]
 8004b66:	b2d2      	uxtb	r2, r2
 8004b68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b6e:	1c5a      	adds	r2, r3, #1
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b82:	e011      	b.n	8004ba8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b84:	f7fd fc90 	bl	80024a8 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d803      	bhi.n	8004b9c <HAL_SPI_Receive+0x166>
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9a:	d102      	bne.n	8004ba2 <HAL_SPI_Receive+0x16c>
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d102      	bne.n	8004ba8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004ba6:	e04a      	b.n	8004c3e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1cb      	bne.n	8004b4a <HAL_SPI_Receive+0x114>
 8004bb2:	e031      	b.n	8004c18 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d113      	bne.n	8004bea <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68da      	ldr	r2, [r3, #12]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bcc:	b292      	uxth	r2, r2
 8004bce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd4:	1c9a      	adds	r2, r3, #2
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	3b01      	subs	r3, #1
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004be8:	e011      	b.n	8004c0e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bea:	f7fd fc5d 	bl	80024a8 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d803      	bhi.n	8004c02 <HAL_SPI_Receive+0x1cc>
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c00:	d102      	bne.n	8004c08 <HAL_SPI_Receive+0x1d2>
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d102      	bne.n	8004c0e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c0c:	e017      	b.n	8004c3e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1cd      	bne.n	8004bb4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	6839      	ldr	r1, [r7, #0]
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f000 fa45 	bl	80050ac <SPI_EndRxTransaction>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d002      	beq.n	8004c2e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d002      	beq.n	8004c3c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	75fb      	strb	r3, [r7, #23]
 8004c3a:	e000      	b.n	8004c3e <HAL_SPI_Receive+0x208>
  }

error :
 8004c3c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3718      	adds	r7, #24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b08c      	sub	sp, #48	@ 0x30
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
 8004c64:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c66:	2301      	movs	r3, #1
 8004c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d101      	bne.n	8004c7e <HAL_SPI_TransmitReceive+0x26>
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	e18a      	b.n	8004f94 <HAL_SPI_TransmitReceive+0x33c>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c86:	f7fd fc0f 	bl	80024a8 <HAL_GetTick>
 8004c8a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c9c:	887b      	ldrh	r3, [r7, #2]
 8004c9e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ca0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d00f      	beq.n	8004cc8 <HAL_SPI_TransmitReceive+0x70>
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cae:	d107      	bne.n	8004cc0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d103      	bne.n	8004cc0 <HAL_SPI_TransmitReceive+0x68>
 8004cb8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004cbc:	2b04      	cmp	r3, #4
 8004cbe:	d003      	beq.n	8004cc8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004cc6:	e15b      	b.n	8004f80 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d005      	beq.n	8004cda <HAL_SPI_TransmitReceive+0x82>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <HAL_SPI_TransmitReceive+0x82>
 8004cd4:	887b      	ldrh	r3, [r7, #2]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d103      	bne.n	8004ce2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004ce0:	e14e      	b.n	8004f80 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	d003      	beq.n	8004cf6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2205      	movs	r2, #5
 8004cf2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	887a      	ldrh	r2, [r7, #2]
 8004d06:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	887a      	ldrh	r2, [r7, #2]
 8004d0c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	887a      	ldrh	r2, [r7, #2]
 8004d18:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	887a      	ldrh	r2, [r7, #2]
 8004d1e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d36:	2b40      	cmp	r3, #64	@ 0x40
 8004d38:	d007      	beq.n	8004d4a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d52:	d178      	bne.n	8004e46 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d002      	beq.n	8004d62 <HAL_SPI_TransmitReceive+0x10a>
 8004d5c:	8b7b      	ldrh	r3, [r7, #26]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d166      	bne.n	8004e30 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d66:	881a      	ldrh	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d72:	1c9a      	adds	r2, r3, #2
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d86:	e053      	b.n	8004e30 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d11b      	bne.n	8004dce <HAL_SPI_TransmitReceive+0x176>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d016      	beq.n	8004dce <HAL_SPI_TransmitReceive+0x176>
 8004da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d113      	bne.n	8004dce <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004daa:	881a      	ldrh	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db6:	1c9a      	adds	r2, r3, #2
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d119      	bne.n	8004e10 <HAL_SPI_TransmitReceive+0x1b8>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d014      	beq.n	8004e10 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68da      	ldr	r2, [r3, #12]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df0:	b292      	uxth	r2, r2
 8004df2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df8:	1c9a      	adds	r2, r3, #2
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e10:	f7fd fb4a 	bl	80024a8 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d807      	bhi.n	8004e30 <HAL_SPI_TransmitReceive+0x1d8>
 8004e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e26:	d003      	beq.n	8004e30 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8004e2e:	e0a7      	b.n	8004f80 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1a6      	bne.n	8004d88 <HAL_SPI_TransmitReceive+0x130>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1a1      	bne.n	8004d88 <HAL_SPI_TransmitReceive+0x130>
 8004e44:	e07c      	b.n	8004f40 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <HAL_SPI_TransmitReceive+0x1fc>
 8004e4e:	8b7b      	ldrh	r3, [r7, #26]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d16b      	bne.n	8004f2c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	330c      	adds	r3, #12
 8004e5e:	7812      	ldrb	r2, [r2, #0]
 8004e60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e66:	1c5a      	adds	r2, r3, #1
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	3b01      	subs	r3, #1
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e7a:	e057      	b.n	8004f2c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d11c      	bne.n	8004ec4 <HAL_SPI_TransmitReceive+0x26c>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d017      	beq.n	8004ec4 <HAL_SPI_TransmitReceive+0x26c>
 8004e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d114      	bne.n	8004ec4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	330c      	adds	r3, #12
 8004ea4:	7812      	ldrb	r2, [r2, #0]
 8004ea6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eac:	1c5a      	adds	r2, r3, #1
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d119      	bne.n	8004f06 <HAL_SPI_TransmitReceive+0x2ae>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d014      	beq.n	8004f06 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee6:	b2d2      	uxtb	r2, r2
 8004ee8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eee:	1c5a      	adds	r2, r3, #1
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	3b01      	subs	r3, #1
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f02:	2301      	movs	r3, #1
 8004f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f06:	f7fd facf 	bl	80024a8 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d803      	bhi.n	8004f1e <HAL_SPI_TransmitReceive+0x2c6>
 8004f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1c:	d102      	bne.n	8004f24 <HAL_SPI_TransmitReceive+0x2cc>
 8004f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d103      	bne.n	8004f2c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8004f2a:	e029      	b.n	8004f80 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1a2      	bne.n	8004e7c <HAL_SPI_TransmitReceive+0x224>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d19d      	bne.n	8004e7c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f42:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f000 f917 	bl	8005178 <SPI_EndRxTxTransaction>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d006      	beq.n	8004f5e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004f5c:	e010      	b.n	8004f80 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10b      	bne.n	8004f7e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f66:	2300      	movs	r3, #0
 8004f68:	617b      	str	r3, [r7, #20]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	617b      	str	r3, [r7, #20]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	617b      	str	r3, [r7, #20]
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	e000      	b.n	8004f80 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004f7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004f90:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3730      	adds	r7, #48	@ 0x30
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b088      	sub	sp, #32
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	603b      	str	r3, [r7, #0]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004fac:	f7fd fa7c 	bl	80024a8 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb4:	1a9b      	subs	r3, r3, r2
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	4413      	add	r3, r2
 8004fba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004fbc:	f7fd fa74 	bl	80024a8 <HAL_GetTick>
 8004fc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004fc2:	4b39      	ldr	r3, [pc, #228]	@ (80050a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	015b      	lsls	r3, r3, #5
 8004fc8:	0d1b      	lsrs	r3, r3, #20
 8004fca:	69fa      	ldr	r2, [r7, #28]
 8004fcc:	fb02 f303 	mul.w	r3, r2, r3
 8004fd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fd2:	e054      	b.n	800507e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fda:	d050      	beq.n	800507e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fdc:	f7fd fa64 	bl	80024a8 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	69fa      	ldr	r2, [r7, #28]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d902      	bls.n	8004ff2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d13d      	bne.n	800506e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005000:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800500a:	d111      	bne.n	8005030 <SPI_WaitFlagStateUntilTimeout+0x94>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005014:	d004      	beq.n	8005020 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800501e:	d107      	bne.n	8005030 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800502e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005034:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005038:	d10f      	bne.n	800505a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005058:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e017      	b.n	800509e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	3b01      	subs	r3, #1
 800507c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	4013      	ands	r3, r2
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	429a      	cmp	r2, r3
 800508c:	bf0c      	ite	eq
 800508e:	2301      	moveq	r3, #1
 8005090:	2300      	movne	r3, #0
 8005092:	b2db      	uxtb	r3, r3
 8005094:	461a      	mov	r2, r3
 8005096:	79fb      	ldrb	r3, [r7, #7]
 8005098:	429a      	cmp	r2, r3
 800509a:	d19b      	bne.n	8004fd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3720      	adds	r7, #32
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	20000008 	.word	0x20000008

080050ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af02      	add	r7, sp, #8
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050c0:	d111      	bne.n	80050e6 <SPI_EndRxTransaction+0x3a>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050ca:	d004      	beq.n	80050d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050d4:	d107      	bne.n	80050e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050ee:	d12a      	bne.n	8005146 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050f8:	d012      	beq.n	8005120 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2200      	movs	r2, #0
 8005102:	2180      	movs	r1, #128	@ 0x80
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f7ff ff49 	bl	8004f9c <SPI_WaitFlagStateUntilTimeout>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d02d      	beq.n	800516c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005114:	f043 0220 	orr.w	r2, r3, #32
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e026      	b.n	800516e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	9300      	str	r3, [sp, #0]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2200      	movs	r2, #0
 8005128:	2101      	movs	r1, #1
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f7ff ff36 	bl	8004f9c <SPI_WaitFlagStateUntilTimeout>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d01a      	beq.n	800516c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800513a:	f043 0220 	orr.w	r2, r3, #32
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e013      	b.n	800516e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2200      	movs	r2, #0
 800514e:	2101      	movs	r1, #1
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f7ff ff23 	bl	8004f9c <SPI_WaitFlagStateUntilTimeout>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d007      	beq.n	800516c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005160:	f043 0220 	orr.w	r2, r3, #32
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e000      	b.n	800516e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
	...

08005178 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b088      	sub	sp, #32
 800517c:	af02      	add	r7, sp, #8
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005184:	4b1b      	ldr	r3, [pc, #108]	@ (80051f4 <SPI_EndRxTxTransaction+0x7c>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a1b      	ldr	r2, [pc, #108]	@ (80051f8 <SPI_EndRxTxTransaction+0x80>)
 800518a:	fba2 2303 	umull	r2, r3, r2, r3
 800518e:	0d5b      	lsrs	r3, r3, #21
 8005190:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005194:	fb02 f303 	mul.w	r3, r2, r3
 8005198:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051a2:	d112      	bne.n	80051ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2200      	movs	r2, #0
 80051ac:	2180      	movs	r1, #128	@ 0x80
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f7ff fef4 	bl	8004f9c <SPI_WaitFlagStateUntilTimeout>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d016      	beq.n	80051e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051be:	f043 0220 	orr.w	r2, r3, #32
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e00f      	b.n	80051ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00a      	beq.n	80051e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	3b01      	subs	r3, #1
 80051d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051e0:	2b80      	cmp	r3, #128	@ 0x80
 80051e2:	d0f2      	beq.n	80051ca <SPI_EndRxTxTransaction+0x52>
 80051e4:	e000      	b.n	80051e8 <SPI_EndRxTxTransaction+0x70>
        break;
 80051e6:	bf00      	nop
  }

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3718      	adds	r7, #24
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	20000008 	.word	0x20000008
 80051f8:	165e9f81 	.word	0x165e9f81

080051fc <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e034      	b.n	800527c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d106      	bne.n	800522c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f7fb fdfa 	bl	8000e20 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	3308      	adds	r3, #8
 8005234:	4619      	mov	r1, r3
 8005236:	4610      	mov	r0, r2
 8005238:	f002 f84e 	bl	80072d8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6818      	ldr	r0, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	461a      	mov	r2, r3
 8005246:	68b9      	ldr	r1, [r7, #8]
 8005248:	f002 f898 	bl	800737c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6858      	ldr	r0, [r3, #4]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005258:	6879      	ldr	r1, [r7, #4]
 800525a:	f002 f8cd 	bl	80073f8 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	6892      	ldr	r2, [r2, #8]
 8005266:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	6892      	ldr	r2, [r2, #8]
 8005272:	f041 0101 	orr.w	r1, r1, #1
 8005276:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e041      	b.n	800531a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d106      	bne.n	80052b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7fc fe5a 	bl	8001f64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	3304      	adds	r3, #4
 80052c0:	4619      	mov	r1, r3
 80052c2:	4610      	mov	r0, r2
 80052c4:	f000 fc1a 	bl	8005afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
	...

08005324 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b01      	cmp	r3, #1
 8005336:	d001      	beq.n	800533c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e046      	b.n	80053ca <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a23      	ldr	r2, [pc, #140]	@ (80053d8 <HAL_TIM_Base_Start+0xb4>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d022      	beq.n	8005394 <HAL_TIM_Base_Start+0x70>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005356:	d01d      	beq.n	8005394 <HAL_TIM_Base_Start+0x70>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a1f      	ldr	r2, [pc, #124]	@ (80053dc <HAL_TIM_Base_Start+0xb8>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d018      	beq.n	8005394 <HAL_TIM_Base_Start+0x70>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a1e      	ldr	r2, [pc, #120]	@ (80053e0 <HAL_TIM_Base_Start+0xbc>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d013      	beq.n	8005394 <HAL_TIM_Base_Start+0x70>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a1c      	ldr	r2, [pc, #112]	@ (80053e4 <HAL_TIM_Base_Start+0xc0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d00e      	beq.n	8005394 <HAL_TIM_Base_Start+0x70>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a1b      	ldr	r2, [pc, #108]	@ (80053e8 <HAL_TIM_Base_Start+0xc4>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d009      	beq.n	8005394 <HAL_TIM_Base_Start+0x70>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a19      	ldr	r2, [pc, #100]	@ (80053ec <HAL_TIM_Base_Start+0xc8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d004      	beq.n	8005394 <HAL_TIM_Base_Start+0x70>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a18      	ldr	r2, [pc, #96]	@ (80053f0 <HAL_TIM_Base_Start+0xcc>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d111      	bne.n	80053b8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f003 0307 	and.w	r3, r3, #7
 800539e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2b06      	cmp	r3, #6
 80053a4:	d010      	beq.n	80053c8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f042 0201 	orr.w	r2, r2, #1
 80053b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053b6:	e007      	b.n	80053c8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 0201 	orr.w	r2, r2, #1
 80053c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40010000 	.word	0x40010000
 80053dc:	40000400 	.word	0x40000400
 80053e0:	40000800 	.word	0x40000800
 80053e4:	40000c00 	.word	0x40000c00
 80053e8:	40010400 	.word	0x40010400
 80053ec:	40014000 	.word	0x40014000
 80053f0:	40001800 	.word	0x40001800

080053f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b01      	cmp	r3, #1
 8005406:	d001      	beq.n	800540c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e04e      	b.n	80054aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2202      	movs	r2, #2
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0201 	orr.w	r2, r2, #1
 8005422:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a23      	ldr	r2, [pc, #140]	@ (80054b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d022      	beq.n	8005474 <HAL_TIM_Base_Start_IT+0x80>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005436:	d01d      	beq.n	8005474 <HAL_TIM_Base_Start_IT+0x80>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a1f      	ldr	r2, [pc, #124]	@ (80054bc <HAL_TIM_Base_Start_IT+0xc8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d018      	beq.n	8005474 <HAL_TIM_Base_Start_IT+0x80>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a1e      	ldr	r2, [pc, #120]	@ (80054c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d013      	beq.n	8005474 <HAL_TIM_Base_Start_IT+0x80>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a1c      	ldr	r2, [pc, #112]	@ (80054c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d00e      	beq.n	8005474 <HAL_TIM_Base_Start_IT+0x80>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a1b      	ldr	r2, [pc, #108]	@ (80054c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d009      	beq.n	8005474 <HAL_TIM_Base_Start_IT+0x80>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a19      	ldr	r2, [pc, #100]	@ (80054cc <HAL_TIM_Base_Start_IT+0xd8>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d004      	beq.n	8005474 <HAL_TIM_Base_Start_IT+0x80>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a18      	ldr	r2, [pc, #96]	@ (80054d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d111      	bne.n	8005498 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f003 0307 	and.w	r3, r3, #7
 800547e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2b06      	cmp	r3, #6
 8005484:	d010      	beq.n	80054a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f042 0201 	orr.w	r2, r2, #1
 8005494:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005496:	e007      	b.n	80054a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f042 0201 	orr.w	r2, r2, #1
 80054a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	40010000 	.word	0x40010000
 80054bc:	40000400 	.word	0x40000400
 80054c0:	40000800 	.word	0x40000800
 80054c4:	40000c00 	.word	0x40000c00
 80054c8:	40010400 	.word	0x40010400
 80054cc:	40014000 	.word	0x40014000
 80054d0:	40001800 	.word	0x40001800

080054d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e041      	b.n	800556a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d106      	bne.n	8005500 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f839 	bl	8005572 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3304      	adds	r3, #4
 8005510:	4619      	mov	r1, r3
 8005512:	4610      	mov	r0, r2
 8005514:	f000 faf2 	bl	8005afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005572:	b480      	push	{r7}
 8005574:	b083      	sub	sp, #12
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800557a:	bf00      	nop
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b082      	sub	sp, #8
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	2b02      	cmp	r3, #2
 800559a:	d122      	bne.n	80055e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d11b      	bne.n	80055e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f06f 0202 	mvn.w	r2, #2
 80055b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	f003 0303 	and.w	r3, r3, #3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 fa78 	bl	8005abe <HAL_TIM_IC_CaptureCallback>
 80055ce:	e005      	b.n	80055dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 fa6a 	bl	8005aaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fa7b 	bl	8005ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b04      	cmp	r3, #4
 80055ee:	d122      	bne.n	8005636 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f003 0304 	and.w	r3, r3, #4
 80055fa:	2b04      	cmp	r3, #4
 80055fc:	d11b      	bne.n	8005636 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f06f 0204 	mvn.w	r2, #4
 8005606:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005618:	2b00      	cmp	r3, #0
 800561a:	d003      	beq.n	8005624 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 fa4e 	bl	8005abe <HAL_TIM_IC_CaptureCallback>
 8005622:	e005      	b.n	8005630 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 fa40 	bl	8005aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 fa51 	bl	8005ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	f003 0308 	and.w	r3, r3, #8
 8005640:	2b08      	cmp	r3, #8
 8005642:	d122      	bne.n	800568a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f003 0308 	and.w	r3, r3, #8
 800564e:	2b08      	cmp	r3, #8
 8005650:	d11b      	bne.n	800568a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f06f 0208 	mvn.w	r2, #8
 800565a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2204      	movs	r2, #4
 8005660:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	f003 0303 	and.w	r3, r3, #3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d003      	beq.n	8005678 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 fa24 	bl	8005abe <HAL_TIM_IC_CaptureCallback>
 8005676:	e005      	b.n	8005684 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fa16 	bl	8005aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 fa27 	bl	8005ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	f003 0310 	and.w	r3, r3, #16
 8005694:	2b10      	cmp	r3, #16
 8005696:	d122      	bne.n	80056de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	f003 0310 	and.w	r3, r3, #16
 80056a2:	2b10      	cmp	r3, #16
 80056a4:	d11b      	bne.n	80056de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f06f 0210 	mvn.w	r2, #16
 80056ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2208      	movs	r2, #8
 80056b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d003      	beq.n	80056cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f9fa 	bl	8005abe <HAL_TIM_IC_CaptureCallback>
 80056ca:	e005      	b.n	80056d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f9ec 	bl	8005aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f9fd 	bl	8005ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d10e      	bne.n	800570a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d107      	bne.n	800570a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f06f 0201 	mvn.w	r2, #1
 8005702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7fc f9d3 	bl	8001ab0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005714:	2b80      	cmp	r3, #128	@ 0x80
 8005716:	d10e      	bne.n	8005736 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005722:	2b80      	cmp	r3, #128	@ 0x80
 8005724:	d107      	bne.n	8005736 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800572e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fd53 	bl	80061dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005740:	2b40      	cmp	r3, #64	@ 0x40
 8005742:	d10e      	bne.n	8005762 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800574e:	2b40      	cmp	r3, #64	@ 0x40
 8005750:	d107      	bne.n	8005762 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800575a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 f9c2 	bl	8005ae6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	f003 0320 	and.w	r3, r3, #32
 800576c:	2b20      	cmp	r3, #32
 800576e:	d10e      	bne.n	800578e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f003 0320 	and.w	r3, r3, #32
 800577a:	2b20      	cmp	r3, #32
 800577c:	d107      	bne.n	800578e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f06f 0220 	mvn.w	r2, #32
 8005786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 fd1d 	bl	80061c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800578e:	bf00      	nop
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
	...

08005798 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057a4:	2300      	movs	r3, #0
 80057a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d101      	bne.n	80057b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057b2:	2302      	movs	r3, #2
 80057b4:	e0ae      	b.n	8005914 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b0c      	cmp	r3, #12
 80057c2:	f200 809f 	bhi.w	8005904 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80057c6:	a201      	add	r2, pc, #4	@ (adr r2, 80057cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057cc:	08005801 	.word	0x08005801
 80057d0:	08005905 	.word	0x08005905
 80057d4:	08005905 	.word	0x08005905
 80057d8:	08005905 	.word	0x08005905
 80057dc:	08005841 	.word	0x08005841
 80057e0:	08005905 	.word	0x08005905
 80057e4:	08005905 	.word	0x08005905
 80057e8:	08005905 	.word	0x08005905
 80057ec:	08005883 	.word	0x08005883
 80057f0:	08005905 	.word	0x08005905
 80057f4:	08005905 	.word	0x08005905
 80057f8:	08005905 	.word	0x08005905
 80057fc:	080058c3 	.word	0x080058c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68b9      	ldr	r1, [r7, #8]
 8005806:	4618      	mov	r0, r3
 8005808:	f000 fa18 	bl	8005c3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	699a      	ldr	r2, [r3, #24]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0208 	orr.w	r2, r2, #8
 800581a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699a      	ldr	r2, [r3, #24]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 0204 	bic.w	r2, r2, #4
 800582a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6999      	ldr	r1, [r3, #24]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	691a      	ldr	r2, [r3, #16]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	619a      	str	r2, [r3, #24]
      break;
 800583e:	e064      	b.n	800590a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68b9      	ldr	r1, [r7, #8]
 8005846:	4618      	mov	r0, r3
 8005848:	f000 fa68 	bl	8005d1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699a      	ldr	r2, [r3, #24]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800585a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	699a      	ldr	r2, [r3, #24]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800586a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6999      	ldr	r1, [r3, #24]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	021a      	lsls	r2, r3, #8
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	430a      	orrs	r2, r1
 800587e:	619a      	str	r2, [r3, #24]
      break;
 8005880:	e043      	b.n	800590a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68b9      	ldr	r1, [r7, #8]
 8005888:	4618      	mov	r0, r3
 800588a:	f000 fabd 	bl	8005e08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	69da      	ldr	r2, [r3, #28]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f042 0208 	orr.w	r2, r2, #8
 800589c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	69da      	ldr	r2, [r3, #28]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0204 	bic.w	r2, r2, #4
 80058ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69d9      	ldr	r1, [r3, #28]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	691a      	ldr	r2, [r3, #16]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	61da      	str	r2, [r3, #28]
      break;
 80058c0:	e023      	b.n	800590a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68b9      	ldr	r1, [r7, #8]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f000 fb11 	bl	8005ef0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69da      	ldr	r2, [r3, #28]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	69da      	ldr	r2, [r3, #28]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	69d9      	ldr	r1, [r3, #28]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	021a      	lsls	r2, r3, #8
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	61da      	str	r2, [r3, #28]
      break;
 8005902:	e002      	b.n	800590a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	75fb      	strb	r3, [r7, #23]
      break;
 8005908:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005912:	7dfb      	ldrb	r3, [r7, #23]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3718      	adds	r7, #24
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005926:	2300      	movs	r3, #0
 8005928:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_TIM_ConfigClockSource+0x1c>
 8005934:	2302      	movs	r3, #2
 8005936:	e0b4      	b.n	8005aa2 <HAL_TIM_ConfigClockSource+0x186>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800595e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005970:	d03e      	beq.n	80059f0 <HAL_TIM_ConfigClockSource+0xd4>
 8005972:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005976:	f200 8087 	bhi.w	8005a88 <HAL_TIM_ConfigClockSource+0x16c>
 800597a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800597e:	f000 8086 	beq.w	8005a8e <HAL_TIM_ConfigClockSource+0x172>
 8005982:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005986:	d87f      	bhi.n	8005a88 <HAL_TIM_ConfigClockSource+0x16c>
 8005988:	2b70      	cmp	r3, #112	@ 0x70
 800598a:	d01a      	beq.n	80059c2 <HAL_TIM_ConfigClockSource+0xa6>
 800598c:	2b70      	cmp	r3, #112	@ 0x70
 800598e:	d87b      	bhi.n	8005a88 <HAL_TIM_ConfigClockSource+0x16c>
 8005990:	2b60      	cmp	r3, #96	@ 0x60
 8005992:	d050      	beq.n	8005a36 <HAL_TIM_ConfigClockSource+0x11a>
 8005994:	2b60      	cmp	r3, #96	@ 0x60
 8005996:	d877      	bhi.n	8005a88 <HAL_TIM_ConfigClockSource+0x16c>
 8005998:	2b50      	cmp	r3, #80	@ 0x50
 800599a:	d03c      	beq.n	8005a16 <HAL_TIM_ConfigClockSource+0xfa>
 800599c:	2b50      	cmp	r3, #80	@ 0x50
 800599e:	d873      	bhi.n	8005a88 <HAL_TIM_ConfigClockSource+0x16c>
 80059a0:	2b40      	cmp	r3, #64	@ 0x40
 80059a2:	d058      	beq.n	8005a56 <HAL_TIM_ConfigClockSource+0x13a>
 80059a4:	2b40      	cmp	r3, #64	@ 0x40
 80059a6:	d86f      	bhi.n	8005a88 <HAL_TIM_ConfigClockSource+0x16c>
 80059a8:	2b30      	cmp	r3, #48	@ 0x30
 80059aa:	d064      	beq.n	8005a76 <HAL_TIM_ConfigClockSource+0x15a>
 80059ac:	2b30      	cmp	r3, #48	@ 0x30
 80059ae:	d86b      	bhi.n	8005a88 <HAL_TIM_ConfigClockSource+0x16c>
 80059b0:	2b20      	cmp	r3, #32
 80059b2:	d060      	beq.n	8005a76 <HAL_TIM_ConfigClockSource+0x15a>
 80059b4:	2b20      	cmp	r3, #32
 80059b6:	d867      	bhi.n	8005a88 <HAL_TIM_ConfigClockSource+0x16c>
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d05c      	beq.n	8005a76 <HAL_TIM_ConfigClockSource+0x15a>
 80059bc:	2b10      	cmp	r3, #16
 80059be:	d05a      	beq.n	8005a76 <HAL_TIM_ConfigClockSource+0x15a>
 80059c0:	e062      	b.n	8005a88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6818      	ldr	r0, [r3, #0]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	6899      	ldr	r1, [r3, #8]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	f000 fb5d 	bl	8006090 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80059e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	609a      	str	r2, [r3, #8]
      break;
 80059ee:	e04f      	b.n	8005a90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6818      	ldr	r0, [r3, #0]
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	6899      	ldr	r1, [r3, #8]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	f000 fb46 	bl	8006090 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689a      	ldr	r2, [r3, #8]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a12:	609a      	str	r2, [r3, #8]
      break;
 8005a14:	e03c      	b.n	8005a90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6818      	ldr	r0, [r3, #0]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	6859      	ldr	r1, [r3, #4]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	461a      	mov	r2, r3
 8005a24:	f000 faba 	bl	8005f9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2150      	movs	r1, #80	@ 0x50
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 fb13 	bl	800605a <TIM_ITRx_SetConfig>
      break;
 8005a34:	e02c      	b.n	8005a90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6818      	ldr	r0, [r3, #0]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	6859      	ldr	r1, [r3, #4]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	461a      	mov	r2, r3
 8005a44:	f000 fad9 	bl	8005ffa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2160      	movs	r1, #96	@ 0x60
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 fb03 	bl	800605a <TIM_ITRx_SetConfig>
      break;
 8005a54:	e01c      	b.n	8005a90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6818      	ldr	r0, [r3, #0]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	6859      	ldr	r1, [r3, #4]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	461a      	mov	r2, r3
 8005a64:	f000 fa9a 	bl	8005f9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2140      	movs	r1, #64	@ 0x40
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 faf3 	bl	800605a <TIM_ITRx_SetConfig>
      break;
 8005a74:	e00c      	b.n	8005a90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4619      	mov	r1, r3
 8005a80:	4610      	mov	r0, r2
 8005a82:	f000 faea 	bl	800605a <TIM_ITRx_SetConfig>
      break;
 8005a86:	e003      	b.n	8005a90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a8c:	e000      	b.n	8005a90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b083      	sub	sp, #12
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b083      	sub	sp, #12
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005aee:	bf00      	nop
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
	...

08005afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a40      	ldr	r2, [pc, #256]	@ (8005c10 <TIM_Base_SetConfig+0x114>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d013      	beq.n	8005b3c <TIM_Base_SetConfig+0x40>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b1a:	d00f      	beq.n	8005b3c <TIM_Base_SetConfig+0x40>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a3d      	ldr	r2, [pc, #244]	@ (8005c14 <TIM_Base_SetConfig+0x118>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d00b      	beq.n	8005b3c <TIM_Base_SetConfig+0x40>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a3c      	ldr	r2, [pc, #240]	@ (8005c18 <TIM_Base_SetConfig+0x11c>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d007      	beq.n	8005b3c <TIM_Base_SetConfig+0x40>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a3b      	ldr	r2, [pc, #236]	@ (8005c1c <TIM_Base_SetConfig+0x120>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d003      	beq.n	8005b3c <TIM_Base_SetConfig+0x40>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a3a      	ldr	r2, [pc, #232]	@ (8005c20 <TIM_Base_SetConfig+0x124>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d108      	bne.n	8005b4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a2f      	ldr	r2, [pc, #188]	@ (8005c10 <TIM_Base_SetConfig+0x114>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d02b      	beq.n	8005bae <TIM_Base_SetConfig+0xb2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b5c:	d027      	beq.n	8005bae <TIM_Base_SetConfig+0xb2>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a2c      	ldr	r2, [pc, #176]	@ (8005c14 <TIM_Base_SetConfig+0x118>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d023      	beq.n	8005bae <TIM_Base_SetConfig+0xb2>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a2b      	ldr	r2, [pc, #172]	@ (8005c18 <TIM_Base_SetConfig+0x11c>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d01f      	beq.n	8005bae <TIM_Base_SetConfig+0xb2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a2a      	ldr	r2, [pc, #168]	@ (8005c1c <TIM_Base_SetConfig+0x120>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d01b      	beq.n	8005bae <TIM_Base_SetConfig+0xb2>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a29      	ldr	r2, [pc, #164]	@ (8005c20 <TIM_Base_SetConfig+0x124>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d017      	beq.n	8005bae <TIM_Base_SetConfig+0xb2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a28      	ldr	r2, [pc, #160]	@ (8005c24 <TIM_Base_SetConfig+0x128>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d013      	beq.n	8005bae <TIM_Base_SetConfig+0xb2>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a27      	ldr	r2, [pc, #156]	@ (8005c28 <TIM_Base_SetConfig+0x12c>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d00f      	beq.n	8005bae <TIM_Base_SetConfig+0xb2>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a26      	ldr	r2, [pc, #152]	@ (8005c2c <TIM_Base_SetConfig+0x130>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d00b      	beq.n	8005bae <TIM_Base_SetConfig+0xb2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a25      	ldr	r2, [pc, #148]	@ (8005c30 <TIM_Base_SetConfig+0x134>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d007      	beq.n	8005bae <TIM_Base_SetConfig+0xb2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a24      	ldr	r2, [pc, #144]	@ (8005c34 <TIM_Base_SetConfig+0x138>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d003      	beq.n	8005bae <TIM_Base_SetConfig+0xb2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a23      	ldr	r2, [pc, #140]	@ (8005c38 <TIM_Base_SetConfig+0x13c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d108      	bne.n	8005bc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a0a      	ldr	r2, [pc, #40]	@ (8005c10 <TIM_Base_SetConfig+0x114>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d003      	beq.n	8005bf4 <TIM_Base_SetConfig+0xf8>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a0c      	ldr	r2, [pc, #48]	@ (8005c20 <TIM_Base_SetConfig+0x124>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d103      	bne.n	8005bfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	691a      	ldr	r2, [r3, #16]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	615a      	str	r2, [r3, #20]
}
 8005c02:	bf00      	nop
 8005c04:	3714      	adds	r7, #20
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	40010000 	.word	0x40010000
 8005c14:	40000400 	.word	0x40000400
 8005c18:	40000800 	.word	0x40000800
 8005c1c:	40000c00 	.word	0x40000c00
 8005c20:	40010400 	.word	0x40010400
 8005c24:	40014000 	.word	0x40014000
 8005c28:	40014400 	.word	0x40014400
 8005c2c:	40014800 	.word	0x40014800
 8005c30:	40001800 	.word	0x40001800
 8005c34:	40001c00 	.word	0x40001c00
 8005c38:	40002000 	.word	0x40002000

08005c3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b087      	sub	sp, #28
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	f023 0201 	bic.w	r2, r3, #1
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a1b      	ldr	r3, [r3, #32]
 8005c56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f023 0303 	bic.w	r3, r3, #3
 8005c72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f023 0302 	bic.w	r3, r3, #2
 8005c84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a20      	ldr	r2, [pc, #128]	@ (8005d14 <TIM_OC1_SetConfig+0xd8>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d003      	beq.n	8005ca0 <TIM_OC1_SetConfig+0x64>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a1f      	ldr	r2, [pc, #124]	@ (8005d18 <TIM_OC1_SetConfig+0xdc>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d10c      	bne.n	8005cba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f023 0308 	bic.w	r3, r3, #8
 8005ca6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f023 0304 	bic.w	r3, r3, #4
 8005cb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a15      	ldr	r2, [pc, #84]	@ (8005d14 <TIM_OC1_SetConfig+0xd8>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d003      	beq.n	8005cca <TIM_OC1_SetConfig+0x8e>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a14      	ldr	r2, [pc, #80]	@ (8005d18 <TIM_OC1_SetConfig+0xdc>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d111      	bne.n	8005cee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	621a      	str	r2, [r3, #32]
}
 8005d08:	bf00      	nop
 8005d0a:	371c      	adds	r7, #28
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	40010000 	.word	0x40010000
 8005d18:	40010400 	.word	0x40010400

08005d1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b087      	sub	sp, #28
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	f023 0210 	bic.w	r2, r3, #16
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	021b      	lsls	r3, r3, #8
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f023 0320 	bic.w	r3, r3, #32
 8005d66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	011b      	lsls	r3, r3, #4
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a22      	ldr	r2, [pc, #136]	@ (8005e00 <TIM_OC2_SetConfig+0xe4>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d003      	beq.n	8005d84 <TIM_OC2_SetConfig+0x68>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a21      	ldr	r2, [pc, #132]	@ (8005e04 <TIM_OC2_SetConfig+0xe8>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d10d      	bne.n	8005da0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	011b      	lsls	r3, r3, #4
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a17      	ldr	r2, [pc, #92]	@ (8005e00 <TIM_OC2_SetConfig+0xe4>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d003      	beq.n	8005db0 <TIM_OC2_SetConfig+0x94>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a16      	ldr	r2, [pc, #88]	@ (8005e04 <TIM_OC2_SetConfig+0xe8>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d113      	bne.n	8005dd8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005db6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	621a      	str	r2, [r3, #32]
}
 8005df2:	bf00      	nop
 8005df4:	371c      	adds	r7, #28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	40010000 	.word	0x40010000
 8005e04:	40010400 	.word	0x40010400

08005e08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b087      	sub	sp, #28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 0303 	bic.w	r3, r3, #3
 8005e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	021b      	lsls	r3, r3, #8
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a21      	ldr	r2, [pc, #132]	@ (8005ee8 <TIM_OC3_SetConfig+0xe0>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d003      	beq.n	8005e6e <TIM_OC3_SetConfig+0x66>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a20      	ldr	r2, [pc, #128]	@ (8005eec <TIM_OC3_SetConfig+0xe4>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d10d      	bne.n	8005e8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	021b      	lsls	r3, r3, #8
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a16      	ldr	r2, [pc, #88]	@ (8005ee8 <TIM_OC3_SetConfig+0xe0>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d003      	beq.n	8005e9a <TIM_OC3_SetConfig+0x92>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a15      	ldr	r2, [pc, #84]	@ (8005eec <TIM_OC3_SetConfig+0xe4>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d113      	bne.n	8005ec2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	011b      	lsls	r3, r3, #4
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	011b      	lsls	r3, r3, #4
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	621a      	str	r2, [r3, #32]
}
 8005edc:	bf00      	nop
 8005ede:	371c      	adds	r7, #28
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr
 8005ee8:	40010000 	.word	0x40010000
 8005eec:	40010400 	.word	0x40010400

08005ef0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	021b      	lsls	r3, r3, #8
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	031b      	lsls	r3, r3, #12
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a12      	ldr	r2, [pc, #72]	@ (8005f94 <TIM_OC4_SetConfig+0xa4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d003      	beq.n	8005f58 <TIM_OC4_SetConfig+0x68>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a11      	ldr	r2, [pc, #68]	@ (8005f98 <TIM_OC4_SetConfig+0xa8>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d109      	bne.n	8005f6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	019b      	lsls	r3, r3, #6
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	621a      	str	r2, [r3, #32]
}
 8005f86:	bf00      	nop
 8005f88:	371c      	adds	r7, #28
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	40010000 	.word	0x40010000
 8005f98:	40010400 	.word	0x40010400

08005f9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b087      	sub	sp, #28
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	f023 0201 	bic.w	r2, r3, #1
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	011b      	lsls	r3, r3, #4
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f023 030a 	bic.w	r3, r3, #10
 8005fd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	621a      	str	r2, [r3, #32]
}
 8005fee:	bf00      	nop
 8005ff0:	371c      	adds	r7, #28
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b087      	sub	sp, #28
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	60f8      	str	r0, [r7, #12]
 8006002:	60b9      	str	r1, [r7, #8]
 8006004:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	f023 0210 	bic.w	r2, r3, #16
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006024:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	031b      	lsls	r3, r3, #12
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	4313      	orrs	r3, r2
 800602e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006036:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	011b      	lsls	r3, r3, #4
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	4313      	orrs	r3, r2
 8006040:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	621a      	str	r2, [r3, #32]
}
 800604e:	bf00      	nop
 8006050:	371c      	adds	r7, #28
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr

0800605a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800605a:	b480      	push	{r7}
 800605c:	b085      	sub	sp, #20
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
 8006062:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006070:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006072:	683a      	ldr	r2, [r7, #0]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4313      	orrs	r3, r2
 8006078:	f043 0307 	orr.w	r3, r3, #7
 800607c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	609a      	str	r2, [r3, #8]
}
 8006084:	bf00      	nop
 8006086:	3714      	adds	r7, #20
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006090:	b480      	push	{r7}
 8006092:	b087      	sub	sp, #28
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
 800609c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	021a      	lsls	r2, r3, #8
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	431a      	orrs	r2, r3
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	609a      	str	r2, [r3, #8]
}
 80060c4:	bf00      	nop
 80060c6:	371c      	adds	r7, #28
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d101      	bne.n	80060e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060e4:	2302      	movs	r3, #2
 80060e6:	e05a      	b.n	800619e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2202      	movs	r2, #2
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800610e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a21      	ldr	r2, [pc, #132]	@ (80061ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d022      	beq.n	8006172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006134:	d01d      	beq.n	8006172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a1d      	ldr	r2, [pc, #116]	@ (80061b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d018      	beq.n	8006172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a1b      	ldr	r2, [pc, #108]	@ (80061b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d013      	beq.n	8006172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a1a      	ldr	r2, [pc, #104]	@ (80061b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d00e      	beq.n	8006172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a18      	ldr	r2, [pc, #96]	@ (80061bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d009      	beq.n	8006172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a17      	ldr	r2, [pc, #92]	@ (80061c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d004      	beq.n	8006172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a15      	ldr	r2, [pc, #84]	@ (80061c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d10c      	bne.n	800618c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006178:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	4313      	orrs	r3, r2
 8006182:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	40010000 	.word	0x40010000
 80061b0:	40000400 	.word	0x40000400
 80061b4:	40000800 	.word	0x40000800
 80061b8:	40000c00 	.word	0x40000c00
 80061bc:	40010400 	.word	0x40010400
 80061c0:	40014000 	.word	0x40014000
 80061c4:	40001800 	.word	0x40001800

080061c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d101      	bne.n	8006202 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e03f      	b.n	8006282 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d106      	bne.n	800621c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f7fc f82a 	bl	8002270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2224      	movs	r2, #36	@ 0x24
 8006220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68da      	ldr	r2, [r3, #12]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006232:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 fddb 	bl	8006df0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	691a      	ldr	r2, [r3, #16]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006248:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	695a      	ldr	r2, [r3, #20]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006258:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68da      	ldr	r2, [r3, #12]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006268:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2220      	movs	r2, #32
 8006274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2220      	movs	r2, #32
 800627c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3708      	adds	r7, #8
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b08a      	sub	sp, #40	@ 0x28
 800628e:	af02      	add	r7, sp, #8
 8006290:	60f8      	str	r0, [r7, #12]
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	603b      	str	r3, [r7, #0]
 8006296:	4613      	mov	r3, r2
 8006298:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800629a:	2300      	movs	r3, #0
 800629c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b20      	cmp	r3, #32
 80062a8:	d17c      	bne.n	80063a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d002      	beq.n	80062b6 <HAL_UART_Transmit+0x2c>
 80062b0:	88fb      	ldrh	r3, [r7, #6]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e075      	b.n	80063a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d101      	bne.n	80062c8 <HAL_UART_Transmit+0x3e>
 80062c4:	2302      	movs	r3, #2
 80062c6:	e06e      	b.n	80063a6 <HAL_UART_Transmit+0x11c>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2221      	movs	r2, #33	@ 0x21
 80062da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062de:	f7fc f8e3 	bl	80024a8 <HAL_GetTick>
 80062e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	88fa      	ldrh	r2, [r7, #6]
 80062e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	88fa      	ldrh	r2, [r7, #6]
 80062ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062f8:	d108      	bne.n	800630c <HAL_UART_Transmit+0x82>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d104      	bne.n	800630c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006302:	2300      	movs	r3, #0
 8006304:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	61bb      	str	r3, [r7, #24]
 800630a:	e003      	b.n	8006314 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006310:	2300      	movs	r3, #0
 8006312:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 800631c:	e02a      	b.n	8006374 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	9300      	str	r3, [sp, #0]
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	2200      	movs	r2, #0
 8006326:	2180      	movs	r1, #128	@ 0x80
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f000 fb1f 	bl	800696c <UART_WaitOnFlagUntilTimeout>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d001      	beq.n	8006338 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	e036      	b.n	80063a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10b      	bne.n	8006356 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	881b      	ldrh	r3, [r3, #0]
 8006342:	461a      	mov	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800634c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	3302      	adds	r3, #2
 8006352:	61bb      	str	r3, [r7, #24]
 8006354:	e007      	b.n	8006366 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	781a      	ldrb	r2, [r3, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	3301      	adds	r3, #1
 8006364:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800636a:	b29b      	uxth	r3, r3
 800636c:	3b01      	subs	r3, #1
 800636e:	b29a      	uxth	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006378:	b29b      	uxth	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1cf      	bne.n	800631e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	9300      	str	r3, [sp, #0]
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2200      	movs	r2, #0
 8006386:	2140      	movs	r1, #64	@ 0x40
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 faef 	bl	800696c <UART_WaitOnFlagUntilTimeout>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e006      	b.n	80063a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2220      	movs	r2, #32
 800639c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80063a0:	2300      	movs	r3, #0
 80063a2:	e000      	b.n	80063a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80063a4:	2302      	movs	r3, #2
  }
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3720      	adds	r7, #32
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b084      	sub	sp, #16
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	60f8      	str	r0, [r7, #12]
 80063b6:	60b9      	str	r1, [r7, #8]
 80063b8:	4613      	mov	r3, r2
 80063ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b20      	cmp	r3, #32
 80063c6:	d11d      	bne.n	8006404 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d002      	beq.n	80063d4 <HAL_UART_Receive_IT+0x26>
 80063ce:	88fb      	ldrh	r3, [r7, #6]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e016      	b.n	8006406 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d101      	bne.n	80063e6 <HAL_UART_Receive_IT+0x38>
 80063e2:	2302      	movs	r3, #2
 80063e4:	e00f      	b.n	8006406 <HAL_UART_Receive_IT+0x58>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80063f4:	88fb      	ldrh	r3, [r7, #6]
 80063f6:	461a      	mov	r2, r3
 80063f8:	68b9      	ldr	r1, [r7, #8]
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f000 fb24 	bl	8006a48 <UART_Start_Receive_IT>
 8006400:	4603      	mov	r3, r0
 8006402:	e000      	b.n	8006406 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006404:	2302      	movs	r3, #2
  }
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
	...

08006410 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b0ba      	sub	sp, #232	@ 0xe8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006436:	2300      	movs	r3, #0
 8006438:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800643c:	2300      	movs	r3, #0
 800643e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006446:	f003 030f 	and.w	r3, r3, #15
 800644a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800644e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10f      	bne.n	8006476 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800645a:	f003 0320 	and.w	r3, r3, #32
 800645e:	2b00      	cmp	r3, #0
 8006460:	d009      	beq.n	8006476 <HAL_UART_IRQHandler+0x66>
 8006462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006466:	f003 0320 	and.w	r3, r3, #32
 800646a:	2b00      	cmp	r3, #0
 800646c:	d003      	beq.n	8006476 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fc03 	bl	8006c7a <UART_Receive_IT>
      return;
 8006474:	e256      	b.n	8006924 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006476:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800647a:	2b00      	cmp	r3, #0
 800647c:	f000 80de 	beq.w	800663c <HAL_UART_IRQHandler+0x22c>
 8006480:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	2b00      	cmp	r3, #0
 800648a:	d106      	bne.n	800649a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800648c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006490:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 80d1 	beq.w	800663c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800649a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00b      	beq.n	80064be <HAL_UART_IRQHandler+0xae>
 80064a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d005      	beq.n	80064be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b6:	f043 0201 	orr.w	r2, r3, #1
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064c2:	f003 0304 	and.w	r3, r3, #4
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00b      	beq.n	80064e2 <HAL_UART_IRQHandler+0xd2>
 80064ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d005      	beq.n	80064e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064da:	f043 0202 	orr.w	r2, r3, #2
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00b      	beq.n	8006506 <HAL_UART_IRQHandler+0xf6>
 80064ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d005      	beq.n	8006506 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064fe:	f043 0204 	orr.w	r2, r3, #4
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800650a:	f003 0308 	and.w	r3, r3, #8
 800650e:	2b00      	cmp	r3, #0
 8006510:	d011      	beq.n	8006536 <HAL_UART_IRQHandler+0x126>
 8006512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006516:	f003 0320 	and.w	r3, r3, #32
 800651a:	2b00      	cmp	r3, #0
 800651c:	d105      	bne.n	800652a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800651e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	2b00      	cmp	r3, #0
 8006528:	d005      	beq.n	8006536 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800652e:	f043 0208 	orr.w	r2, r3, #8
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800653a:	2b00      	cmp	r3, #0
 800653c:	f000 81ed 	beq.w	800691a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006544:	f003 0320 	and.w	r3, r3, #32
 8006548:	2b00      	cmp	r3, #0
 800654a:	d008      	beq.n	800655e <HAL_UART_IRQHandler+0x14e>
 800654c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006550:	f003 0320 	and.w	r3, r3, #32
 8006554:	2b00      	cmp	r3, #0
 8006556:	d002      	beq.n	800655e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fb8e 	bl	8006c7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006568:	2b40      	cmp	r3, #64	@ 0x40
 800656a:	bf0c      	ite	eq
 800656c:	2301      	moveq	r3, #1
 800656e:	2300      	movne	r3, #0
 8006570:	b2db      	uxtb	r3, r3
 8006572:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800657a:	f003 0308 	and.w	r3, r3, #8
 800657e:	2b00      	cmp	r3, #0
 8006580:	d103      	bne.n	800658a <HAL_UART_IRQHandler+0x17a>
 8006582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006586:	2b00      	cmp	r3, #0
 8006588:	d04f      	beq.n	800662a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fa96 	bl	8006abc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800659a:	2b40      	cmp	r3, #64	@ 0x40
 800659c:	d141      	bne.n	8006622 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	3314      	adds	r3, #20
 80065a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80065ac:	e853 3f00 	ldrex	r3, [r3]
 80065b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80065b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80065b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	3314      	adds	r3, #20
 80065c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80065ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80065ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80065d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80065da:	e841 2300 	strex	r3, r2, [r1]
 80065de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80065e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1d9      	bne.n	800659e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d013      	beq.n	800661a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f6:	4a7d      	ldr	r2, [pc, #500]	@ (80067ec <HAL_UART_IRQHandler+0x3dc>)
 80065f8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065fe:	4618      	mov	r0, r3
 8006600:	f7fc fe1c 	bl	800323c <HAL_DMA_Abort_IT>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d016      	beq.n	8006638 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800660e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006614:	4610      	mov	r0, r2
 8006616:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006618:	e00e      	b.n	8006638 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f990 	bl	8006940 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006620:	e00a      	b.n	8006638 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 f98c 	bl	8006940 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006628:	e006      	b.n	8006638 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f988 	bl	8006940 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8006636:	e170      	b.n	800691a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006638:	bf00      	nop
    return;
 800663a:	e16e      	b.n	800691a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006640:	2b01      	cmp	r3, #1
 8006642:	f040 814a 	bne.w	80068da <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800664a:	f003 0310 	and.w	r3, r3, #16
 800664e:	2b00      	cmp	r3, #0
 8006650:	f000 8143 	beq.w	80068da <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006658:	f003 0310 	and.w	r3, r3, #16
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 813c 	beq.w	80068da <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006662:	2300      	movs	r3, #0
 8006664:	60bb      	str	r3, [r7, #8]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	60bb      	str	r3, [r7, #8]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	60bb      	str	r3, [r7, #8]
 8006676:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006682:	2b40      	cmp	r3, #64	@ 0x40
 8006684:	f040 80b4 	bne.w	80067f0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006694:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006698:	2b00      	cmp	r3, #0
 800669a:	f000 8140 	beq.w	800691e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80066a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066a6:	429a      	cmp	r2, r3
 80066a8:	f080 8139 	bcs.w	800691e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b8:	69db      	ldr	r3, [r3, #28]
 80066ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066be:	f000 8088 	beq.w	80067d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	330c      	adds	r3, #12
 80066c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80066d0:	e853 3f00 	ldrex	r3, [r3]
 80066d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80066d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80066dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	330c      	adds	r3, #12
 80066ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80066ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80066f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80066fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80066fe:	e841 2300 	strex	r3, r2, [r1]
 8006702:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006706:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1d9      	bne.n	80066c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	3314      	adds	r3, #20
 8006714:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006716:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006718:	e853 3f00 	ldrex	r3, [r3]
 800671c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800671e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006720:	f023 0301 	bic.w	r3, r3, #1
 8006724:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	3314      	adds	r3, #20
 800672e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006732:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006736:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006738:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800673a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800673e:	e841 2300 	strex	r3, r2, [r1]
 8006742:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006744:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1e1      	bne.n	800670e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	3314      	adds	r3, #20
 8006750:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006752:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006754:	e853 3f00 	ldrex	r3, [r3]
 8006758:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800675a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800675c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006760:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	3314      	adds	r3, #20
 800676a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800676e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006770:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006772:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006774:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006776:	e841 2300 	strex	r3, r2, [r1]
 800677a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800677c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1e3      	bne.n	800674a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2220      	movs	r2, #32
 8006786:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	330c      	adds	r3, #12
 8006796:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006798:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800679a:	e853 3f00 	ldrex	r3, [r3]
 800679e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80067a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067a2:	f023 0310 	bic.w	r3, r3, #16
 80067a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	330c      	adds	r3, #12
 80067b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80067b4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80067b6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80067ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80067bc:	e841 2300 	strex	r3, r2, [r1]
 80067c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80067c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1e3      	bne.n	8006790 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7fc fcc5 	bl	800315c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80067da:	b29b      	uxth	r3, r3
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	b29b      	uxth	r3, r3
 80067e0:	4619      	mov	r1, r3
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f8b6 	bl	8006954 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067e8:	e099      	b.n	800691e <HAL_UART_IRQHandler+0x50e>
 80067ea:	bf00      	nop
 80067ec:	08006b83 	.word	0x08006b83
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006804:	b29b      	uxth	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 808b 	beq.w	8006922 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800680c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 8086 	beq.w	8006922 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	330c      	adds	r3, #12
 800681c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006820:	e853 3f00 	ldrex	r3, [r3]
 8006824:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006828:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800682c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	330c      	adds	r3, #12
 8006836:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800683a:	647a      	str	r2, [r7, #68]	@ 0x44
 800683c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006840:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006842:	e841 2300 	strex	r3, r2, [r1]
 8006846:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1e3      	bne.n	8006816 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	3314      	adds	r3, #20
 8006854:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006858:	e853 3f00 	ldrex	r3, [r3]
 800685c:	623b      	str	r3, [r7, #32]
   return(result);
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	f023 0301 	bic.w	r3, r3, #1
 8006864:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	3314      	adds	r3, #20
 800686e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006872:	633a      	str	r2, [r7, #48]	@ 0x30
 8006874:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006876:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006878:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800687a:	e841 2300 	strex	r3, r2, [r1]
 800687e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1e3      	bne.n	800684e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2220      	movs	r2, #32
 800688a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	330c      	adds	r3, #12
 800689a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	e853 3f00 	ldrex	r3, [r3]
 80068a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f023 0310 	bic.w	r3, r3, #16
 80068aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	330c      	adds	r3, #12
 80068b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80068b8:	61fa      	str	r2, [r7, #28]
 80068ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068bc:	69b9      	ldr	r1, [r7, #24]
 80068be:	69fa      	ldr	r2, [r7, #28]
 80068c0:	e841 2300 	strex	r3, r2, [r1]
 80068c4:	617b      	str	r3, [r7, #20]
   return(result);
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1e3      	bne.n	8006894 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80068d0:	4619      	mov	r1, r3
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f83e 	bl	8006954 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068d8:	e023      	b.n	8006922 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80068da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d009      	beq.n	80068fa <HAL_UART_IRQHandler+0x4ea>
 80068e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d003      	beq.n	80068fa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 f959 	bl	8006baa <UART_Transmit_IT>
    return;
 80068f8:	e014      	b.n	8006924 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80068fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00e      	beq.n	8006924 <HAL_UART_IRQHandler+0x514>
 8006906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800690a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800690e:	2b00      	cmp	r3, #0
 8006910:	d008      	beq.n	8006924 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 f999 	bl	8006c4a <UART_EndTransmit_IT>
    return;
 8006918:	e004      	b.n	8006924 <HAL_UART_IRQHandler+0x514>
    return;
 800691a:	bf00      	nop
 800691c:	e002      	b.n	8006924 <HAL_UART_IRQHandler+0x514>
      return;
 800691e:	bf00      	nop
 8006920:	e000      	b.n	8006924 <HAL_UART_IRQHandler+0x514>
      return;
 8006922:	bf00      	nop
  }
}
 8006924:	37e8      	adds	r7, #232	@ 0xe8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop

0800692c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006948:	bf00      	nop
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	460b      	mov	r3, r1
 800695e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b090      	sub	sp, #64	@ 0x40
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	603b      	str	r3, [r7, #0]
 8006978:	4613      	mov	r3, r2
 800697a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800697c:	e050      	b.n	8006a20 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800697e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006984:	d04c      	beq.n	8006a20 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006986:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006988:	2b00      	cmp	r3, #0
 800698a:	d007      	beq.n	800699c <UART_WaitOnFlagUntilTimeout+0x30>
 800698c:	f7fb fd8c 	bl	80024a8 <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006998:	429a      	cmp	r2, r3
 800699a:	d241      	bcs.n	8006a20 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	330c      	adds	r3, #12
 80069a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a6:	e853 3f00 	ldrex	r3, [r3]
 80069aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ae:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80069b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	330c      	adds	r3, #12
 80069ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80069bc:	637a      	str	r2, [r7, #52]	@ 0x34
 80069be:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80069c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069c4:	e841 2300 	strex	r3, r2, [r1]
 80069c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80069ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1e5      	bne.n	800699c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	3314      	adds	r3, #20
 80069d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	e853 3f00 	ldrex	r3, [r3]
 80069de:	613b      	str	r3, [r7, #16]
   return(result);
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	f023 0301 	bic.w	r3, r3, #1
 80069e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3314      	adds	r3, #20
 80069ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069f0:	623a      	str	r2, [r7, #32]
 80069f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f4:	69f9      	ldr	r1, [r7, #28]
 80069f6:	6a3a      	ldr	r2, [r7, #32]
 80069f8:	e841 2300 	strex	r3, r2, [r1]
 80069fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1e5      	bne.n	80069d0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2220      	movs	r2, #32
 8006a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2220      	movs	r2, #32
 8006a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e00f      	b.n	8006a40 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	4013      	ands	r3, r2
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	bf0c      	ite	eq
 8006a30:	2301      	moveq	r3, #1
 8006a32:	2300      	movne	r3, #0
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	461a      	mov	r2, r3
 8006a38:	79fb      	ldrb	r3, [r7, #7]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d09f      	beq.n	800697e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3740      	adds	r7, #64	@ 0x40
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	4613      	mov	r3, r2
 8006a54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	88fa      	ldrh	r2, [r7, #6]
 8006a60:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	88fa      	ldrh	r2, [r7, #6]
 8006a66:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2222      	movs	r2, #34	@ 0x22
 8006a72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68da      	ldr	r2, [r3, #12]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a8c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	695a      	ldr	r2, [r3, #20]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f042 0201 	orr.w	r2, r2, #1
 8006a9c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68da      	ldr	r2, [r3, #12]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f042 0220 	orr.w	r2, r2, #32
 8006aac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b095      	sub	sp, #84	@ 0x54
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	330c      	adds	r3, #12
 8006aca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ace:	e853 3f00 	ldrex	r3, [r3]
 8006ad2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	330c      	adds	r3, #12
 8006ae2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006ae4:	643a      	str	r2, [r7, #64]	@ 0x40
 8006ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006aea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006aec:	e841 2300 	strex	r3, r2, [r1]
 8006af0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1e5      	bne.n	8006ac4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3314      	adds	r3, #20
 8006afe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b00:	6a3b      	ldr	r3, [r7, #32]
 8006b02:	e853 3f00 	ldrex	r3, [r3]
 8006b06:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	f023 0301 	bic.w	r3, r3, #1
 8006b0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3314      	adds	r3, #20
 8006b16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b20:	e841 2300 	strex	r3, r2, [r1]
 8006b24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e5      	bne.n	8006af8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d119      	bne.n	8006b68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	330c      	adds	r3, #12
 8006b3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	e853 3f00 	ldrex	r3, [r3]
 8006b42:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	f023 0310 	bic.w	r3, r3, #16
 8006b4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	330c      	adds	r3, #12
 8006b52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b54:	61ba      	str	r2, [r7, #24]
 8006b56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b58:	6979      	ldr	r1, [r7, #20]
 8006b5a:	69ba      	ldr	r2, [r7, #24]
 8006b5c:	e841 2300 	strex	r3, r2, [r1]
 8006b60:	613b      	str	r3, [r7, #16]
   return(result);
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d1e5      	bne.n	8006b34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006b76:	bf00      	nop
 8006b78:	3754      	adds	r7, #84	@ 0x54
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b084      	sub	sp, #16
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f7ff fecf 	bl	8006940 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ba2:	bf00      	nop
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006baa:	b480      	push	{r7}
 8006bac:	b085      	sub	sp, #20
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b21      	cmp	r3, #33	@ 0x21
 8006bbc:	d13e      	bne.n	8006c3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bc6:	d114      	bne.n	8006bf2 <UART_Transmit_IT+0x48>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d110      	bne.n	8006bf2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a1b      	ldr	r3, [r3, #32]
 8006bd4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	881b      	ldrh	r3, [r3, #0]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006be4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	1c9a      	adds	r2, r3, #2
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	621a      	str	r2, [r3, #32]
 8006bf0:	e008      	b.n	8006c04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	1c59      	adds	r1, r3, #1
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	6211      	str	r1, [r2, #32]
 8006bfc:	781a      	ldrb	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	4619      	mov	r1, r3
 8006c12:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10f      	bne.n	8006c38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68da      	ldr	r2, [r3, #12]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006c26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68da      	ldr	r2, [r3, #12]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	e000      	b.n	8006c3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006c3c:	2302      	movs	r3, #2
  }
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b082      	sub	sp, #8
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68da      	ldr	r2, [r3, #12]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2220      	movs	r2, #32
 8006c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7ff fe5e 	bl	800692c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3708      	adds	r7, #8
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b08c      	sub	sp, #48	@ 0x30
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b22      	cmp	r3, #34	@ 0x22
 8006c8c:	f040 80ab 	bne.w	8006de6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c98:	d117      	bne.n	8006cca <UART_Receive_IT+0x50>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d113      	bne.n	8006cca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006caa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cbc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc2:	1c9a      	adds	r2, r3, #2
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	629a      	str	r2, [r3, #40]	@ 0x28
 8006cc8:	e026      	b.n	8006d18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cdc:	d007      	beq.n	8006cee <UART_Receive_IT+0x74>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10a      	bne.n	8006cfc <UART_Receive_IT+0x82>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d106      	bne.n	8006cfc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf8:	701a      	strb	r2, [r3, #0]
 8006cfa:	e008      	b.n	8006d0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d12:	1c5a      	adds	r2, r3, #1
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	4619      	mov	r1, r3
 8006d26:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d15a      	bne.n	8006de2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68da      	ldr	r2, [r3, #12]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f022 0220 	bic.w	r2, r2, #32
 8006d3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68da      	ldr	r2, [r3, #12]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006d4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	695a      	ldr	r2, [r3, #20]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 0201 	bic.w	r2, r2, #1
 8006d5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d135      	bne.n	8006dd8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	330c      	adds	r3, #12
 8006d78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	e853 3f00 	ldrex	r3, [r3]
 8006d80:	613b      	str	r3, [r7, #16]
   return(result);
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f023 0310 	bic.w	r3, r3, #16
 8006d88:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	330c      	adds	r3, #12
 8006d90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d92:	623a      	str	r2, [r7, #32]
 8006d94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d96:	69f9      	ldr	r1, [r7, #28]
 8006d98:	6a3a      	ldr	r2, [r7, #32]
 8006d9a:	e841 2300 	strex	r3, r2, [r1]
 8006d9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1e5      	bne.n	8006d72 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0310 	and.w	r3, r3, #16
 8006db0:	2b10      	cmp	r3, #16
 8006db2:	d10a      	bne.n	8006dca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006db4:	2300      	movs	r3, #0
 8006db6:	60fb      	str	r3, [r7, #12]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	60fb      	str	r3, [r7, #12]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	60fb      	str	r3, [r7, #12]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006dce:	4619      	mov	r1, r3
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f7ff fdbf 	bl	8006954 <HAL_UARTEx_RxEventCallback>
 8006dd6:	e002      	b.n	8006dde <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f7fb f9ab 	bl	8002134 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006dde:	2300      	movs	r3, #0
 8006de0:	e002      	b.n	8006de8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	e000      	b.n	8006de8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006de6:	2302      	movs	r3, #2
  }
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3730      	adds	r7, #48	@ 0x30
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006df4:	b0c0      	sub	sp, #256	@ 0x100
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e0c:	68d9      	ldr	r1, [r3, #12]
 8006e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	ea40 0301 	orr.w	r3, r0, r1
 8006e18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e1e:	689a      	ldr	r2, [r3, #8]
 8006e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	431a      	orrs	r2, r3
 8006e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e2c:	695b      	ldr	r3, [r3, #20]
 8006e2e:	431a      	orrs	r2, r3
 8006e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e34:	69db      	ldr	r3, [r3, #28]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006e48:	f021 010c 	bic.w	r1, r1, #12
 8006e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006e56:	430b      	orrs	r3, r1
 8006e58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	695b      	ldr	r3, [r3, #20]
 8006e62:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e6a:	6999      	ldr	r1, [r3, #24]
 8006e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	ea40 0301 	orr.w	r3, r0, r1
 8006e76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	4b8f      	ldr	r3, [pc, #572]	@ (80070bc <UART_SetConfig+0x2cc>)
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d005      	beq.n	8006e90 <UART_SetConfig+0xa0>
 8006e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	4b8d      	ldr	r3, [pc, #564]	@ (80070c0 <UART_SetConfig+0x2d0>)
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d104      	bne.n	8006e9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e90:	f7fd fbf8 	bl	8004684 <HAL_RCC_GetPCLK2Freq>
 8006e94:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006e98:	e003      	b.n	8006ea2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e9a:	f7fd fbdf 	bl	800465c <HAL_RCC_GetPCLK1Freq>
 8006e9e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ea6:	69db      	ldr	r3, [r3, #28]
 8006ea8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006eac:	f040 810c 	bne.w	80070c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006eb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006eba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006ebe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006ec2:	4622      	mov	r2, r4
 8006ec4:	462b      	mov	r3, r5
 8006ec6:	1891      	adds	r1, r2, r2
 8006ec8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006eca:	415b      	adcs	r3, r3
 8006ecc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ece:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006ed2:	4621      	mov	r1, r4
 8006ed4:	eb12 0801 	adds.w	r8, r2, r1
 8006ed8:	4629      	mov	r1, r5
 8006eda:	eb43 0901 	adc.w	r9, r3, r1
 8006ede:	f04f 0200 	mov.w	r2, #0
 8006ee2:	f04f 0300 	mov.w	r3, #0
 8006ee6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006eea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006eee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ef2:	4690      	mov	r8, r2
 8006ef4:	4699      	mov	r9, r3
 8006ef6:	4623      	mov	r3, r4
 8006ef8:	eb18 0303 	adds.w	r3, r8, r3
 8006efc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006f00:	462b      	mov	r3, r5
 8006f02:	eb49 0303 	adc.w	r3, r9, r3
 8006f06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006f16:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006f1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006f1e:	460b      	mov	r3, r1
 8006f20:	18db      	adds	r3, r3, r3
 8006f22:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f24:	4613      	mov	r3, r2
 8006f26:	eb42 0303 	adc.w	r3, r2, r3
 8006f2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006f30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006f34:	f7f9 fb80 	bl	8000638 <__aeabi_uldivmod>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	4b61      	ldr	r3, [pc, #388]	@ (80070c4 <UART_SetConfig+0x2d4>)
 8006f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8006f42:	095b      	lsrs	r3, r3, #5
 8006f44:	011c      	lsls	r4, r3, #4
 8006f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f50:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006f54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006f58:	4642      	mov	r2, r8
 8006f5a:	464b      	mov	r3, r9
 8006f5c:	1891      	adds	r1, r2, r2
 8006f5e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006f60:	415b      	adcs	r3, r3
 8006f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006f68:	4641      	mov	r1, r8
 8006f6a:	eb12 0a01 	adds.w	sl, r2, r1
 8006f6e:	4649      	mov	r1, r9
 8006f70:	eb43 0b01 	adc.w	fp, r3, r1
 8006f74:	f04f 0200 	mov.w	r2, #0
 8006f78:	f04f 0300 	mov.w	r3, #0
 8006f7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f88:	4692      	mov	sl, r2
 8006f8a:	469b      	mov	fp, r3
 8006f8c:	4643      	mov	r3, r8
 8006f8e:	eb1a 0303 	adds.w	r3, sl, r3
 8006f92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f96:	464b      	mov	r3, r9
 8006f98:	eb4b 0303 	adc.w	r3, fp, r3
 8006f9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006fac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006fb0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	18db      	adds	r3, r3, r3
 8006fb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006fba:	4613      	mov	r3, r2
 8006fbc:	eb42 0303 	adc.w	r3, r2, r3
 8006fc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006fc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006fca:	f7f9 fb35 	bl	8000638 <__aeabi_uldivmod>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	4b3b      	ldr	r3, [pc, #236]	@ (80070c4 <UART_SetConfig+0x2d4>)
 8006fd6:	fba3 2301 	umull	r2, r3, r3, r1
 8006fda:	095b      	lsrs	r3, r3, #5
 8006fdc:	2264      	movs	r2, #100	@ 0x64
 8006fde:	fb02 f303 	mul.w	r3, r2, r3
 8006fe2:	1acb      	subs	r3, r1, r3
 8006fe4:	00db      	lsls	r3, r3, #3
 8006fe6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006fea:	4b36      	ldr	r3, [pc, #216]	@ (80070c4 <UART_SetConfig+0x2d4>)
 8006fec:	fba3 2302 	umull	r2, r3, r3, r2
 8006ff0:	095b      	lsrs	r3, r3, #5
 8006ff2:	005b      	lsls	r3, r3, #1
 8006ff4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006ff8:	441c      	add	r4, r3
 8006ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ffe:	2200      	movs	r2, #0
 8007000:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007004:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007008:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800700c:	4642      	mov	r2, r8
 800700e:	464b      	mov	r3, r9
 8007010:	1891      	adds	r1, r2, r2
 8007012:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007014:	415b      	adcs	r3, r3
 8007016:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007018:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800701c:	4641      	mov	r1, r8
 800701e:	1851      	adds	r1, r2, r1
 8007020:	6339      	str	r1, [r7, #48]	@ 0x30
 8007022:	4649      	mov	r1, r9
 8007024:	414b      	adcs	r3, r1
 8007026:	637b      	str	r3, [r7, #52]	@ 0x34
 8007028:	f04f 0200 	mov.w	r2, #0
 800702c:	f04f 0300 	mov.w	r3, #0
 8007030:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007034:	4659      	mov	r1, fp
 8007036:	00cb      	lsls	r3, r1, #3
 8007038:	4651      	mov	r1, sl
 800703a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800703e:	4651      	mov	r1, sl
 8007040:	00ca      	lsls	r2, r1, #3
 8007042:	4610      	mov	r0, r2
 8007044:	4619      	mov	r1, r3
 8007046:	4603      	mov	r3, r0
 8007048:	4642      	mov	r2, r8
 800704a:	189b      	adds	r3, r3, r2
 800704c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007050:	464b      	mov	r3, r9
 8007052:	460a      	mov	r2, r1
 8007054:	eb42 0303 	adc.w	r3, r2, r3
 8007058:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800705c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007068:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800706c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007070:	460b      	mov	r3, r1
 8007072:	18db      	adds	r3, r3, r3
 8007074:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007076:	4613      	mov	r3, r2
 8007078:	eb42 0303 	adc.w	r3, r2, r3
 800707c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800707e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007082:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007086:	f7f9 fad7 	bl	8000638 <__aeabi_uldivmod>
 800708a:	4602      	mov	r2, r0
 800708c:	460b      	mov	r3, r1
 800708e:	4b0d      	ldr	r3, [pc, #52]	@ (80070c4 <UART_SetConfig+0x2d4>)
 8007090:	fba3 1302 	umull	r1, r3, r3, r2
 8007094:	095b      	lsrs	r3, r3, #5
 8007096:	2164      	movs	r1, #100	@ 0x64
 8007098:	fb01 f303 	mul.w	r3, r1, r3
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	00db      	lsls	r3, r3, #3
 80070a0:	3332      	adds	r3, #50	@ 0x32
 80070a2:	4a08      	ldr	r2, [pc, #32]	@ (80070c4 <UART_SetConfig+0x2d4>)
 80070a4:	fba2 2303 	umull	r2, r3, r2, r3
 80070a8:	095b      	lsrs	r3, r3, #5
 80070aa:	f003 0207 	and.w	r2, r3, #7
 80070ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4422      	add	r2, r4
 80070b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80070b8:	e106      	b.n	80072c8 <UART_SetConfig+0x4d8>
 80070ba:	bf00      	nop
 80070bc:	40011000 	.word	0x40011000
 80070c0:	40011400 	.word	0x40011400
 80070c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070cc:	2200      	movs	r2, #0
 80070ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80070d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80070d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80070da:	4642      	mov	r2, r8
 80070dc:	464b      	mov	r3, r9
 80070de:	1891      	adds	r1, r2, r2
 80070e0:	6239      	str	r1, [r7, #32]
 80070e2:	415b      	adcs	r3, r3
 80070e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80070e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80070ea:	4641      	mov	r1, r8
 80070ec:	1854      	adds	r4, r2, r1
 80070ee:	4649      	mov	r1, r9
 80070f0:	eb43 0501 	adc.w	r5, r3, r1
 80070f4:	f04f 0200 	mov.w	r2, #0
 80070f8:	f04f 0300 	mov.w	r3, #0
 80070fc:	00eb      	lsls	r3, r5, #3
 80070fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007102:	00e2      	lsls	r2, r4, #3
 8007104:	4614      	mov	r4, r2
 8007106:	461d      	mov	r5, r3
 8007108:	4643      	mov	r3, r8
 800710a:	18e3      	adds	r3, r4, r3
 800710c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007110:	464b      	mov	r3, r9
 8007112:	eb45 0303 	adc.w	r3, r5, r3
 8007116:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800711a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007126:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800712a:	f04f 0200 	mov.w	r2, #0
 800712e:	f04f 0300 	mov.w	r3, #0
 8007132:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007136:	4629      	mov	r1, r5
 8007138:	008b      	lsls	r3, r1, #2
 800713a:	4621      	mov	r1, r4
 800713c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007140:	4621      	mov	r1, r4
 8007142:	008a      	lsls	r2, r1, #2
 8007144:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007148:	f7f9 fa76 	bl	8000638 <__aeabi_uldivmod>
 800714c:	4602      	mov	r2, r0
 800714e:	460b      	mov	r3, r1
 8007150:	4b60      	ldr	r3, [pc, #384]	@ (80072d4 <UART_SetConfig+0x4e4>)
 8007152:	fba3 2302 	umull	r2, r3, r3, r2
 8007156:	095b      	lsrs	r3, r3, #5
 8007158:	011c      	lsls	r4, r3, #4
 800715a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800715e:	2200      	movs	r2, #0
 8007160:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007164:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007168:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800716c:	4642      	mov	r2, r8
 800716e:	464b      	mov	r3, r9
 8007170:	1891      	adds	r1, r2, r2
 8007172:	61b9      	str	r1, [r7, #24]
 8007174:	415b      	adcs	r3, r3
 8007176:	61fb      	str	r3, [r7, #28]
 8007178:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800717c:	4641      	mov	r1, r8
 800717e:	1851      	adds	r1, r2, r1
 8007180:	6139      	str	r1, [r7, #16]
 8007182:	4649      	mov	r1, r9
 8007184:	414b      	adcs	r3, r1
 8007186:	617b      	str	r3, [r7, #20]
 8007188:	f04f 0200 	mov.w	r2, #0
 800718c:	f04f 0300 	mov.w	r3, #0
 8007190:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007194:	4659      	mov	r1, fp
 8007196:	00cb      	lsls	r3, r1, #3
 8007198:	4651      	mov	r1, sl
 800719a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800719e:	4651      	mov	r1, sl
 80071a0:	00ca      	lsls	r2, r1, #3
 80071a2:	4610      	mov	r0, r2
 80071a4:	4619      	mov	r1, r3
 80071a6:	4603      	mov	r3, r0
 80071a8:	4642      	mov	r2, r8
 80071aa:	189b      	adds	r3, r3, r2
 80071ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80071b0:	464b      	mov	r3, r9
 80071b2:	460a      	mov	r2, r1
 80071b4:	eb42 0303 	adc.w	r3, r2, r3
 80071b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80071bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80071c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80071c8:	f04f 0200 	mov.w	r2, #0
 80071cc:	f04f 0300 	mov.w	r3, #0
 80071d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80071d4:	4649      	mov	r1, r9
 80071d6:	008b      	lsls	r3, r1, #2
 80071d8:	4641      	mov	r1, r8
 80071da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071de:	4641      	mov	r1, r8
 80071e0:	008a      	lsls	r2, r1, #2
 80071e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80071e6:	f7f9 fa27 	bl	8000638 <__aeabi_uldivmod>
 80071ea:	4602      	mov	r2, r0
 80071ec:	460b      	mov	r3, r1
 80071ee:	4611      	mov	r1, r2
 80071f0:	4b38      	ldr	r3, [pc, #224]	@ (80072d4 <UART_SetConfig+0x4e4>)
 80071f2:	fba3 2301 	umull	r2, r3, r3, r1
 80071f6:	095b      	lsrs	r3, r3, #5
 80071f8:	2264      	movs	r2, #100	@ 0x64
 80071fa:	fb02 f303 	mul.w	r3, r2, r3
 80071fe:	1acb      	subs	r3, r1, r3
 8007200:	011b      	lsls	r3, r3, #4
 8007202:	3332      	adds	r3, #50	@ 0x32
 8007204:	4a33      	ldr	r2, [pc, #204]	@ (80072d4 <UART_SetConfig+0x4e4>)
 8007206:	fba2 2303 	umull	r2, r3, r2, r3
 800720a:	095b      	lsrs	r3, r3, #5
 800720c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007210:	441c      	add	r4, r3
 8007212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007216:	2200      	movs	r2, #0
 8007218:	673b      	str	r3, [r7, #112]	@ 0x70
 800721a:	677a      	str	r2, [r7, #116]	@ 0x74
 800721c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007220:	4642      	mov	r2, r8
 8007222:	464b      	mov	r3, r9
 8007224:	1891      	adds	r1, r2, r2
 8007226:	60b9      	str	r1, [r7, #8]
 8007228:	415b      	adcs	r3, r3
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007230:	4641      	mov	r1, r8
 8007232:	1851      	adds	r1, r2, r1
 8007234:	6039      	str	r1, [r7, #0]
 8007236:	4649      	mov	r1, r9
 8007238:	414b      	adcs	r3, r1
 800723a:	607b      	str	r3, [r7, #4]
 800723c:	f04f 0200 	mov.w	r2, #0
 8007240:	f04f 0300 	mov.w	r3, #0
 8007244:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007248:	4659      	mov	r1, fp
 800724a:	00cb      	lsls	r3, r1, #3
 800724c:	4651      	mov	r1, sl
 800724e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007252:	4651      	mov	r1, sl
 8007254:	00ca      	lsls	r2, r1, #3
 8007256:	4610      	mov	r0, r2
 8007258:	4619      	mov	r1, r3
 800725a:	4603      	mov	r3, r0
 800725c:	4642      	mov	r2, r8
 800725e:	189b      	adds	r3, r3, r2
 8007260:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007262:	464b      	mov	r3, r9
 8007264:	460a      	mov	r2, r1
 8007266:	eb42 0303 	adc.w	r3, r2, r3
 800726a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800726c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	663b      	str	r3, [r7, #96]	@ 0x60
 8007276:	667a      	str	r2, [r7, #100]	@ 0x64
 8007278:	f04f 0200 	mov.w	r2, #0
 800727c:	f04f 0300 	mov.w	r3, #0
 8007280:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007284:	4649      	mov	r1, r9
 8007286:	008b      	lsls	r3, r1, #2
 8007288:	4641      	mov	r1, r8
 800728a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800728e:	4641      	mov	r1, r8
 8007290:	008a      	lsls	r2, r1, #2
 8007292:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007296:	f7f9 f9cf 	bl	8000638 <__aeabi_uldivmod>
 800729a:	4602      	mov	r2, r0
 800729c:	460b      	mov	r3, r1
 800729e:	4b0d      	ldr	r3, [pc, #52]	@ (80072d4 <UART_SetConfig+0x4e4>)
 80072a0:	fba3 1302 	umull	r1, r3, r3, r2
 80072a4:	095b      	lsrs	r3, r3, #5
 80072a6:	2164      	movs	r1, #100	@ 0x64
 80072a8:	fb01 f303 	mul.w	r3, r1, r3
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	011b      	lsls	r3, r3, #4
 80072b0:	3332      	adds	r3, #50	@ 0x32
 80072b2:	4a08      	ldr	r2, [pc, #32]	@ (80072d4 <UART_SetConfig+0x4e4>)
 80072b4:	fba2 2303 	umull	r2, r3, r2, r3
 80072b8:	095b      	lsrs	r3, r3, #5
 80072ba:	f003 020f 	and.w	r2, r3, #15
 80072be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4422      	add	r2, r4
 80072c6:	609a      	str	r2, [r3, #8]
}
 80072c8:	bf00      	nop
 80072ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80072ce:	46bd      	mov	sp, r7
 80072d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072d4:	51eb851f 	.word	0x51eb851f

080072d8 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80072e2:	2300      	movs	r3, #0
 80072e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f0:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	4b20      	ldr	r3, [pc, #128]	@ (8007378 <FSMC_NORSRAM_Init+0xa0>)
 80072f6:	4013      	ands	r3, r2
 80072f8:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007302:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8007308:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800730e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8007314:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800731a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8007320:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8007326:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                     Init->WriteOperation       |\
 800732c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                     Init->WaitSignal           |\
 8007332:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                     Init->ExtendedMode         |\
 8007338:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
                     Init->AsynchronousWait     |\
 800733e:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                     Init->PageSize             |\
 8007344:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	4313      	orrs	r3, r2
 800734a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	2b08      	cmp	r3, #8
 8007352:	d103      	bne.n	800735c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800735a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	68f9      	ldr	r1, [r7, #12]
 8007364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3714      	adds	r7, #20
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	fff00080 	.word	0xfff00080

0800737c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800737c:	b480      	push	{r7}
 800737e:	b087      	sub	sp, #28
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8007388:	2300      	movs	r3, #0
 800738a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	1c5a      	adds	r2, r3, #1
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007396:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800739e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80073aa:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80073b2:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80073ba:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	3b01      	subs	r3, #1
 80073c2:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80073c4:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	3b02      	subs	r3, #2
 80073cc:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80073ce:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80073d4:	4313      	orrs	r3, r2
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	4313      	orrs	r3, r2
 80073da:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	1c5a      	adds	r2, r3, #1
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6979      	ldr	r1, [r7, #20]
 80073e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	371c      	adds	r7, #28
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
	...

080073f8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b087      	sub	sp, #28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
 8007404:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8007406:	2300      	movs	r3, #0
 8007408:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007410:	d122      	bne.n	8007458 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800741a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	4b15      	ldr	r3, [pc, #84]	@ (8007474 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8007420:	4013      	ands	r3, r2
 8007422:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800742e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8007436:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800743e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8007444:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	4313      	orrs	r3, r2
 800744a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	6979      	ldr	r1, [r7, #20]
 8007452:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007456:	e005      	b.n	8007464 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8007460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	371c      	adds	r7, #28
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	cff00000 	.word	0xcff00000

08007478 <siprintf>:
 8007478:	b40e      	push	{r1, r2, r3}
 800747a:	b500      	push	{lr}
 800747c:	b09c      	sub	sp, #112	@ 0x70
 800747e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007480:	9002      	str	r0, [sp, #8]
 8007482:	9006      	str	r0, [sp, #24]
 8007484:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007488:	4809      	ldr	r0, [pc, #36]	@ (80074b0 <siprintf+0x38>)
 800748a:	9107      	str	r1, [sp, #28]
 800748c:	9104      	str	r1, [sp, #16]
 800748e:	4909      	ldr	r1, [pc, #36]	@ (80074b4 <siprintf+0x3c>)
 8007490:	f853 2b04 	ldr.w	r2, [r3], #4
 8007494:	9105      	str	r1, [sp, #20]
 8007496:	6800      	ldr	r0, [r0, #0]
 8007498:	9301      	str	r3, [sp, #4]
 800749a:	a902      	add	r1, sp, #8
 800749c:	f000 f994 	bl	80077c8 <_svfiprintf_r>
 80074a0:	9b02      	ldr	r3, [sp, #8]
 80074a2:	2200      	movs	r2, #0
 80074a4:	701a      	strb	r2, [r3, #0]
 80074a6:	b01c      	add	sp, #112	@ 0x70
 80074a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80074ac:	b003      	add	sp, #12
 80074ae:	4770      	bx	lr
 80074b0:	20000014 	.word	0x20000014
 80074b4:	ffff0208 	.word	0xffff0208

080074b8 <memset>:
 80074b8:	4402      	add	r2, r0
 80074ba:	4603      	mov	r3, r0
 80074bc:	4293      	cmp	r3, r2
 80074be:	d100      	bne.n	80074c2 <memset+0xa>
 80074c0:	4770      	bx	lr
 80074c2:	f803 1b01 	strb.w	r1, [r3], #1
 80074c6:	e7f9      	b.n	80074bc <memset+0x4>

080074c8 <__errno>:
 80074c8:	4b01      	ldr	r3, [pc, #4]	@ (80074d0 <__errno+0x8>)
 80074ca:	6818      	ldr	r0, [r3, #0]
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	20000014 	.word	0x20000014

080074d4 <__libc_init_array>:
 80074d4:	b570      	push	{r4, r5, r6, lr}
 80074d6:	4d0d      	ldr	r5, [pc, #52]	@ (800750c <__libc_init_array+0x38>)
 80074d8:	4c0d      	ldr	r4, [pc, #52]	@ (8007510 <__libc_init_array+0x3c>)
 80074da:	1b64      	subs	r4, r4, r5
 80074dc:	10a4      	asrs	r4, r4, #2
 80074de:	2600      	movs	r6, #0
 80074e0:	42a6      	cmp	r6, r4
 80074e2:	d109      	bne.n	80074f8 <__libc_init_array+0x24>
 80074e4:	4d0b      	ldr	r5, [pc, #44]	@ (8007514 <__libc_init_array+0x40>)
 80074e6:	4c0c      	ldr	r4, [pc, #48]	@ (8007518 <__libc_init_array+0x44>)
 80074e8:	f000 fca0 	bl	8007e2c <_init>
 80074ec:	1b64      	subs	r4, r4, r5
 80074ee:	10a4      	asrs	r4, r4, #2
 80074f0:	2600      	movs	r6, #0
 80074f2:	42a6      	cmp	r6, r4
 80074f4:	d105      	bne.n	8007502 <__libc_init_array+0x2e>
 80074f6:	bd70      	pop	{r4, r5, r6, pc}
 80074f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80074fc:	4798      	blx	r3
 80074fe:	3601      	adds	r6, #1
 8007500:	e7ee      	b.n	80074e0 <__libc_init_array+0xc>
 8007502:	f855 3b04 	ldr.w	r3, [r5], #4
 8007506:	4798      	blx	r3
 8007508:	3601      	adds	r6, #1
 800750a:	e7f2      	b.n	80074f2 <__libc_init_array+0x1e>
 800750c:	08007ee0 	.word	0x08007ee0
 8007510:	08007ee0 	.word	0x08007ee0
 8007514:	08007ee0 	.word	0x08007ee0
 8007518:	08007ee4 	.word	0x08007ee4

0800751c <__retarget_lock_acquire_recursive>:
 800751c:	4770      	bx	lr

0800751e <__retarget_lock_release_recursive>:
 800751e:	4770      	bx	lr

08007520 <_free_r>:
 8007520:	b538      	push	{r3, r4, r5, lr}
 8007522:	4605      	mov	r5, r0
 8007524:	2900      	cmp	r1, #0
 8007526:	d041      	beq.n	80075ac <_free_r+0x8c>
 8007528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800752c:	1f0c      	subs	r4, r1, #4
 800752e:	2b00      	cmp	r3, #0
 8007530:	bfb8      	it	lt
 8007532:	18e4      	addlt	r4, r4, r3
 8007534:	f000 f8e0 	bl	80076f8 <__malloc_lock>
 8007538:	4a1d      	ldr	r2, [pc, #116]	@ (80075b0 <_free_r+0x90>)
 800753a:	6813      	ldr	r3, [r2, #0]
 800753c:	b933      	cbnz	r3, 800754c <_free_r+0x2c>
 800753e:	6063      	str	r3, [r4, #4]
 8007540:	6014      	str	r4, [r2, #0]
 8007542:	4628      	mov	r0, r5
 8007544:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007548:	f000 b8dc 	b.w	8007704 <__malloc_unlock>
 800754c:	42a3      	cmp	r3, r4
 800754e:	d908      	bls.n	8007562 <_free_r+0x42>
 8007550:	6820      	ldr	r0, [r4, #0]
 8007552:	1821      	adds	r1, r4, r0
 8007554:	428b      	cmp	r3, r1
 8007556:	bf01      	itttt	eq
 8007558:	6819      	ldreq	r1, [r3, #0]
 800755a:	685b      	ldreq	r3, [r3, #4]
 800755c:	1809      	addeq	r1, r1, r0
 800755e:	6021      	streq	r1, [r4, #0]
 8007560:	e7ed      	b.n	800753e <_free_r+0x1e>
 8007562:	461a      	mov	r2, r3
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	b10b      	cbz	r3, 800756c <_free_r+0x4c>
 8007568:	42a3      	cmp	r3, r4
 800756a:	d9fa      	bls.n	8007562 <_free_r+0x42>
 800756c:	6811      	ldr	r1, [r2, #0]
 800756e:	1850      	adds	r0, r2, r1
 8007570:	42a0      	cmp	r0, r4
 8007572:	d10b      	bne.n	800758c <_free_r+0x6c>
 8007574:	6820      	ldr	r0, [r4, #0]
 8007576:	4401      	add	r1, r0
 8007578:	1850      	adds	r0, r2, r1
 800757a:	4283      	cmp	r3, r0
 800757c:	6011      	str	r1, [r2, #0]
 800757e:	d1e0      	bne.n	8007542 <_free_r+0x22>
 8007580:	6818      	ldr	r0, [r3, #0]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	6053      	str	r3, [r2, #4]
 8007586:	4408      	add	r0, r1
 8007588:	6010      	str	r0, [r2, #0]
 800758a:	e7da      	b.n	8007542 <_free_r+0x22>
 800758c:	d902      	bls.n	8007594 <_free_r+0x74>
 800758e:	230c      	movs	r3, #12
 8007590:	602b      	str	r3, [r5, #0]
 8007592:	e7d6      	b.n	8007542 <_free_r+0x22>
 8007594:	6820      	ldr	r0, [r4, #0]
 8007596:	1821      	adds	r1, r4, r0
 8007598:	428b      	cmp	r3, r1
 800759a:	bf04      	itt	eq
 800759c:	6819      	ldreq	r1, [r3, #0]
 800759e:	685b      	ldreq	r3, [r3, #4]
 80075a0:	6063      	str	r3, [r4, #4]
 80075a2:	bf04      	itt	eq
 80075a4:	1809      	addeq	r1, r1, r0
 80075a6:	6021      	streq	r1, [r4, #0]
 80075a8:	6054      	str	r4, [r2, #4]
 80075aa:	e7ca      	b.n	8007542 <_free_r+0x22>
 80075ac:	bd38      	pop	{r3, r4, r5, pc}
 80075ae:	bf00      	nop
 80075b0:	20000580 	.word	0x20000580

080075b4 <sbrk_aligned>:
 80075b4:	b570      	push	{r4, r5, r6, lr}
 80075b6:	4e0f      	ldr	r6, [pc, #60]	@ (80075f4 <sbrk_aligned+0x40>)
 80075b8:	460c      	mov	r4, r1
 80075ba:	6831      	ldr	r1, [r6, #0]
 80075bc:	4605      	mov	r5, r0
 80075be:	b911      	cbnz	r1, 80075c6 <sbrk_aligned+0x12>
 80075c0:	f000 fba6 	bl	8007d10 <_sbrk_r>
 80075c4:	6030      	str	r0, [r6, #0]
 80075c6:	4621      	mov	r1, r4
 80075c8:	4628      	mov	r0, r5
 80075ca:	f000 fba1 	bl	8007d10 <_sbrk_r>
 80075ce:	1c43      	adds	r3, r0, #1
 80075d0:	d103      	bne.n	80075da <sbrk_aligned+0x26>
 80075d2:	f04f 34ff 	mov.w	r4, #4294967295
 80075d6:	4620      	mov	r0, r4
 80075d8:	bd70      	pop	{r4, r5, r6, pc}
 80075da:	1cc4      	adds	r4, r0, #3
 80075dc:	f024 0403 	bic.w	r4, r4, #3
 80075e0:	42a0      	cmp	r0, r4
 80075e2:	d0f8      	beq.n	80075d6 <sbrk_aligned+0x22>
 80075e4:	1a21      	subs	r1, r4, r0
 80075e6:	4628      	mov	r0, r5
 80075e8:	f000 fb92 	bl	8007d10 <_sbrk_r>
 80075ec:	3001      	adds	r0, #1
 80075ee:	d1f2      	bne.n	80075d6 <sbrk_aligned+0x22>
 80075f0:	e7ef      	b.n	80075d2 <sbrk_aligned+0x1e>
 80075f2:	bf00      	nop
 80075f4:	2000057c 	.word	0x2000057c

080075f8 <_malloc_r>:
 80075f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075fc:	1ccd      	adds	r5, r1, #3
 80075fe:	f025 0503 	bic.w	r5, r5, #3
 8007602:	3508      	adds	r5, #8
 8007604:	2d0c      	cmp	r5, #12
 8007606:	bf38      	it	cc
 8007608:	250c      	movcc	r5, #12
 800760a:	2d00      	cmp	r5, #0
 800760c:	4606      	mov	r6, r0
 800760e:	db01      	blt.n	8007614 <_malloc_r+0x1c>
 8007610:	42a9      	cmp	r1, r5
 8007612:	d904      	bls.n	800761e <_malloc_r+0x26>
 8007614:	230c      	movs	r3, #12
 8007616:	6033      	str	r3, [r6, #0]
 8007618:	2000      	movs	r0, #0
 800761a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800761e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80076f4 <_malloc_r+0xfc>
 8007622:	f000 f869 	bl	80076f8 <__malloc_lock>
 8007626:	f8d8 3000 	ldr.w	r3, [r8]
 800762a:	461c      	mov	r4, r3
 800762c:	bb44      	cbnz	r4, 8007680 <_malloc_r+0x88>
 800762e:	4629      	mov	r1, r5
 8007630:	4630      	mov	r0, r6
 8007632:	f7ff ffbf 	bl	80075b4 <sbrk_aligned>
 8007636:	1c43      	adds	r3, r0, #1
 8007638:	4604      	mov	r4, r0
 800763a:	d158      	bne.n	80076ee <_malloc_r+0xf6>
 800763c:	f8d8 4000 	ldr.w	r4, [r8]
 8007640:	4627      	mov	r7, r4
 8007642:	2f00      	cmp	r7, #0
 8007644:	d143      	bne.n	80076ce <_malloc_r+0xd6>
 8007646:	2c00      	cmp	r4, #0
 8007648:	d04b      	beq.n	80076e2 <_malloc_r+0xea>
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	4639      	mov	r1, r7
 800764e:	4630      	mov	r0, r6
 8007650:	eb04 0903 	add.w	r9, r4, r3
 8007654:	f000 fb5c 	bl	8007d10 <_sbrk_r>
 8007658:	4581      	cmp	r9, r0
 800765a:	d142      	bne.n	80076e2 <_malloc_r+0xea>
 800765c:	6821      	ldr	r1, [r4, #0]
 800765e:	1a6d      	subs	r5, r5, r1
 8007660:	4629      	mov	r1, r5
 8007662:	4630      	mov	r0, r6
 8007664:	f7ff ffa6 	bl	80075b4 <sbrk_aligned>
 8007668:	3001      	adds	r0, #1
 800766a:	d03a      	beq.n	80076e2 <_malloc_r+0xea>
 800766c:	6823      	ldr	r3, [r4, #0]
 800766e:	442b      	add	r3, r5
 8007670:	6023      	str	r3, [r4, #0]
 8007672:	f8d8 3000 	ldr.w	r3, [r8]
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	bb62      	cbnz	r2, 80076d4 <_malloc_r+0xdc>
 800767a:	f8c8 7000 	str.w	r7, [r8]
 800767e:	e00f      	b.n	80076a0 <_malloc_r+0xa8>
 8007680:	6822      	ldr	r2, [r4, #0]
 8007682:	1b52      	subs	r2, r2, r5
 8007684:	d420      	bmi.n	80076c8 <_malloc_r+0xd0>
 8007686:	2a0b      	cmp	r2, #11
 8007688:	d917      	bls.n	80076ba <_malloc_r+0xc2>
 800768a:	1961      	adds	r1, r4, r5
 800768c:	42a3      	cmp	r3, r4
 800768e:	6025      	str	r5, [r4, #0]
 8007690:	bf18      	it	ne
 8007692:	6059      	strne	r1, [r3, #4]
 8007694:	6863      	ldr	r3, [r4, #4]
 8007696:	bf08      	it	eq
 8007698:	f8c8 1000 	streq.w	r1, [r8]
 800769c:	5162      	str	r2, [r4, r5]
 800769e:	604b      	str	r3, [r1, #4]
 80076a0:	4630      	mov	r0, r6
 80076a2:	f000 f82f 	bl	8007704 <__malloc_unlock>
 80076a6:	f104 000b 	add.w	r0, r4, #11
 80076aa:	1d23      	adds	r3, r4, #4
 80076ac:	f020 0007 	bic.w	r0, r0, #7
 80076b0:	1ac2      	subs	r2, r0, r3
 80076b2:	bf1c      	itt	ne
 80076b4:	1a1b      	subne	r3, r3, r0
 80076b6:	50a3      	strne	r3, [r4, r2]
 80076b8:	e7af      	b.n	800761a <_malloc_r+0x22>
 80076ba:	6862      	ldr	r2, [r4, #4]
 80076bc:	42a3      	cmp	r3, r4
 80076be:	bf0c      	ite	eq
 80076c0:	f8c8 2000 	streq.w	r2, [r8]
 80076c4:	605a      	strne	r2, [r3, #4]
 80076c6:	e7eb      	b.n	80076a0 <_malloc_r+0xa8>
 80076c8:	4623      	mov	r3, r4
 80076ca:	6864      	ldr	r4, [r4, #4]
 80076cc:	e7ae      	b.n	800762c <_malloc_r+0x34>
 80076ce:	463c      	mov	r4, r7
 80076d0:	687f      	ldr	r7, [r7, #4]
 80076d2:	e7b6      	b.n	8007642 <_malloc_r+0x4a>
 80076d4:	461a      	mov	r2, r3
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	42a3      	cmp	r3, r4
 80076da:	d1fb      	bne.n	80076d4 <_malloc_r+0xdc>
 80076dc:	2300      	movs	r3, #0
 80076de:	6053      	str	r3, [r2, #4]
 80076e0:	e7de      	b.n	80076a0 <_malloc_r+0xa8>
 80076e2:	230c      	movs	r3, #12
 80076e4:	6033      	str	r3, [r6, #0]
 80076e6:	4630      	mov	r0, r6
 80076e8:	f000 f80c 	bl	8007704 <__malloc_unlock>
 80076ec:	e794      	b.n	8007618 <_malloc_r+0x20>
 80076ee:	6005      	str	r5, [r0, #0]
 80076f0:	e7d6      	b.n	80076a0 <_malloc_r+0xa8>
 80076f2:	bf00      	nop
 80076f4:	20000580 	.word	0x20000580

080076f8 <__malloc_lock>:
 80076f8:	4801      	ldr	r0, [pc, #4]	@ (8007700 <__malloc_lock+0x8>)
 80076fa:	f7ff bf0f 	b.w	800751c <__retarget_lock_acquire_recursive>
 80076fe:	bf00      	nop
 8007700:	20000578 	.word	0x20000578

08007704 <__malloc_unlock>:
 8007704:	4801      	ldr	r0, [pc, #4]	@ (800770c <__malloc_unlock+0x8>)
 8007706:	f7ff bf0a 	b.w	800751e <__retarget_lock_release_recursive>
 800770a:	bf00      	nop
 800770c:	20000578 	.word	0x20000578

08007710 <__ssputs_r>:
 8007710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007714:	688e      	ldr	r6, [r1, #8]
 8007716:	461f      	mov	r7, r3
 8007718:	42be      	cmp	r6, r7
 800771a:	680b      	ldr	r3, [r1, #0]
 800771c:	4682      	mov	sl, r0
 800771e:	460c      	mov	r4, r1
 8007720:	4690      	mov	r8, r2
 8007722:	d82d      	bhi.n	8007780 <__ssputs_r+0x70>
 8007724:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007728:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800772c:	d026      	beq.n	800777c <__ssputs_r+0x6c>
 800772e:	6965      	ldr	r5, [r4, #20]
 8007730:	6909      	ldr	r1, [r1, #16]
 8007732:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007736:	eba3 0901 	sub.w	r9, r3, r1
 800773a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800773e:	1c7b      	adds	r3, r7, #1
 8007740:	444b      	add	r3, r9
 8007742:	106d      	asrs	r5, r5, #1
 8007744:	429d      	cmp	r5, r3
 8007746:	bf38      	it	cc
 8007748:	461d      	movcc	r5, r3
 800774a:	0553      	lsls	r3, r2, #21
 800774c:	d527      	bpl.n	800779e <__ssputs_r+0x8e>
 800774e:	4629      	mov	r1, r5
 8007750:	f7ff ff52 	bl	80075f8 <_malloc_r>
 8007754:	4606      	mov	r6, r0
 8007756:	b360      	cbz	r0, 80077b2 <__ssputs_r+0xa2>
 8007758:	6921      	ldr	r1, [r4, #16]
 800775a:	464a      	mov	r2, r9
 800775c:	f000 fae8 	bl	8007d30 <memcpy>
 8007760:	89a3      	ldrh	r3, [r4, #12]
 8007762:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800776a:	81a3      	strh	r3, [r4, #12]
 800776c:	6126      	str	r6, [r4, #16]
 800776e:	6165      	str	r5, [r4, #20]
 8007770:	444e      	add	r6, r9
 8007772:	eba5 0509 	sub.w	r5, r5, r9
 8007776:	6026      	str	r6, [r4, #0]
 8007778:	60a5      	str	r5, [r4, #8]
 800777a:	463e      	mov	r6, r7
 800777c:	42be      	cmp	r6, r7
 800777e:	d900      	bls.n	8007782 <__ssputs_r+0x72>
 8007780:	463e      	mov	r6, r7
 8007782:	6820      	ldr	r0, [r4, #0]
 8007784:	4632      	mov	r2, r6
 8007786:	4641      	mov	r1, r8
 8007788:	f000 faa8 	bl	8007cdc <memmove>
 800778c:	68a3      	ldr	r3, [r4, #8]
 800778e:	1b9b      	subs	r3, r3, r6
 8007790:	60a3      	str	r3, [r4, #8]
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	4433      	add	r3, r6
 8007796:	6023      	str	r3, [r4, #0]
 8007798:	2000      	movs	r0, #0
 800779a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800779e:	462a      	mov	r2, r5
 80077a0:	f000 fad4 	bl	8007d4c <_realloc_r>
 80077a4:	4606      	mov	r6, r0
 80077a6:	2800      	cmp	r0, #0
 80077a8:	d1e0      	bne.n	800776c <__ssputs_r+0x5c>
 80077aa:	6921      	ldr	r1, [r4, #16]
 80077ac:	4650      	mov	r0, sl
 80077ae:	f7ff feb7 	bl	8007520 <_free_r>
 80077b2:	230c      	movs	r3, #12
 80077b4:	f8ca 3000 	str.w	r3, [sl]
 80077b8:	89a3      	ldrh	r3, [r4, #12]
 80077ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077be:	81a3      	strh	r3, [r4, #12]
 80077c0:	f04f 30ff 	mov.w	r0, #4294967295
 80077c4:	e7e9      	b.n	800779a <__ssputs_r+0x8a>
	...

080077c8 <_svfiprintf_r>:
 80077c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077cc:	4698      	mov	r8, r3
 80077ce:	898b      	ldrh	r3, [r1, #12]
 80077d0:	061b      	lsls	r3, r3, #24
 80077d2:	b09d      	sub	sp, #116	@ 0x74
 80077d4:	4607      	mov	r7, r0
 80077d6:	460d      	mov	r5, r1
 80077d8:	4614      	mov	r4, r2
 80077da:	d510      	bpl.n	80077fe <_svfiprintf_r+0x36>
 80077dc:	690b      	ldr	r3, [r1, #16]
 80077de:	b973      	cbnz	r3, 80077fe <_svfiprintf_r+0x36>
 80077e0:	2140      	movs	r1, #64	@ 0x40
 80077e2:	f7ff ff09 	bl	80075f8 <_malloc_r>
 80077e6:	6028      	str	r0, [r5, #0]
 80077e8:	6128      	str	r0, [r5, #16]
 80077ea:	b930      	cbnz	r0, 80077fa <_svfiprintf_r+0x32>
 80077ec:	230c      	movs	r3, #12
 80077ee:	603b      	str	r3, [r7, #0]
 80077f0:	f04f 30ff 	mov.w	r0, #4294967295
 80077f4:	b01d      	add	sp, #116	@ 0x74
 80077f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077fa:	2340      	movs	r3, #64	@ 0x40
 80077fc:	616b      	str	r3, [r5, #20]
 80077fe:	2300      	movs	r3, #0
 8007800:	9309      	str	r3, [sp, #36]	@ 0x24
 8007802:	2320      	movs	r3, #32
 8007804:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007808:	f8cd 800c 	str.w	r8, [sp, #12]
 800780c:	2330      	movs	r3, #48	@ 0x30
 800780e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80079ac <_svfiprintf_r+0x1e4>
 8007812:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007816:	f04f 0901 	mov.w	r9, #1
 800781a:	4623      	mov	r3, r4
 800781c:	469a      	mov	sl, r3
 800781e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007822:	b10a      	cbz	r2, 8007828 <_svfiprintf_r+0x60>
 8007824:	2a25      	cmp	r2, #37	@ 0x25
 8007826:	d1f9      	bne.n	800781c <_svfiprintf_r+0x54>
 8007828:	ebba 0b04 	subs.w	fp, sl, r4
 800782c:	d00b      	beq.n	8007846 <_svfiprintf_r+0x7e>
 800782e:	465b      	mov	r3, fp
 8007830:	4622      	mov	r2, r4
 8007832:	4629      	mov	r1, r5
 8007834:	4638      	mov	r0, r7
 8007836:	f7ff ff6b 	bl	8007710 <__ssputs_r>
 800783a:	3001      	adds	r0, #1
 800783c:	f000 80a7 	beq.w	800798e <_svfiprintf_r+0x1c6>
 8007840:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007842:	445a      	add	r2, fp
 8007844:	9209      	str	r2, [sp, #36]	@ 0x24
 8007846:	f89a 3000 	ldrb.w	r3, [sl]
 800784a:	2b00      	cmp	r3, #0
 800784c:	f000 809f 	beq.w	800798e <_svfiprintf_r+0x1c6>
 8007850:	2300      	movs	r3, #0
 8007852:	f04f 32ff 	mov.w	r2, #4294967295
 8007856:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800785a:	f10a 0a01 	add.w	sl, sl, #1
 800785e:	9304      	str	r3, [sp, #16]
 8007860:	9307      	str	r3, [sp, #28]
 8007862:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007866:	931a      	str	r3, [sp, #104]	@ 0x68
 8007868:	4654      	mov	r4, sl
 800786a:	2205      	movs	r2, #5
 800786c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007870:	484e      	ldr	r0, [pc, #312]	@ (80079ac <_svfiprintf_r+0x1e4>)
 8007872:	f7f8 fcad 	bl	80001d0 <memchr>
 8007876:	9a04      	ldr	r2, [sp, #16]
 8007878:	b9d8      	cbnz	r0, 80078b2 <_svfiprintf_r+0xea>
 800787a:	06d0      	lsls	r0, r2, #27
 800787c:	bf44      	itt	mi
 800787e:	2320      	movmi	r3, #32
 8007880:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007884:	0711      	lsls	r1, r2, #28
 8007886:	bf44      	itt	mi
 8007888:	232b      	movmi	r3, #43	@ 0x2b
 800788a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800788e:	f89a 3000 	ldrb.w	r3, [sl]
 8007892:	2b2a      	cmp	r3, #42	@ 0x2a
 8007894:	d015      	beq.n	80078c2 <_svfiprintf_r+0xfa>
 8007896:	9a07      	ldr	r2, [sp, #28]
 8007898:	4654      	mov	r4, sl
 800789a:	2000      	movs	r0, #0
 800789c:	f04f 0c0a 	mov.w	ip, #10
 80078a0:	4621      	mov	r1, r4
 80078a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078a6:	3b30      	subs	r3, #48	@ 0x30
 80078a8:	2b09      	cmp	r3, #9
 80078aa:	d94b      	bls.n	8007944 <_svfiprintf_r+0x17c>
 80078ac:	b1b0      	cbz	r0, 80078dc <_svfiprintf_r+0x114>
 80078ae:	9207      	str	r2, [sp, #28]
 80078b0:	e014      	b.n	80078dc <_svfiprintf_r+0x114>
 80078b2:	eba0 0308 	sub.w	r3, r0, r8
 80078b6:	fa09 f303 	lsl.w	r3, r9, r3
 80078ba:	4313      	orrs	r3, r2
 80078bc:	9304      	str	r3, [sp, #16]
 80078be:	46a2      	mov	sl, r4
 80078c0:	e7d2      	b.n	8007868 <_svfiprintf_r+0xa0>
 80078c2:	9b03      	ldr	r3, [sp, #12]
 80078c4:	1d19      	adds	r1, r3, #4
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	9103      	str	r1, [sp, #12]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	bfbb      	ittet	lt
 80078ce:	425b      	neglt	r3, r3
 80078d0:	f042 0202 	orrlt.w	r2, r2, #2
 80078d4:	9307      	strge	r3, [sp, #28]
 80078d6:	9307      	strlt	r3, [sp, #28]
 80078d8:	bfb8      	it	lt
 80078da:	9204      	strlt	r2, [sp, #16]
 80078dc:	7823      	ldrb	r3, [r4, #0]
 80078de:	2b2e      	cmp	r3, #46	@ 0x2e
 80078e0:	d10a      	bne.n	80078f8 <_svfiprintf_r+0x130>
 80078e2:	7863      	ldrb	r3, [r4, #1]
 80078e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80078e6:	d132      	bne.n	800794e <_svfiprintf_r+0x186>
 80078e8:	9b03      	ldr	r3, [sp, #12]
 80078ea:	1d1a      	adds	r2, r3, #4
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	9203      	str	r2, [sp, #12]
 80078f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80078f4:	3402      	adds	r4, #2
 80078f6:	9305      	str	r3, [sp, #20]
 80078f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80079bc <_svfiprintf_r+0x1f4>
 80078fc:	7821      	ldrb	r1, [r4, #0]
 80078fe:	2203      	movs	r2, #3
 8007900:	4650      	mov	r0, sl
 8007902:	f7f8 fc65 	bl	80001d0 <memchr>
 8007906:	b138      	cbz	r0, 8007918 <_svfiprintf_r+0x150>
 8007908:	9b04      	ldr	r3, [sp, #16]
 800790a:	eba0 000a 	sub.w	r0, r0, sl
 800790e:	2240      	movs	r2, #64	@ 0x40
 8007910:	4082      	lsls	r2, r0
 8007912:	4313      	orrs	r3, r2
 8007914:	3401      	adds	r4, #1
 8007916:	9304      	str	r3, [sp, #16]
 8007918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800791c:	4824      	ldr	r0, [pc, #144]	@ (80079b0 <_svfiprintf_r+0x1e8>)
 800791e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007922:	2206      	movs	r2, #6
 8007924:	f7f8 fc54 	bl	80001d0 <memchr>
 8007928:	2800      	cmp	r0, #0
 800792a:	d036      	beq.n	800799a <_svfiprintf_r+0x1d2>
 800792c:	4b21      	ldr	r3, [pc, #132]	@ (80079b4 <_svfiprintf_r+0x1ec>)
 800792e:	bb1b      	cbnz	r3, 8007978 <_svfiprintf_r+0x1b0>
 8007930:	9b03      	ldr	r3, [sp, #12]
 8007932:	3307      	adds	r3, #7
 8007934:	f023 0307 	bic.w	r3, r3, #7
 8007938:	3308      	adds	r3, #8
 800793a:	9303      	str	r3, [sp, #12]
 800793c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800793e:	4433      	add	r3, r6
 8007940:	9309      	str	r3, [sp, #36]	@ 0x24
 8007942:	e76a      	b.n	800781a <_svfiprintf_r+0x52>
 8007944:	fb0c 3202 	mla	r2, ip, r2, r3
 8007948:	460c      	mov	r4, r1
 800794a:	2001      	movs	r0, #1
 800794c:	e7a8      	b.n	80078a0 <_svfiprintf_r+0xd8>
 800794e:	2300      	movs	r3, #0
 8007950:	3401      	adds	r4, #1
 8007952:	9305      	str	r3, [sp, #20]
 8007954:	4619      	mov	r1, r3
 8007956:	f04f 0c0a 	mov.w	ip, #10
 800795a:	4620      	mov	r0, r4
 800795c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007960:	3a30      	subs	r2, #48	@ 0x30
 8007962:	2a09      	cmp	r2, #9
 8007964:	d903      	bls.n	800796e <_svfiprintf_r+0x1a6>
 8007966:	2b00      	cmp	r3, #0
 8007968:	d0c6      	beq.n	80078f8 <_svfiprintf_r+0x130>
 800796a:	9105      	str	r1, [sp, #20]
 800796c:	e7c4      	b.n	80078f8 <_svfiprintf_r+0x130>
 800796e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007972:	4604      	mov	r4, r0
 8007974:	2301      	movs	r3, #1
 8007976:	e7f0      	b.n	800795a <_svfiprintf_r+0x192>
 8007978:	ab03      	add	r3, sp, #12
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	462a      	mov	r2, r5
 800797e:	4b0e      	ldr	r3, [pc, #56]	@ (80079b8 <_svfiprintf_r+0x1f0>)
 8007980:	a904      	add	r1, sp, #16
 8007982:	4638      	mov	r0, r7
 8007984:	f3af 8000 	nop.w
 8007988:	1c42      	adds	r2, r0, #1
 800798a:	4606      	mov	r6, r0
 800798c:	d1d6      	bne.n	800793c <_svfiprintf_r+0x174>
 800798e:	89ab      	ldrh	r3, [r5, #12]
 8007990:	065b      	lsls	r3, r3, #25
 8007992:	f53f af2d 	bmi.w	80077f0 <_svfiprintf_r+0x28>
 8007996:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007998:	e72c      	b.n	80077f4 <_svfiprintf_r+0x2c>
 800799a:	ab03      	add	r3, sp, #12
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	462a      	mov	r2, r5
 80079a0:	4b05      	ldr	r3, [pc, #20]	@ (80079b8 <_svfiprintf_r+0x1f0>)
 80079a2:	a904      	add	r1, sp, #16
 80079a4:	4638      	mov	r0, r7
 80079a6:	f000 f879 	bl	8007a9c <_printf_i>
 80079aa:	e7ed      	b.n	8007988 <_svfiprintf_r+0x1c0>
 80079ac:	08007ea4 	.word	0x08007ea4
 80079b0:	08007eae 	.word	0x08007eae
 80079b4:	00000000 	.word	0x00000000
 80079b8:	08007711 	.word	0x08007711
 80079bc:	08007eaa 	.word	0x08007eaa

080079c0 <_printf_common>:
 80079c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079c4:	4616      	mov	r6, r2
 80079c6:	4698      	mov	r8, r3
 80079c8:	688a      	ldr	r2, [r1, #8]
 80079ca:	690b      	ldr	r3, [r1, #16]
 80079cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80079d0:	4293      	cmp	r3, r2
 80079d2:	bfb8      	it	lt
 80079d4:	4613      	movlt	r3, r2
 80079d6:	6033      	str	r3, [r6, #0]
 80079d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80079dc:	4607      	mov	r7, r0
 80079de:	460c      	mov	r4, r1
 80079e0:	b10a      	cbz	r2, 80079e6 <_printf_common+0x26>
 80079e2:	3301      	adds	r3, #1
 80079e4:	6033      	str	r3, [r6, #0]
 80079e6:	6823      	ldr	r3, [r4, #0]
 80079e8:	0699      	lsls	r1, r3, #26
 80079ea:	bf42      	ittt	mi
 80079ec:	6833      	ldrmi	r3, [r6, #0]
 80079ee:	3302      	addmi	r3, #2
 80079f0:	6033      	strmi	r3, [r6, #0]
 80079f2:	6825      	ldr	r5, [r4, #0]
 80079f4:	f015 0506 	ands.w	r5, r5, #6
 80079f8:	d106      	bne.n	8007a08 <_printf_common+0x48>
 80079fa:	f104 0a19 	add.w	sl, r4, #25
 80079fe:	68e3      	ldr	r3, [r4, #12]
 8007a00:	6832      	ldr	r2, [r6, #0]
 8007a02:	1a9b      	subs	r3, r3, r2
 8007a04:	42ab      	cmp	r3, r5
 8007a06:	dc26      	bgt.n	8007a56 <_printf_common+0x96>
 8007a08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a0c:	6822      	ldr	r2, [r4, #0]
 8007a0e:	3b00      	subs	r3, #0
 8007a10:	bf18      	it	ne
 8007a12:	2301      	movne	r3, #1
 8007a14:	0692      	lsls	r2, r2, #26
 8007a16:	d42b      	bmi.n	8007a70 <_printf_common+0xb0>
 8007a18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a1c:	4641      	mov	r1, r8
 8007a1e:	4638      	mov	r0, r7
 8007a20:	47c8      	blx	r9
 8007a22:	3001      	adds	r0, #1
 8007a24:	d01e      	beq.n	8007a64 <_printf_common+0xa4>
 8007a26:	6823      	ldr	r3, [r4, #0]
 8007a28:	6922      	ldr	r2, [r4, #16]
 8007a2a:	f003 0306 	and.w	r3, r3, #6
 8007a2e:	2b04      	cmp	r3, #4
 8007a30:	bf02      	ittt	eq
 8007a32:	68e5      	ldreq	r5, [r4, #12]
 8007a34:	6833      	ldreq	r3, [r6, #0]
 8007a36:	1aed      	subeq	r5, r5, r3
 8007a38:	68a3      	ldr	r3, [r4, #8]
 8007a3a:	bf0c      	ite	eq
 8007a3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a40:	2500      	movne	r5, #0
 8007a42:	4293      	cmp	r3, r2
 8007a44:	bfc4      	itt	gt
 8007a46:	1a9b      	subgt	r3, r3, r2
 8007a48:	18ed      	addgt	r5, r5, r3
 8007a4a:	2600      	movs	r6, #0
 8007a4c:	341a      	adds	r4, #26
 8007a4e:	42b5      	cmp	r5, r6
 8007a50:	d11a      	bne.n	8007a88 <_printf_common+0xc8>
 8007a52:	2000      	movs	r0, #0
 8007a54:	e008      	b.n	8007a68 <_printf_common+0xa8>
 8007a56:	2301      	movs	r3, #1
 8007a58:	4652      	mov	r2, sl
 8007a5a:	4641      	mov	r1, r8
 8007a5c:	4638      	mov	r0, r7
 8007a5e:	47c8      	blx	r9
 8007a60:	3001      	adds	r0, #1
 8007a62:	d103      	bne.n	8007a6c <_printf_common+0xac>
 8007a64:	f04f 30ff 	mov.w	r0, #4294967295
 8007a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a6c:	3501      	adds	r5, #1
 8007a6e:	e7c6      	b.n	80079fe <_printf_common+0x3e>
 8007a70:	18e1      	adds	r1, r4, r3
 8007a72:	1c5a      	adds	r2, r3, #1
 8007a74:	2030      	movs	r0, #48	@ 0x30
 8007a76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007a7a:	4422      	add	r2, r4
 8007a7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007a80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007a84:	3302      	adds	r3, #2
 8007a86:	e7c7      	b.n	8007a18 <_printf_common+0x58>
 8007a88:	2301      	movs	r3, #1
 8007a8a:	4622      	mov	r2, r4
 8007a8c:	4641      	mov	r1, r8
 8007a8e:	4638      	mov	r0, r7
 8007a90:	47c8      	blx	r9
 8007a92:	3001      	adds	r0, #1
 8007a94:	d0e6      	beq.n	8007a64 <_printf_common+0xa4>
 8007a96:	3601      	adds	r6, #1
 8007a98:	e7d9      	b.n	8007a4e <_printf_common+0x8e>
	...

08007a9c <_printf_i>:
 8007a9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa0:	7e0f      	ldrb	r7, [r1, #24]
 8007aa2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007aa4:	2f78      	cmp	r7, #120	@ 0x78
 8007aa6:	4691      	mov	r9, r2
 8007aa8:	4680      	mov	r8, r0
 8007aaa:	460c      	mov	r4, r1
 8007aac:	469a      	mov	sl, r3
 8007aae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007ab2:	d807      	bhi.n	8007ac4 <_printf_i+0x28>
 8007ab4:	2f62      	cmp	r7, #98	@ 0x62
 8007ab6:	d80a      	bhi.n	8007ace <_printf_i+0x32>
 8007ab8:	2f00      	cmp	r7, #0
 8007aba:	f000 80d2 	beq.w	8007c62 <_printf_i+0x1c6>
 8007abe:	2f58      	cmp	r7, #88	@ 0x58
 8007ac0:	f000 80b9 	beq.w	8007c36 <_printf_i+0x19a>
 8007ac4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ac8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007acc:	e03a      	b.n	8007b44 <_printf_i+0xa8>
 8007ace:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007ad2:	2b15      	cmp	r3, #21
 8007ad4:	d8f6      	bhi.n	8007ac4 <_printf_i+0x28>
 8007ad6:	a101      	add	r1, pc, #4	@ (adr r1, 8007adc <_printf_i+0x40>)
 8007ad8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007adc:	08007b35 	.word	0x08007b35
 8007ae0:	08007b49 	.word	0x08007b49
 8007ae4:	08007ac5 	.word	0x08007ac5
 8007ae8:	08007ac5 	.word	0x08007ac5
 8007aec:	08007ac5 	.word	0x08007ac5
 8007af0:	08007ac5 	.word	0x08007ac5
 8007af4:	08007b49 	.word	0x08007b49
 8007af8:	08007ac5 	.word	0x08007ac5
 8007afc:	08007ac5 	.word	0x08007ac5
 8007b00:	08007ac5 	.word	0x08007ac5
 8007b04:	08007ac5 	.word	0x08007ac5
 8007b08:	08007c49 	.word	0x08007c49
 8007b0c:	08007b73 	.word	0x08007b73
 8007b10:	08007c03 	.word	0x08007c03
 8007b14:	08007ac5 	.word	0x08007ac5
 8007b18:	08007ac5 	.word	0x08007ac5
 8007b1c:	08007c6b 	.word	0x08007c6b
 8007b20:	08007ac5 	.word	0x08007ac5
 8007b24:	08007b73 	.word	0x08007b73
 8007b28:	08007ac5 	.word	0x08007ac5
 8007b2c:	08007ac5 	.word	0x08007ac5
 8007b30:	08007c0b 	.word	0x08007c0b
 8007b34:	6833      	ldr	r3, [r6, #0]
 8007b36:	1d1a      	adds	r2, r3, #4
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	6032      	str	r2, [r6, #0]
 8007b3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007b44:	2301      	movs	r3, #1
 8007b46:	e09d      	b.n	8007c84 <_printf_i+0x1e8>
 8007b48:	6833      	ldr	r3, [r6, #0]
 8007b4a:	6820      	ldr	r0, [r4, #0]
 8007b4c:	1d19      	adds	r1, r3, #4
 8007b4e:	6031      	str	r1, [r6, #0]
 8007b50:	0606      	lsls	r6, r0, #24
 8007b52:	d501      	bpl.n	8007b58 <_printf_i+0xbc>
 8007b54:	681d      	ldr	r5, [r3, #0]
 8007b56:	e003      	b.n	8007b60 <_printf_i+0xc4>
 8007b58:	0645      	lsls	r5, r0, #25
 8007b5a:	d5fb      	bpl.n	8007b54 <_printf_i+0xb8>
 8007b5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007b60:	2d00      	cmp	r5, #0
 8007b62:	da03      	bge.n	8007b6c <_printf_i+0xd0>
 8007b64:	232d      	movs	r3, #45	@ 0x2d
 8007b66:	426d      	negs	r5, r5
 8007b68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b6c:	4859      	ldr	r0, [pc, #356]	@ (8007cd4 <_printf_i+0x238>)
 8007b6e:	230a      	movs	r3, #10
 8007b70:	e011      	b.n	8007b96 <_printf_i+0xfa>
 8007b72:	6821      	ldr	r1, [r4, #0]
 8007b74:	6833      	ldr	r3, [r6, #0]
 8007b76:	0608      	lsls	r0, r1, #24
 8007b78:	f853 5b04 	ldr.w	r5, [r3], #4
 8007b7c:	d402      	bmi.n	8007b84 <_printf_i+0xe8>
 8007b7e:	0649      	lsls	r1, r1, #25
 8007b80:	bf48      	it	mi
 8007b82:	b2ad      	uxthmi	r5, r5
 8007b84:	2f6f      	cmp	r7, #111	@ 0x6f
 8007b86:	4853      	ldr	r0, [pc, #332]	@ (8007cd4 <_printf_i+0x238>)
 8007b88:	6033      	str	r3, [r6, #0]
 8007b8a:	bf14      	ite	ne
 8007b8c:	230a      	movne	r3, #10
 8007b8e:	2308      	moveq	r3, #8
 8007b90:	2100      	movs	r1, #0
 8007b92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007b96:	6866      	ldr	r6, [r4, #4]
 8007b98:	60a6      	str	r6, [r4, #8]
 8007b9a:	2e00      	cmp	r6, #0
 8007b9c:	bfa2      	ittt	ge
 8007b9e:	6821      	ldrge	r1, [r4, #0]
 8007ba0:	f021 0104 	bicge.w	r1, r1, #4
 8007ba4:	6021      	strge	r1, [r4, #0]
 8007ba6:	b90d      	cbnz	r5, 8007bac <_printf_i+0x110>
 8007ba8:	2e00      	cmp	r6, #0
 8007baa:	d04b      	beq.n	8007c44 <_printf_i+0x1a8>
 8007bac:	4616      	mov	r6, r2
 8007bae:	fbb5 f1f3 	udiv	r1, r5, r3
 8007bb2:	fb03 5711 	mls	r7, r3, r1, r5
 8007bb6:	5dc7      	ldrb	r7, [r0, r7]
 8007bb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007bbc:	462f      	mov	r7, r5
 8007bbe:	42bb      	cmp	r3, r7
 8007bc0:	460d      	mov	r5, r1
 8007bc2:	d9f4      	bls.n	8007bae <_printf_i+0x112>
 8007bc4:	2b08      	cmp	r3, #8
 8007bc6:	d10b      	bne.n	8007be0 <_printf_i+0x144>
 8007bc8:	6823      	ldr	r3, [r4, #0]
 8007bca:	07df      	lsls	r7, r3, #31
 8007bcc:	d508      	bpl.n	8007be0 <_printf_i+0x144>
 8007bce:	6923      	ldr	r3, [r4, #16]
 8007bd0:	6861      	ldr	r1, [r4, #4]
 8007bd2:	4299      	cmp	r1, r3
 8007bd4:	bfde      	ittt	le
 8007bd6:	2330      	movle	r3, #48	@ 0x30
 8007bd8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007bdc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007be0:	1b92      	subs	r2, r2, r6
 8007be2:	6122      	str	r2, [r4, #16]
 8007be4:	f8cd a000 	str.w	sl, [sp]
 8007be8:	464b      	mov	r3, r9
 8007bea:	aa03      	add	r2, sp, #12
 8007bec:	4621      	mov	r1, r4
 8007bee:	4640      	mov	r0, r8
 8007bf0:	f7ff fee6 	bl	80079c0 <_printf_common>
 8007bf4:	3001      	adds	r0, #1
 8007bf6:	d14a      	bne.n	8007c8e <_printf_i+0x1f2>
 8007bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bfc:	b004      	add	sp, #16
 8007bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c02:	6823      	ldr	r3, [r4, #0]
 8007c04:	f043 0320 	orr.w	r3, r3, #32
 8007c08:	6023      	str	r3, [r4, #0]
 8007c0a:	4833      	ldr	r0, [pc, #204]	@ (8007cd8 <_printf_i+0x23c>)
 8007c0c:	2778      	movs	r7, #120	@ 0x78
 8007c0e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007c12:	6823      	ldr	r3, [r4, #0]
 8007c14:	6831      	ldr	r1, [r6, #0]
 8007c16:	061f      	lsls	r7, r3, #24
 8007c18:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c1c:	d402      	bmi.n	8007c24 <_printf_i+0x188>
 8007c1e:	065f      	lsls	r7, r3, #25
 8007c20:	bf48      	it	mi
 8007c22:	b2ad      	uxthmi	r5, r5
 8007c24:	6031      	str	r1, [r6, #0]
 8007c26:	07d9      	lsls	r1, r3, #31
 8007c28:	bf44      	itt	mi
 8007c2a:	f043 0320 	orrmi.w	r3, r3, #32
 8007c2e:	6023      	strmi	r3, [r4, #0]
 8007c30:	b11d      	cbz	r5, 8007c3a <_printf_i+0x19e>
 8007c32:	2310      	movs	r3, #16
 8007c34:	e7ac      	b.n	8007b90 <_printf_i+0xf4>
 8007c36:	4827      	ldr	r0, [pc, #156]	@ (8007cd4 <_printf_i+0x238>)
 8007c38:	e7e9      	b.n	8007c0e <_printf_i+0x172>
 8007c3a:	6823      	ldr	r3, [r4, #0]
 8007c3c:	f023 0320 	bic.w	r3, r3, #32
 8007c40:	6023      	str	r3, [r4, #0]
 8007c42:	e7f6      	b.n	8007c32 <_printf_i+0x196>
 8007c44:	4616      	mov	r6, r2
 8007c46:	e7bd      	b.n	8007bc4 <_printf_i+0x128>
 8007c48:	6833      	ldr	r3, [r6, #0]
 8007c4a:	6825      	ldr	r5, [r4, #0]
 8007c4c:	6961      	ldr	r1, [r4, #20]
 8007c4e:	1d18      	adds	r0, r3, #4
 8007c50:	6030      	str	r0, [r6, #0]
 8007c52:	062e      	lsls	r6, r5, #24
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	d501      	bpl.n	8007c5c <_printf_i+0x1c0>
 8007c58:	6019      	str	r1, [r3, #0]
 8007c5a:	e002      	b.n	8007c62 <_printf_i+0x1c6>
 8007c5c:	0668      	lsls	r0, r5, #25
 8007c5e:	d5fb      	bpl.n	8007c58 <_printf_i+0x1bc>
 8007c60:	8019      	strh	r1, [r3, #0]
 8007c62:	2300      	movs	r3, #0
 8007c64:	6123      	str	r3, [r4, #16]
 8007c66:	4616      	mov	r6, r2
 8007c68:	e7bc      	b.n	8007be4 <_printf_i+0x148>
 8007c6a:	6833      	ldr	r3, [r6, #0]
 8007c6c:	1d1a      	adds	r2, r3, #4
 8007c6e:	6032      	str	r2, [r6, #0]
 8007c70:	681e      	ldr	r6, [r3, #0]
 8007c72:	6862      	ldr	r2, [r4, #4]
 8007c74:	2100      	movs	r1, #0
 8007c76:	4630      	mov	r0, r6
 8007c78:	f7f8 faaa 	bl	80001d0 <memchr>
 8007c7c:	b108      	cbz	r0, 8007c82 <_printf_i+0x1e6>
 8007c7e:	1b80      	subs	r0, r0, r6
 8007c80:	6060      	str	r0, [r4, #4]
 8007c82:	6863      	ldr	r3, [r4, #4]
 8007c84:	6123      	str	r3, [r4, #16]
 8007c86:	2300      	movs	r3, #0
 8007c88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c8c:	e7aa      	b.n	8007be4 <_printf_i+0x148>
 8007c8e:	6923      	ldr	r3, [r4, #16]
 8007c90:	4632      	mov	r2, r6
 8007c92:	4649      	mov	r1, r9
 8007c94:	4640      	mov	r0, r8
 8007c96:	47d0      	blx	sl
 8007c98:	3001      	adds	r0, #1
 8007c9a:	d0ad      	beq.n	8007bf8 <_printf_i+0x15c>
 8007c9c:	6823      	ldr	r3, [r4, #0]
 8007c9e:	079b      	lsls	r3, r3, #30
 8007ca0:	d413      	bmi.n	8007cca <_printf_i+0x22e>
 8007ca2:	68e0      	ldr	r0, [r4, #12]
 8007ca4:	9b03      	ldr	r3, [sp, #12]
 8007ca6:	4298      	cmp	r0, r3
 8007ca8:	bfb8      	it	lt
 8007caa:	4618      	movlt	r0, r3
 8007cac:	e7a6      	b.n	8007bfc <_printf_i+0x160>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	4632      	mov	r2, r6
 8007cb2:	4649      	mov	r1, r9
 8007cb4:	4640      	mov	r0, r8
 8007cb6:	47d0      	blx	sl
 8007cb8:	3001      	adds	r0, #1
 8007cba:	d09d      	beq.n	8007bf8 <_printf_i+0x15c>
 8007cbc:	3501      	adds	r5, #1
 8007cbe:	68e3      	ldr	r3, [r4, #12]
 8007cc0:	9903      	ldr	r1, [sp, #12]
 8007cc2:	1a5b      	subs	r3, r3, r1
 8007cc4:	42ab      	cmp	r3, r5
 8007cc6:	dcf2      	bgt.n	8007cae <_printf_i+0x212>
 8007cc8:	e7eb      	b.n	8007ca2 <_printf_i+0x206>
 8007cca:	2500      	movs	r5, #0
 8007ccc:	f104 0619 	add.w	r6, r4, #25
 8007cd0:	e7f5      	b.n	8007cbe <_printf_i+0x222>
 8007cd2:	bf00      	nop
 8007cd4:	08007eb5 	.word	0x08007eb5
 8007cd8:	08007ec6 	.word	0x08007ec6

08007cdc <memmove>:
 8007cdc:	4288      	cmp	r0, r1
 8007cde:	b510      	push	{r4, lr}
 8007ce0:	eb01 0402 	add.w	r4, r1, r2
 8007ce4:	d902      	bls.n	8007cec <memmove+0x10>
 8007ce6:	4284      	cmp	r4, r0
 8007ce8:	4623      	mov	r3, r4
 8007cea:	d807      	bhi.n	8007cfc <memmove+0x20>
 8007cec:	1e43      	subs	r3, r0, #1
 8007cee:	42a1      	cmp	r1, r4
 8007cf0:	d008      	beq.n	8007d04 <memmove+0x28>
 8007cf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007cfa:	e7f8      	b.n	8007cee <memmove+0x12>
 8007cfc:	4402      	add	r2, r0
 8007cfe:	4601      	mov	r1, r0
 8007d00:	428a      	cmp	r2, r1
 8007d02:	d100      	bne.n	8007d06 <memmove+0x2a>
 8007d04:	bd10      	pop	{r4, pc}
 8007d06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d0e:	e7f7      	b.n	8007d00 <memmove+0x24>

08007d10 <_sbrk_r>:
 8007d10:	b538      	push	{r3, r4, r5, lr}
 8007d12:	4d06      	ldr	r5, [pc, #24]	@ (8007d2c <_sbrk_r+0x1c>)
 8007d14:	2300      	movs	r3, #0
 8007d16:	4604      	mov	r4, r0
 8007d18:	4608      	mov	r0, r1
 8007d1a:	602b      	str	r3, [r5, #0]
 8007d1c:	f7f9 fff0 	bl	8001d00 <_sbrk>
 8007d20:	1c43      	adds	r3, r0, #1
 8007d22:	d102      	bne.n	8007d2a <_sbrk_r+0x1a>
 8007d24:	682b      	ldr	r3, [r5, #0]
 8007d26:	b103      	cbz	r3, 8007d2a <_sbrk_r+0x1a>
 8007d28:	6023      	str	r3, [r4, #0]
 8007d2a:	bd38      	pop	{r3, r4, r5, pc}
 8007d2c:	20000574 	.word	0x20000574

08007d30 <memcpy>:
 8007d30:	440a      	add	r2, r1
 8007d32:	4291      	cmp	r1, r2
 8007d34:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d38:	d100      	bne.n	8007d3c <memcpy+0xc>
 8007d3a:	4770      	bx	lr
 8007d3c:	b510      	push	{r4, lr}
 8007d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d46:	4291      	cmp	r1, r2
 8007d48:	d1f9      	bne.n	8007d3e <memcpy+0xe>
 8007d4a:	bd10      	pop	{r4, pc}

08007d4c <_realloc_r>:
 8007d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d50:	4680      	mov	r8, r0
 8007d52:	4615      	mov	r5, r2
 8007d54:	460c      	mov	r4, r1
 8007d56:	b921      	cbnz	r1, 8007d62 <_realloc_r+0x16>
 8007d58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d5c:	4611      	mov	r1, r2
 8007d5e:	f7ff bc4b 	b.w	80075f8 <_malloc_r>
 8007d62:	b92a      	cbnz	r2, 8007d70 <_realloc_r+0x24>
 8007d64:	f7ff fbdc 	bl	8007520 <_free_r>
 8007d68:	2400      	movs	r4, #0
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d70:	f000 f81a 	bl	8007da8 <_malloc_usable_size_r>
 8007d74:	4285      	cmp	r5, r0
 8007d76:	4606      	mov	r6, r0
 8007d78:	d802      	bhi.n	8007d80 <_realloc_r+0x34>
 8007d7a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007d7e:	d8f4      	bhi.n	8007d6a <_realloc_r+0x1e>
 8007d80:	4629      	mov	r1, r5
 8007d82:	4640      	mov	r0, r8
 8007d84:	f7ff fc38 	bl	80075f8 <_malloc_r>
 8007d88:	4607      	mov	r7, r0
 8007d8a:	2800      	cmp	r0, #0
 8007d8c:	d0ec      	beq.n	8007d68 <_realloc_r+0x1c>
 8007d8e:	42b5      	cmp	r5, r6
 8007d90:	462a      	mov	r2, r5
 8007d92:	4621      	mov	r1, r4
 8007d94:	bf28      	it	cs
 8007d96:	4632      	movcs	r2, r6
 8007d98:	f7ff ffca 	bl	8007d30 <memcpy>
 8007d9c:	4621      	mov	r1, r4
 8007d9e:	4640      	mov	r0, r8
 8007da0:	f7ff fbbe 	bl	8007520 <_free_r>
 8007da4:	463c      	mov	r4, r7
 8007da6:	e7e0      	b.n	8007d6a <_realloc_r+0x1e>

08007da8 <_malloc_usable_size_r>:
 8007da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dac:	1f18      	subs	r0, r3, #4
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	bfbc      	itt	lt
 8007db2:	580b      	ldrlt	r3, [r1, r0]
 8007db4:	18c0      	addlt	r0, r0, r3
 8007db6:	4770      	bx	lr

08007db8 <trunc>:
 8007db8:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8007dbc:	ec5c bb10 	vmov	fp, ip, d0
 8007dc0:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8007dc4:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 8007dc8:	2913      	cmp	r1, #19
 8007dca:	4664      	mov	r4, ip
 8007dcc:	dc14      	bgt.n	8007df8 <trunc+0x40>
 8007dce:	2900      	cmp	r1, #0
 8007dd0:	bfa4      	itt	ge
 8007dd2:	4b15      	ldrge	r3, [pc, #84]	@ (8007e28 <trunc+0x70>)
 8007dd4:	fa43 f101 	asrge.w	r1, r3, r1
 8007dd8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8007ddc:	bfad      	iteet	ge
 8007dde:	4021      	andge	r1, r4
 8007de0:	2200      	movlt	r2, #0
 8007de2:	4603      	movlt	r3, r0
 8007de4:	2200      	movge	r2, #0
 8007de6:	bfa8      	it	ge
 8007de8:	ea41 0300 	orrge.w	r3, r1, r0
 8007dec:	4693      	mov	fp, r2
 8007dee:	469c      	mov	ip, r3
 8007df0:	ec4c bb10 	vmov	d0, fp, ip
 8007df4:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8007df8:	2933      	cmp	r1, #51	@ 0x33
 8007dfa:	dd0b      	ble.n	8007e14 <trunc+0x5c>
 8007dfc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007e00:	d1f6      	bne.n	8007df0 <trunc+0x38>
 8007e02:	465a      	mov	r2, fp
 8007e04:	4663      	mov	r3, ip
 8007e06:	4658      	mov	r0, fp
 8007e08:	4621      	mov	r1, r4
 8007e0a:	f7f8 fa37 	bl	800027c <__adddf3>
 8007e0e:	4683      	mov	fp, r0
 8007e10:	468c      	mov	ip, r1
 8007e12:	e7ed      	b.n	8007df0 <trunc+0x38>
 8007e14:	f2a0 4013 	subw	r0, r0, #1043	@ 0x413
 8007e18:	f04f 33ff 	mov.w	r3, #4294967295
 8007e1c:	40c3      	lsrs	r3, r0
 8007e1e:	ea2b 0603 	bic.w	r6, fp, r3
 8007e22:	46b3      	mov	fp, r6
 8007e24:	46a4      	mov	ip, r4
 8007e26:	e7e3      	b.n	8007df0 <trunc+0x38>
 8007e28:	fff00000 	.word	0xfff00000

08007e2c <_init>:
 8007e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e2e:	bf00      	nop
 8007e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e32:	bc08      	pop	{r3}
 8007e34:	469e      	mov	lr, r3
 8007e36:	4770      	bx	lr

08007e38 <_fini>:
 8007e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e3a:	bf00      	nop
 8007e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e3e:	bc08      	pop	{r3}
 8007e40:	469e      	mov	lr, r3
 8007e42:	4770      	bx	lr
